#TRUSTED 836634c6eb6cd91cd66d44c451dc9bc640c310648d4c9ac4202f6083b1a57d0ea3ba27e876fb8e58fd612b543b4d4d3897998e5a1c90fcc70090a8b576bba27e98c6dd7e912235a1edad91cb56cfe2717c7de39174c0b1345319c545ea55fe93e1bd63022fbe762bb097f4962461907c4cf98326113757b305657cc478a2cb75f5be480f49cfd3873118c477b00c194389e2f4bc03b65264caae5366c308d9950f147bddba6f49ac01b1a07657b2e129e548223efe3d7dc4f644796841f18193646530fb3c5b72625123c3a51cd39f7fe47f0cab4a54a3dab1223920696aa99d60b9bd2fb5e0dc3dd67f6bd427bca1267e9c641950ffbbd76819cd0aa6bda6e8901e870401e8824cdb838678ffbe6c3ee9ed5c3d58b6d520460402d7d1d3d7251b6374e0a030c3c85e12238a46adfc742745877db33e4fda35ccceb97d699c7275a0ae7ce8f05fad1b66b5f3c00ae99e8b3884f7464b056c3dc9a3a7b0a16e5085a7bf1f5d0c74b87a6a3791378ff5d20e7fd10f509a619512ad46419c4e29e718d93734c9e060d9aa51714cebeff3f4c40422b6bdabc2a5f6fff24efc15fbca1216cd0cf6fbb7b494fd9d98abcad08b655a19d273043d491e26b585fc61d79f186437f8028d780a51d9c02dbf8be203beb45d7f23df1192c5690bf2a4c8af5a96cd57fc14b03e5734552b7de124a17daf5d47cd60299a1332d40d177ae83398
#TRUST-RSA-SHA256 7c52c53626f31390cba58917eb65b6bfdab8942f65c5c594a5f09c49e07a5e71c1ba298f10bd4fd8b9cfc2687840bf0ca016692d17132dd200152bd7eb0da974314574644ef852538b7d817f4fa75b3202be70a59fcf29fc3037935477faf062616758e917ba2f79843244e8ca62395eae0880cfdb9eaa0b88157a101da909b62d1885a707ecb49310351e8f28e85d263722063f9e86fa1fe546105ae26136e13d69694c2fb3728047ed8e2b1960abbdbc606c9e09424b701798f6d5b62bc11f5abeca579cb0215fd0810835361afe5bd3b7f710e9314e04d9af7fa62e6f9ac06b3b2c664b46b1941df337baa2b80476b0458d16c93e53dcba5838d92cd5037c05fa93715b2f5bfd9b823967ed66f40510c952e44dc112167ab5e838309be9fb1cac648cdb48ed1436052c48423f0b1a628a283178fb5001769a20ca6c6d56186157d4b7370ea9a5d97670c312fe2f4170fdec2ed44df77014c7173169c8926a693b03d010db9712249e1b3505df524baf8fe8ce170c390cb7511cfff694fd37d10c23ad1e3f7f53b92c8b30d619ffe14c38166fed85e81dc58d69f42e5896c51d06ada813d9e5e6370f301ff149344c54b61438b027fee69477c2708c00a8ffbe0cc91182e55369083f14e0d4a53ef75c106dabb4c4345a1c98df119d91ddbb827b22c50272dc3a729d730f8a63358c9a6a571ae4812f9f671d62c223cdfe83

###
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.9
#
# <at:var at:name="NOGPL" />
#
###

# Engine variable not available in Nessus < 6.6
if(nasl_level() < 6600)
  global_var EACCES = 8;

# Global vars also used by ssh_func.inc
global_var KEY_LEN;
global_var _server_algo;

namespace sshlib {

  #######################################################################
  # Global constants                                                    #
  #######################################################################
  global_var SSH_LIB_LOGIN_ERROR              = 1;
  global_var SSH_LIB_SUPPORTS_LOGIN           = 2;
  global_var SSH_LIB_SUPPORTS_COMMANDS        = 3;
  global_var SSH_LIB_LOCAL_CHECKS_ERROR       = 4;
  global_var SSH_LIB_LOCAL_CHECKS_UNAVAILABLE = 5;
  global_var SSH_LIB_SUPPORTS_LOCAL_CHECKS    = 6;

  global_var HOST_SUPPORT_LEVEL            = NULL;
  global_var HOST_SUPPORTS_LOGIN           = 2;
  global_var HOST_SUPPORTS_COMMANDS        = 3;
  global_var HOST_LOCAL_CHECKS_ERROR       = 4;
  global_var HOST_LOCAL_CHECKS_UNAVAILABLE = 5;
  global_var HOST_SUPPORTS_LOCAL_CHECKS    = 6;

  global_var MODE_IN  = 0;
  global_var MODE_OUT = 1;

  global_var DEBUG1 = 1;
  global_var DEBUG2 = 2;
  global_var DEBUG3 = 3;
  global_var DEBUG_DISABLED = 0;

  global_var SSH_LIB_ONLY_ESCL_PRIVS_IF_NEEDED = FALSE;
  global_var TAP_MODE = FALSE;
  global_var TAP_NEXT_SOCKET;

  global_var SSH_LIB_KB_PREFIX = "SSH/";
  global_var NOSETUP = "nosetup";

  global_var ssh2_packet_type_labels = make_array (
    -1,  "NO_MSG_RECV_TIMEOUT",

    1,   "PROTO_SSH_MSG_DISCONNECT",
    2,   "PROTO_SSH_MSG_IGNORE",
    3,   "PROTO_SSH_MSG_UNIMPLEMENTED",
    4,   "PROTO_SSH_MSG_DEBUG",

    5,   "PROTO_SSH_MSG_SERVICE_REQUEST",
    6,   "PROTO_SSH_MSG_SERVICE_ACCEPT",
    7,   "PROTO_SSH_MSG_EXT_INFO",

    20,  "PROTO_SSH_MSG_KEXINIT",
    21,  "PROTO_SSH_MSG_NEWKEYS",

    # KEX/GEX Codes
    30,  "PROTO_SSH_MSG_KEXDH_INIT",
    31,  "PROTO_SSH_MSG_KEXDH_REPLY",
    32,  "PROTO_SSH_MSG_KEXDH_GEX_INIT",
    33,  "PROTO_SSH_MSG_KEXDH_GEX_REPLY",
    34,  "PROTO_SSH_MSG_KEXDH_GEX_REQUEST",

    # GSSAPI codes
    60,  "PROTO_SSH_MSG_USERAUTH_GSSAPI_RESPONSE",
    61,  "PROTO_SSH_MSG_USERAUTH_GSSAPI_TOKEN",
    63,  "PROTO_SSH_MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE",
    64,  "PROTO_SSH_MSG_USERAUTH_GSSAPI_ERROR",
    65,  "PROTO_SSH_MSG_USERAUTH_GSSAPI_ERRTOK",
    66,  "PROTO_SSH_MSG_USERAUTH_GSSAPI_MIC",

    # Auth Codes
    50,  "PROTO_SSH_MSG_USERAUTH_REQUEST",
    51,  "PROTO_SSH_MSG_USERAUTH_FAILURE",
    52,  "PROTO_SSH_MSG_USERAUTH_SUCCESS",
    53,  "PROTO_SSH_MSG_USERAUTH_BANNER",
    60,  "PROTO_SSH_MSG_USERAUTH_INFO_REQUEST",
    61,  "PROTO_SSH_MSG_USERAUTH_INFO_RESPONSE",

    80,  "PROTO_SSH_MSG_GLOBAL_REQUEST",

    # RFC 4254, section 9.
    81,  "PROTO_SSH_MSG_GLOBAL_REQUEST",
    81,  "PROTO_SSH_MSG_REQUEST_SUCCESS",

    82,  "PROTO_SSH_MSG_REQUEST_FAILURE",

    # Channel codes
    90,  "PROTO_SSH2_MSG_CHANNEL_OPEN",
    91,  "PROTO_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION",
    92,  "PROTO_SSH2_MSG_CHANNEL_OPEN_FAILURE",
    93,  "PROTO_SSH2_MSG_CHANNEL_WINDOW_ADJUST",
    94,  "PROTO_SSH2_MSG_CHANNEL_DATA",
    95,  "PROTO_SSH2_MSG_CHANNEL_EXTENDED_DATA",
    96,  "PROTO_SSH2_MSG_CHANNEL_EOF",
    97,  "PROTO_SSH2_MSG_CHANNEL_CLOSE",
    98,  "PROTO_SSH2_MSG_CHANNEL_REQUEST",
    99,  "PROTO_SSH2_MSG_CHANNEL_SUCCESS",
    100, "PROTO_SSH2_MSG_CHANNEL_FAILURE"
);

  global_var PROTO_SSH_MSG_DISCONNECT                        = 1;
  global_var PROTO_SSH_MSG_IGNORE                            = 2;
  global_var PROTO_SSH_MSG_UNIMPLEMENTED                     = 3;
  global_var PROTO_SSH_MSG_DEBUG                             = 4;

  global_var PROTO_SSH_MSG_SERVICE_REQUEST                   = 5;
  global_var PROTO_SSH_MSG_SERVICE_ACCEPT                    = 6;
  global_var PROTO_SSH_MSG_EXT_INFO                          = 7;

  global_var PROTO_SSH_MSG_KEXINIT                           = 20;
  global_var PROTO_SSH_MSG_NEWKEYS                           = 21;

  # KEX/GEX Codes
  global_var PROTO_SSH_MSG_KEXDH_INIT                        = 30;
  global_var PROTO_SSH_MSG_KEXDH_REPLY                       = 31;
  global_var PROTO_SSH_MSG_KEX_DH_GEX_GROUP                  = 31;
  global_var PROTO_SSH_MSG_KEXDH_GEX_INIT                    = 32;
  global_var PROTO_SSH_MSG_KEXDH_GEX_REPLY                   = 33;
  global_var PROTO_SSH_MSG_KEXDH_GEX_REQUEST                 = 34;

  # GSSAPI codes
  global_var PROTO_SSH_MSG_USERAUTH_GSSAPI_RESPONSE          = 60;
  global_var PROTO_SSH_MSG_USERAUTH_GSSAPI_TOKEN             = 61;
  global_var PROTO_SSH_MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE = 63;
  global_var PROTO_SSH_MSG_USERAUTH_GSSAPI_ERROR             = 64;
  global_var PROTO_SSH_MSG_USERAUTH_GSSAPI_ERRTOK            = 65;
  global_var PROTO_SSH_MSG_USERAUTH_GSSAPI_MIC               = 66;

  # Auth Codes
  global_var PROTO_SSH_MSG_USERAUTH_REQUEST                  = 50;
  global_var PROTO_SSH_MSG_USERAUTH_FAILURE                  = 51;
  global_var PROTO_SSH_MSG_USERAUTH_SUCCESS                  = 52;
  global_var PROTO_SSH_MSG_USERAUTH_BANNER                   = 53;
  global_var PROTO_SSH_MSG_USERAUTH_INFO_REQUEST             = 60;
  global_var PROTO_SSH_MSG_USERAUTH_INFO_RESPONSE            = 61;
  global_var PROTO_SSH_MSG_USERAUTH_PASSWD_CHANGEREQ         = 60;
  global_var PROTO_SSH_MSG_USERAUTH_PK_OK                    = 60;

  # RFC 4254, section 9.
  global_var PROTO_SSH_MSG_GLOBAL_REQUEST                    = 80;
  global_var PROTO_SSH_MSG_REQUEST_SUCCESS                   = 81;

  global_var PROTO_SSH_MSG_REQUEST_FAILURE                   = 82;
  # Channel codes
  global_var PROTO_SSH2_MSG_CHANNEL_OPEN                     = 90;
  global_var PROTO_SSH2_MSG_CHANNEL_OPEN_CONFIRMATION        = 91;
  global_var PROTO_SSH2_MSG_CHANNEL_OPEN_FAILURE             = 92;
  global_var PROTO_SSH2_MSG_CHANNEL_WINDOW_ADJUST            = 93;
  global_var PROTO_SSH2_MSG_CHANNEL_DATA                     = 94;
  global_var PROTO_SSH2_MSG_CHANNEL_EXTENDED_DATA            = 95;
  global_var PROTO_SSH2_MSG_CHANNEL_EOF                      = 96;
  global_var PROTO_SSH2_MSG_CHANNEL_CLOSE                    = 97;
  global_var PROTO_SSH2_MSG_CHANNEL_REQUEST                  = 98;
  global_var PROTO_SSH2_MSG_CHANNEL_SUCCESS                  = 99;
  global_var PROTO_SSH2_MSG_CHANNEL_FAILURE                  = 100;

  # RFC 4253 Section 6.1
  global_var MAX_PACKET_SIZE = 35000;

# from RFC 4254
  global_var PTY_OPT_TTY_OP_END = 0; # Indicates end of options.
  global_var PTY_OPT_VINTR = 1; # Interrupt character; 255 if none.  Similarly for the other characters.  Not all of these characters are supported on all systems.
  global_var PTY_OPT_VQUIT = 2; # The quit character (sends SIGQUIT signal on POSIX systems).
  global_var PTY_OPT_VERASE = 3; # Erase the character to left of the cursor.
  global_var PTY_OPT_VKILL = 4; # Kill the current input line.
  global_var PTY_OPT_VEOF = 5; # End-of-file character (sends EOF from the terminal).
  global_var PTY_OPT_VEOL = 6; # End-of-line character in addition to carriage return and/or linefeed.
  global_var PTY_OPT_VEOL2 = 7; # Additional end-of-line character.
  global_var PTY_OPT_VSTART = 8; #Continues paused output (normally control-Q).
  global_var PTY_OPT_VSTOP = 9; # Pauses output (normally control-S).
  global_var PTY_OPT_VSUSP = 10; # Suspends the current program.
  global_var PTY_OPT_VDSUSP = 11; # Another suspend character.
  global_var PTY_OPT_VREPRINT = 12; # Reprints the current input line.
  global_var PTY_OPT_VWERASE = 13; # Erases a word left of cursor.
  global_var PTY_OPT_VLNEXT = 14; # Enter the next character typed literally, even if it is a special character
  global_var PTY_OPT_VFLUSH = 15; # Character to flush output.
  global_var PTY_OPT_VSWTCH = 16; # Switch to a different shell layer.
  global_var PTY_OPT_VSTATUS = 17; # Prints system status line (load, command, pid, etc).
  global_var PTY_OPT_VDISCARD = 18; # Toggles the flushing of terminal output.

  global_var PTY_OPT_IGNPAR = 30; # The ignore parity flag.  The parameter SHOULD be 0 if this flag is FALSE, and 1 if it is TRUE.
  global_var PTY_OPT_PARMRK = 31; # Mark parity and framing errors.
  global_var PTY_OPT_INPCK = 32; # Enable checking of parity errors.
  global_var PTY_OPT_ISTRIP = 33; # Strip 8th bit off characters.
  global_var PTY_INLCR = 34; # Map NL into CR on input.
  global_var PTY_IGNCR = 35; # Ignore CR on input.
  global_var PTY_ICRNL = 36; # Map CR to NL on input.
  global_var PTY_IUCLC = 37; # Translate uppercase characters to lowercase.
  global_var PTY_IXON  = 38; # Enable output flow control.
  global_var PTY_IXANY = 39; # Any char will restart after stop.
  global_var PTY_IXOFF = 40; # Enable input flow control.
  global_var PTY_IMAXBEL = 41; # Ring bell on input queue full.

  global_var PTY_OPT_ISIG = 50; # Enable signals INTR, QUIT, [D]SUSP.
  global_var PTY_OPT_ICANON = 51; # Canonicalize input lines.
  global_var PTY_OPT_XCASE = 52; # Enable input and output of uppercase characters by preceding their lowercase equivalents with "\".
  global_var PTY_OPT_ECHO = 53; # Enable echoing.
  global_var PTY_OPT_ECHOE = 54; # Visually erase chars.
  global_var PTY_OPT_ECHOK = 55; # Kill character discards current line.
  global_var PTY_OPT_ECHONL = 56; # Echo NL even if ECHO is off.
  global_var PTY_OPT_NOFLSH = 57; # Don't flush after interrupt.
  global_var PTY_OPT_TOSTOP = 58; # Stop background jobs from output.
  global_var PTY_OPT_IEXTEN = 59; # Enable extensions.
  global_var PTY_OPT_ECHOCTL = 60; # Echo control characters as ^(Char).
  global_var PTY_OPT_ECHOKE = 61; # Visual erase for line kill.
  global_var PTY_OPT_PENDIN = 62; # Retype pending input.

  global_var PTY_OPT_OPOST = 70; # Enable output processing.
  global_var PTY_OPT_OLCUC = 71; # Convert lowercase to uppercase.
  global_var PTY_OPT_ONLCR = 72; # Map NL to CR-NL.
  global_var PTY_OPT_OCRNL = 73; # Translate carriage return to newline (output).
  global_var PTY_OPT_ONOCR = 74; # Translate newline to carriage return-newline (output).
  global_var PTY_OPT_ONLRET = 75; # Newline performs a carriage return (output).

  global_var PTY_OPT_CS7 = 90; # 7 bit mode.
  global_var PTY_OPT_CS8 = 91; # 8 bit mode.
  global_var PTY_OPT_PARENB = 92; # Parity enable.
  global_var PTY_OPT_PARODD = 93; # Odd parity, else even.

  global_var PTY_OPT_TTY_OP_ISPEED = 128; # Specifies the input baud rate in bits per second.
  global_var PTY_OPT_TTY_OP_OSPEED = 129; # Specifies the output baud rate in bits per second.

  global_var DEFAULT_PTY_SIZE_PIXELS = make_list(640, 480);
  global_var DEFAULT_PTY_SIZE_CHARS = make_list(80, 24);
  global_var DEFAULT_PTY_OPTS = make_array(
    PTY_OPT_ECHO, mkdword(1, order:BYTE_ORDER_BIG_ENDIAN),
    PTY_OPT_OCRNL, mkdword(0, order:BYTE_ORDER_BIG_ENDIAN)
  );

  global_var DEFAULT_PTY_TERM = "vt100";
  global_var _BANNER_PAGINATION_SPACES = FALSE;
  global_var host_info_key_val = make_array();

  global_var ESCAPE_STRING_FOR_REGEX = "(\-|\*|\\|\^|\[|\]|\(|\)|\{|\}|\$|\+)";

  #######################################################################
  # General utility functions                                           #
  #######################################################################

  ##
  # Extracts length prefixed string from ssh packet buffer
  #
  # @param <buffer> Buffer to extract string from
  # @param <pos> Position in buffer where length prefixed string is located
  # @return Returns extracted string
  # @category SSH
  ##
  function get_ssh_string(buffer, pos)
  {
    local_var len, ret, fn;
    fn = 'get_ssh_string';

    if(pos + 4 > strlen(buffer))
      return NULL;
    len = getdword(blob:buffer, pos:pos, order:BYTE_ORDER_BIG_ENDIAN);
    if(isnull(len))
      return NULL;
    if(len == 0)
      return "";
    pos += 4;
    if(pos + len > strlen(buffer))
      return NULL;

    return substr(buffer, pos, pos + len - 1);;
  }

  ##
  # Extracts length-prefixed multiple precision integer (mpint) in ssh packet.
  # buffer. See rfc4251 section 5 for details.
  #
  # @param <buffer> Buffer to extract mpint from
  # @param <pos> Position in buffer where mpint is located
  # @returns array with length and value of mpint
  # @category SSH
  ##
  function get_ssh_mpint(buffer, pos)
  {
    local_var len, ret, fn, first;
    fn = 'get_ssh_mpint';
    ret = make_array();

    if(pos + 4 > strlen(buffer))
      return NULL;
    len = getdword(blob:buffer, pos:pos, order:BYTE_ORDER_BIG_ENDIAN);
    if(isnull(len))
      return NULL;
    if(len == 0)
      return "";
    pos += 4;
    if(pos + len > strlen(buffer))
      return NULL;

    ret['value'] = substr(buffer, pos, pos + len - 1);
    ret['length'] = strlen(ret['value']) + 4;

    first = getbyte(blob:ret['value'], pos:0);

    if(first == 0)
    {
      ret['value'] = substr(ret['value'], 1);
    }

    return ret;
  }

  ##
  # Builds length prefixed ssh string
  # See rfc4251 section 5 for details
  #
  # @anonparam <First> String
  # @return encoded SSH length-prefixed string
  # @category SSH
  ##
  function mk_ssh_string()
  {
    local_var buffer;
    buffer = _FCT_ANON_ARGS[0];
    return mkdword(strlen(buffer), order:BYTE_ORDER_BIG_ENDIAN) + buffer;
  }

  ##
  # Normalizes mpint by removing leading 0x00
  # @anonparam <First> mpint string to normalize
  # @return normalized mpint
  # @category SSH
  ##
  function normalize_mpint()
  {
    local_var mpint;
    mpint = _FCT_ANON_ARGS[0];
    if(getbyte(blob:mpint, pos:0) == 0)
      return substr(mpint, 1);
    return mpint;
  }

  ##
  # Builds length-prefixed multiple precision integer (mpint) string.
  # See rfc4251 section 5 for details.
  #
  # @param <buffer> raw string containing mpint
  # @return string with prefix-length encoded mpint
  # @category SSH
  ##
  function mk_ssh_mpint(buffer)
  {
    local_var len;

    if (isnull(buffer))
      buffer = _FCT_ANON_ARGS[0];

    if (ord(buffer[0]) & 0x80)
      len = mkdword(strlen(buffer) + 1, order:BYTE_ORDER_BIG_ENDIAN) +
        mkbyte(0);
    else
      len = mkdword(strlen(buffer), order:BYTE_ORDER_BIG_ENDIAN);

    return len + buffer;
  }

  ##
  # A utility function for converting integers into the (/[0-9+/|/)
  # notation used to specify alternative kb items.
  #
  # @anonparam integer index
  # @return kb index string
  # @category SSH
  ##
  function kb_index()
  {
    local_var j;
    j = _FCT_ANON_ARGS[0];
    if (j < 0) return '/';
    else return '/'+j+'/';
  }

  ##
  # A utility function for removing escape sequences to clean up
  # data before it is returned to the plugin.
  #
  # @anonparam string s
  # @return string sanitized data
  # @category SSH
  ##
  function remove_escape_sequences()
  {
    local_var s;

    s = _FCT_ANON_ARGS[0];

    if ('\x1b' >!< s || '\x00' >< s)
      return s;

    s = ereg_replace(pattern:'\x1b\\[[0-9]+(;[0-9]+)?[A-Za-z]', replace:'', string:s);
    s = ereg_replace(pattern:'\x1b\\[\\?[0-9]+[A-Za-z]', replace:'', string:s);
    s = ereg_replace(pattern:'\x1b\\[[mK]', replace:'', string:s);
    s = ereg_replace(pattern:'\x1b=\x0d', replace:'', string:s);
    s = ereg_replace(pattern:'\x1b\x3e', replace:'', string:s);
    s = ereg_replace(pattern:'\x1b[0-9]*E', replace:'\n', string:s);

    return s;
  }

  ##
  # Iterates through "Secret/SSH/[0-9]+/*" kb items (set by ssh settings plugin)
  # and determines whether or not the host name or host IP is present in a
  # priority list for the credentials. Priority credentials are returned before
  # non-priority credentials, in a list of indexes.
  #
  # @return Returns TRUE if a login succeeds using stored credentials, FALSE if none
  #         login was not possible using stored credential sets and NULL if an error
  #         happens.
  # @category SSH
  ##
  function determine_credential_order()
  {
    var j, element, priority_kb, priority_split, split_holder, priority_split2, priority_target, found_priority;
    var username, jindex;
    var kb_host, kb_ip;
    var priority_list = [];
    var non_priority_list = [];
    var return_list = [];
    var hostname = get_host_name();
    var hostip = get_host_ip();

    if(TAP_MODE)
    {
      kb_host = get_one_kb_item(sshlib::SSH_LIB_KB_PREFIX+"DEBUG_TEST/hostname");
      kb_ip = get_one_kb_item(sshlib::SSH_LIB_KB_PREFIX+"DEBUG_TEST/hostip");
      if (!isnull(kb_host))
      {
        hostname = kb_host;
      }
      if (!isnull(kb_ip))
      {
        hostip = kb_ip;
      }
    }

    # Iterate through credentials in the KB
    # will terminate when no more usernames can be found in the kb
    for (j = -1; TRUE; j++)
    {
      jindex = kb_index(j);

      # Retrieve the username from the credential set
      username = get_kb_item("Secret/SSH"+jindex+"login");
      # The UI will not allow an SSH credential to be saved without a username
      # If there are no more credentials to try, exit loop
      if(!username)
      {
        if (j >= 0) dbg::detailed_log(lvl:3, src:FUNCTION_NAME, msg:'All available credential sets have been checked for priority.');
        else dbg::detailed_log(lvl:3, src:FUNCTION_NAME, msg:'No SSH credential sets were found.');
        break;
      }
      priority_kb = get_one_kb_item("SSH"+jindex+"target_priority_list");
      if (!empty_or_null(priority_kb))
      {
        dbg::detailed_log(
          lvl:3,
          src:FUNCTION_NAME,
          msg:'Target priority list for credential set ' + j,
          msg_details:{
             "Target Priority List":{"lvl":3, "value":priority_kb}
          });
        found_priority = FALSE;
        priority_split = split(priority_kb, sep:',', keep:FALSE);
        foreach split_holder (priority_split)
        {
          foreach priority_target (split(split_holder, sep:' ', keep:FALSE))
          {
            if (priority_target == hostname || priority_target == hostip || check_ipv4_in_cidr(ip:hostip, cidr:priority_target))
            {
              found_priority = TRUE;
              break;
            }
          }
        }
        if (found_priority)
        {
          dbg::detailed_log(lvl:3, src:FUNCTION_NAME, msg:'Credential set ' + j + ' has priority for this target');
          append_element(var:priority_list, value:j);
        }
        else
        {
          append_element(var:non_priority_list, value:j);
        }
      }
      else
      {
        append_element(var:non_priority_list, value:j);
      }
    }
    foreach element (priority_list)
    {
      append_element(var:return_list, value:element);
    }
    foreach element (non_priority_list)
    {
      append_element(var:return_list, value:element);
    }
    dbg::detailed_log(lvl:3, src:FUNCTION_NAME, msg:'Return list indexes are as follows: ' + obj_rep(return_list));
    return return_list;
  }

}
