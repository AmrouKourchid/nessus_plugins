#TRUSTED 94b3e24eacb311f98413cadf8c5ae7408971661ab210a712bdd4e4e873682644ec5a497176e5757ded0ca240f25af45162c9dae712bdcf5430de2bd11cbc46b8b92f36c2670df4e9d2f1bdafd53fd730e6758193dfbd5768c0e18b24f6a268bb2978cf2f0d04f4291d4ae4eee65e29dd02b4c27207a90e3d059032072d6d945425f75ece66de6df1d413480eb9a1177a71c080ba997740f027a97925d551458b37358ef3451337a1e01f1c69e75b5ddab8c42c04d9963c0da3889d531cb5d1077e3a8022e386e87e33e02384ab97820f248c50899a08832d7a8798ea859c2c4e47b9b2ef7f4932a7e3299e1692c39f7aa442b4fe31e6a87b8d1accef8fe372402f8f3e4675e7e60d241a423e05d5404506676cc5cf610cbc8524d8ffdadd8515ebf622381f7f81946b0a810788371ff8568758d32222bb8010e15ac25175ac5d53b84efc031251c6491ab2307fec492d15b565c3b0fa99339800a734d1ea63381585388fdff852a23b0e2fab62190f7f8fe46d2e37aee8aceede4e382a79155614533d7fe282c2c80b5cdf09227d6b510f3354fe5940d08ac30745442222a84d290daa6bdfdf7e038501ca896b6b178f04d4dbf745b283803732f421e889c70366c66dc4a8f8a609de60d17f803649a512d5b5b8b105bcbc6945c169856c23e9fa4bd8e2ce629f95aeaaa9ee3b64c2782eff83df299fb11181727d8521e046bc
###
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# @NOGPL@
#
# Revision: 1.2
#
# This shell handler is more of a wrapper around the basic shell handler.
# The idea is that the handler will manage a stack of layers that the shell
# can be in; what layer it entered at, what layer it is in, how to change
# between the layers.
#
# The handler will obtain a specified shell, and remain at that shell for
# future calls.
#
# A revert() was added to be able to revert to the original entry shell.
#
# A close() is included to properly revert and close the channel.  This does
# not appear to be necessary, but provided to give a better close out in the
# session.  The technical challenge of using a desconstructor is the required
# access to 'channel'.
#
###

namespace sshlib
{
  global_var _NEXUS_SH_DEFAULT_INACTIVITY_TIMEOUT = 60;
  global_var _NEXUS_SH_INITIAL_INACTIVITY_TIMEOUT = 5;

  ##
  # Cisco Nexus shells
  ##
  var NXOS_MODE   = 'Cisco Nexus NX-OS style CLI';
  var OBJECT_MODE = 'Cisco Nexus Object mode CLI';

  ##
  # callback function that checks to see if module has been
  # successfully entered
  #
  # @param session session handle for ssh session
  # @param channel channel for ssh session
  #
  # @return TRUE if timeout reached
  # @category SSH
  ##
  function cb_nexus_sh_entered_nxos_mode_or_timeout(&session, &channel)
  {
    if(!channel.shell_handler) return channel_closed_return_true(channel:channel);
    return channel.shell_handler.cb_entered_nxos_mode_or_timeout(channel:channel);
  }
  
  ##
  # callback function that checks to see if ftd has been
  # successfully entered
  #
  # @param session session handle for ssh session
  # @param channel channel for ssh session
  #
  # @return TRUE if timeout reached
  # @category SSH
  ##
  function cb_nexus_sh_entered_object_mode_or_timeout(&session, &channel)
  {
    if(!channel.shell_handler) return channel_closed_return_true(channel:channel);
    return channel.shell_handler.cb_entered_object_mode_or_timeout(channel:channel);
  }

  # Nexus shell manager, handles 2 Nexus shells and switching
  # between them while wrapping basic_shell_handler to run commands
  object nexus_shell_manager : sshlib::basic_shell_handler
  {
    var objname = 'nexus_shell_manager::';
    var default_shell;
    var last_shell_used;
    var cmd_prompts = {};
    var kb_cmd_prompts = {};
    var kb_id;

    ##
    # Shell that channel is currently in
    ##
    var current_shell;

    # Shell handler initialization caller
    # @category SSH
    ##
    function nexus_shell_manager()
    {
      this.init();

      this.kb_cmd_prompts[NXOS_MODE] = '/nexus_cmd_prompt_nxos_mode';
      this.kb_cmd_prompts[OBJECT_MODE] = '/nexus_cmd_prompt_object_mode';

    }

    ##
    # Initialize cmd_prompts from KB
    # @category SSH
    ##
    function get_cmd_prompts()
    {
      var key, module, modules, val;
      foreach var layer ([NXOS_MODE, OBJECT_MODE])
      {
        key = this.kb_id + this.kb_cmd_prompts[layer];
        this.cmd_prompts[layer] = get_kb_blob(kb_id + this.kb_cmd_prompts[layer]);
      }
    }

    ##
    # Set a command prompt in the KB
    # @param layer Shell layer
    # @param cmd_prompt Command prompt to set
    # @category SSH
    ##
    function set_nexus_cmd_prompt(layer, cmd_prompt)
    {
      this.cmd_prompts[layer] = cmd_prompt;
      var key = this.kb_id + this.kb_cmd_prompts[layer];
      return replace_kb_blob(name:key, value:cmd_prompt);
    }

    ##
    # Get a command prompt from the KB
    # @param layer Shell layer
    # @param cmd_prompt Command prompt to set
    # @category SSH
    ##
    function get_nexus_cmd_prompt(layer)
    {
      if (this.cmd_prompts[layer])
        return this.cmd_prompts[layer];
      var key = this.kb_id + this.kb_cmd_prompts[layer];
      return get_kb_blob(key);
    }

    ##
    # callback function that checks to see if module has been
    # successfully entered
    #
    # @param channel channel for ssh session
    #
    # @return TRUE if timeout reached
    # @category SSH
    ##
    public function cb_entered_nxos_mode_or_timeout(&channel)
    {
      var fn = objname + FUNCTION_NAME;
      var session = channel.session;

      if ("#" >< channel.data_buf)
      {
        this.current_shell = NXOS_MODE;
        return TRUE;
      }
      else if ("No connectivity to module" >< channel.data_buf)
      {
        dbg::detailed_log(lvl:1, src:fn, msg:'No connectivity to module.');
        return TRUE;
      }

      return this.check_inactivity_timeout(channel:channel);
    }

    ##
    # callback function that checks to see if ftd has been
    # successfully entered
    #
    # @param channel channel for ssh session
    #
    # @return TRUE if timeout reached
    # @category SSH
    ##
    public function cb_entered_object_mode_or_timeout(&channel)
    {
      if (":~>" >< channel.data_buf)
      {
        this.current_shell = OBJECT_MODE;
        return TRUE;
      }
      return this.check_inactivity_timeout(channel:channel);
    }

    ##
    # Opens a new shell and runs "help" to determine the
    # default shell
    #
    # @param channel channel for ssh session
    # @param cmd_timeout_min The total number of seconds that may elapse
    #                      waiting for the command response. (optional)
    # @param inactivity_timeout_min The number of seconds that may
    #                             elapse with no data received from
    #                             the target. (optional)
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    protected function _set_default_shell(&channel, cmd_timeout_min,
        inactivity_timeout_min)
    {
      var fn = objname + FUNCTION_NAME;
      var session = channel.session;
      var res = super.run_command(
        command                : "help",
        channel                : channel,
        cmd_timeout_min        : cmd_timeout_min,
        inactivity_timeout_min : inactivity_timeout_min);
      if (!res)
      {
        dbg::detailed_log(lvl:1, src:fn,
          msg:'Default shell does not appear to be a Cisco Nexus shell because command "help" failed to return results.');
        return FALSE;
      }

      if ('Error: Invalid argument' >< res)
      {
        this._init_shell_values(shell: channel.shell_handler, layer: NXOS_MODE);
      }
      else if ('GNU bash, version' >< res)
      {
        this._init_shell_values(shell: channel.shell_handler, layer: OBJECT_MODE);
      }
      else
      {
        dbg::detailed_log(lvl:1, src:fn,
          msg:'Default shell does not appear to be a Cisco Nexus shell',
          msg_details:{'Result of "help"':{"lvl":1, "value":res}});
        return FALSE;
      }

      dbg::detailed_log(lvl:2, src:fn, msg:'Setting default shell to: ' + this.default_shell);
      replace_kb_item(name:kb_id + '/default_shell', value:this.default_shell);
      return TRUE;
    }

    ##
    # Helper function to set the default values for the identified shell.
    #
    # @param layer name of shell to use
    # @param shell shell handler object
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    protected function _init_shell_values(layer, shell)
    {
      if (isnull(layer))
        return FALSE;

      if (isnull(shell) && isnull(this.cmd_prompts[layer]))
        return FALSE;

      this.default_shell = layer;
      this.current_shell = layer;
      if (shell) this.cmd_prompts[layer] = shell.cmd_prompt;
      if (!get_kb_item(kb_id + this.kb_cmd_prompts[layer]))
        set_kb_blob(name:kb_id + this.kb_cmd_prompts[layer], value:this.cmd_prompts[layer]);
      this.last_shell_used = this.default_shell;

      return TRUE;
    }

    ##
    # Switches the shell handler between the different posible shells
    #
    # @param channel channel for ssh session
    # @param source  The source shell changing from
    # @param destination  The destination shell changing to
    # @param command The command to use to change the shell (optional, default 'exit')
    # @param callback The callback function to use (optional, default @basic_shell_handler_at_prompt3_or_timeout)
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    protected function _change_shell_layer(&channel, source, destination, command, callback)
    {
      var fn = objname + FUNCTION_NAME;
      var session = channel.session;
      var msg = NULL;
      var default_callback = FALSE;

      # verify the environment is setup as needed
      if (this.current_shell != source)
      {
        dbg::detailed_log(lvl:1, src:fn, msg:'Current shell is not "' + source + '".');
        return FALSE;
      }

      if (isnull(command))
      {
        dbg::detailed_log(lvl:1, src:fn, msg:'No command provided.');
        return FALSE;
      }

      if (!channel_usable_for_shell_command(channel:channel))
        return FALSE;

      if (isnull(callback))
      {
        dbg::detailed_log(lvl:3, src:fn, msg:'Using default callback.');
        default_callback = TRUE;
        callback = @basic_shell_handler_at_prompt3_or_timeout;
      }

      dbg::detailed_log(lvl:3, src:fn, msg:'Changing "' + source + '" to "' + destination + '".');
      dbg::detailed_log(lvl:1, src:fn, msg:'command: ' + command);

      # Null out and set the cmd prompt if known
      var orig_cmd_prompt = this.cmd_prompt;
      this.cmd_prompt = this.get_nexus_cmd_prompt(layer:destination);
      var check_len = 3;
      if (this.cmd_prompt)
      {
        if (strlen(this.cmd_prompt) < 3) check_len = strlen(this.cmd_prompt);
        dbg::detailed_log(lvl:2, src:fn, msg:'Expecting command prompt: ' + this.cmd_prompt);
      }

      # run command to get change layer
      channel.clear_data_buf();
      channel.window_send_data(data:command + '\n');
      this.timeout_check = _NEXUS_SH_DEFAULT_INACTIVITY_TIMEOUT;
      channel.session.sshrecv_until(
        end_states     : make_list("SOC_CLOSED"),
        check_callback : callback,
        channel        : channel,
        timeout        : this.recv_timeout);

      # If using the default callback and did not time out, then the
      # shell was gained with the expected command prompt
      if (default_callback && !this.timed_out)
      {
        this.current_shell = destination;
      }
      # Custom call backs will change the shell on their own
      else if (this.current_shell != destination)
      {
        msg = 'Failed to obtain shell "' + destination + '"';
        session.set_cmd_error(msg);
        # Try to get back to source cmd_prompt
        if (orig_cmd_prompt)
        {
          this.cmd_prompt = orig_cmd_prompt;
          check_len = 3;
          if (strlen(this.cmd_prompt) < 3) check_len = strlen(this.cmd_prompt);
          dbg::detailed_log(lvl:2, src:fn, msg:'Getting command prompt',
            msg_details:{"Expected command prompt":{"lvl":2, "value":this.cmd_prompt}});
          channel.window_send_data(data:'\x03');
          this.timeout_check = _NEXUS_SH_INITIAL_INACTIVITY_TIMEOUT;
          channel.session.sshrecv_until(
            end_states     : make_list("SOC_CLOSED"),
            check_callback : @basic_shell_handler_at_prompt2_or_timeout,
            channel        : channel,
            timeout        : this.recv_timeout);

          # If we got back to the original command prompt, don't set
          # last_cmd_error
          if (!this.timed_out)
          {
            return FALSE;
          }

          session.set_cmd_error('Timed out waiting for expected command prompt: ' + this.cmd_prompt);
        }
        this.last_cmd_error = TRUE;
        return FALSE;
      }
      # Try to receive the command prompt if we haven't already
      else if (isnull(this.cmd_prompt) || !super.at_cmd_prompt(buf:channel.data_buf, check_len:check_len))
      {
        if (!channel_usable_for_shell_command(channel:channel))
          return FALSE;

        dbg::detailed_log(lvl:2, src:fn, msg:'Getting command prompt');
        channel.window_send_data(data:'\x03');
        this.timeout_check = _NEXUS_SH_INITIAL_INACTIVITY_TIMEOUT;
        channel.session.sshrecv_until(
          end_states     : make_list("SOC_CLOSED"),
          check_callback : @basic_shell_handler_at_prompt2_or_timeout,
          channel        : channel,
          timeout        : this.recv_timeout);

        if (this.cmd_prompt && this.timed_out)
        {
          session.set_cmd_error('Timed out waiting for expected command prompt: ' + this.cmd_prompt);
          this.last_cmd_error = TRUE;
          return FALSE;
        }
        if (!this.cmd_prompt)
        {
          # changed to
          var lines = split(channel.data_buf, sep:'\n', keep:FALSE);
          var tmp_prompt = lines[max_index(lines)-1];
          dbg::detailed_log(lvl:3, src:fn, msg:'Found tmp_prompt: ' + tmp_prompt);
          if (tmp_prompt =~ '^\xA0')
          {
            tmp_prompt = substr(tmp_prompt, 1);
            dbg::detailed_log(lvl:3, src:fn, msg:'Massaging tmp_prompt: ' + tmp_prompt);
          }
          if (tmp_prompt =~ '^\\^C')
          {
            tmp_prompt = substr(tmp_prompt, 2);
            dbg::detailed_log(lvl:3, src:fn, msg:'Massaging tmp_prompt: ' + tmp_prompt);
          }
          this.cmd_prompt = tmp_prompt;
          this.cmd_prompts[destination] = this.cmd_prompt;

          this.set_nexus_cmd_prompt(layer:destination, cmd_prompt:this.cmd_prompt);
          dbg::detailed_log(lvl:1, src:fn, msg:'Found command prompt: ' + this.cmd_prompt);
        }
      }
      dbg::detailed_log(lvl:2, src:fn, msg:'Successfully obtained shell "' + destination + '"');

      this.fresh_shell = FALSE;
      this.timed_out = FALSE;
      this.last_cmd_error = FALSE;
      this.last_shell_used = destination;
      channel.clear_data_buf();

      return TRUE;
    }

    ##
    # Utility functions to request a shell change to NXOS MODE
    #
    # @param channel channel for ssh session
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    public function get_sh_nxos_mode(&channel)
    {
      # make sure the change can happen
      if (this.default_shell == NXOS_MODE)
        return TRUE;

      # change the shells
      if (this.current_shell == OBJECT_MODE)
        this._change_shell_layer(
          channel:channel,
          source:OBJECT_MODE,
          destination:NXOS_MODE,
          command:'exit');

      # check that ending shell is the correct shell
      if (this.current_shell == NXOS_MODE)
        return TRUE;

      return FALSE;
    }

    ##
    # Utility functions to request a shell change to module
    #
    # @param channel channel for ssh session
    # @param module module number to use
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    public function get_sh_object_mode(&channel)
    {
      # make sure the change can happen
      if (this.default_shell == OBJECT_MODE)
        return TRUE;

      # change the shells
      if (this.current_shell == NXOS_MODE)
        this._change_shell_layer(
          channel:channel,
          source:NXOS_MODE,
          destination:OBJECT_MODE,
          command:'bash');

      # check that ending shell is the correct shell
      if (this.current_shell == OBJECT_MODE)
        return TRUE;

      return FALSE;
    }

    ##
    # Determine command to connect to the shell
    #
    # @return function reference
    ##
    protected function _get_nxos_mode_callback()
    {
      if (isnull(this.get_nexus_cmd_prompt(layer:NXOS_MODE)))
        return @cb_nexus_sh_entered_nxos_mode_or_timeout;
      else
        return NULL;
    }

    ##
    # Determine command to connect to the shell
    #
    # @return function reference
    ##
    protected function _get_object_mode_callback()
    {
      if (
        isnull(this.get_nexus_cmd_prompt(layer:OBJECT_MODE)) ||
        strlen(this.cmd_prompts[OBJECT_MODE]) < 3
      )
        return @cb_nexus_sh_entered_object_mode_or_timeout;
      else
        return NULL;
    }

    ##
    # Utility functions to check all valid shells
    #
    # @param shell shell string to check
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    protected function _is_valid_shell(shell)
    {
      return
        shell == NXOS_MODE ||
        shell == OBJECT_MODE;
    }

    ##
    # run given command
    #
    # @param session SSH session in case reconnection is needed
    # @param channel channel for ssh session
    # @param command cmd to run
    # @param force_priv_escl force priv escalation flag
    # @param cmd_timeout_min The total number of seconds that may elapse
    #                      waiting for the command response. (optional)
    # @param inactivity_timeout_min The number of seconds that may
    #                             elapse with no data received from
    #                             the target. (optional)
    # @param cmd_shell The global var for the Nexus shell that should
    #                  be used to run the command (optional, default NXOS_MODE)
    #
    # @return command result or NULL on failure
    # @category SSH
    ##
    public function run_command(&session, &channel, command, force_priv_escl,
        cmd_timeout_min, inactivity_timeout_min, cmd_shell)
    {
      var fn = objname + FUNCTION_NAME;
      var obj_ch_id = '[channel ' + channel.local_channel + ']: ';
      var msg, res;

      # Check channel and replace if necessary; replace_shell() will
      # set applicable error if it fails
      channel.set_shell_handler(shell_handler:this);
      if (!channel_usable_for_shell_command(channel:channel))
      {
        if (!session_replace_shell(session:session, channel:channel))
        {
          msg = 'Did not run command due to session error.\nCommand : ' + command + '\nSession error : "' + last_error + '"';
          session.set_error(msg);
          return msg;
        }
        this.fresh_shell = TRUE;
      }

      # Initialize variables
      set_timeouts(inactivity_timeout_min:inactivity_timeout_min,
          cmd_timeout_min:cmd_timeout_min);

      this.kb_id = SSH_LIB_KB_PREFIX + session.get_kb_connection_id();
      this.get_cmd_prompts();

      if (this.fresh_shell && !this.default_shell)
      {
        dbg::detailed_log(lvl:2, src:fn, msg:'Checking default Cisco Nexus shell.');
        this.default_shell = get_kb_item(this.kb_id + '/default_shell');
        if (!this.default_shell || !this.cmd_prompts[this.default_shell])
        {
          this._set_default_shell(
            channel                : channel,
            cmd_timeout_min        : cmd_timeout_min,
            inactivity_timeout_min : inactivity_timeout_min);
        }
      }

      if (!this.default_shell)
      {
        session.set_cmd_error('Unable to run command. Failed to ' +
          'confirm that default shell is a Cisco Nexus shell.');
        return NULL;
      }

      # If fresh shell, assume current shell is default shell
      if (this.fresh_shell) this._init_shell_values(layer:this.default_shell);

      # Assume last shell used as shell to run in if not specified
      if (isnull(cmd_shell)) cmd_shell = this.last_shell_used;

      dbg::detailed_log(lvl:1, src:fn, msg:'Command to run : ' + command);
      dbg::detailed_log(lvl:1, src:fn, msg:'Cisco Nexus shell to use : ' + cmd_shell);

      # Verify the current and target shells are known shell before proceeding
      if (!this._is_valid_shell(shell: this.current_shell))
      {
        session.set_cmd_error('Unable to run command. Current shell "' +
          this.current_shell + '" is not a known Cisco Nexus shell.');
        return NULL;
      }
      if (!this._is_valid_shell(shell: cmd_shell))
      {
        session.set_cmd_error('Unable to run command. Target shell "' +
          cmd_shell + '" is not a known Cisco Nexus shell.');
        return NULL;
      }

      # Set sh to the target shell for the command
      dbg::detailed_log(lvl:2, src:fn,
        msg:'Making sure the current shell is the specified shell "' + cmd_shell + '" to run the command.');

      if (cmd_shell == this.current_shell)
      {
        res = TRUE;
      }
      else if (cmd_shell == NXOS_MODE)
      {
        res = this.get_sh_nxos_mode(channel:channel);
      }
      else if (cmd_shell == OBJECT_MODE)
      {
        res = this.get_sh_object_mode(channel:channel);
      }
      else
      {
        session.set_cmd_error('Unknown Cisco Nexus shell "' + cmd_shell + '".');
        return NULL;
      }

      if (!res)
      {
        session.set_cmd_error('Unable to obtain shell "' + cmd_shell +
          '" specified to run command.');
        return NULL;
      }

      if (cmd_shell == NXOS_MODE)
      {
        dbg::detailed_log(lvl:3, src:fn,
          msg:'Suppressing pagination for Cisco Nexus shell "' + this.current_shell + '"');
        command = "_NO_PAGER=yes;" + command;
      }

      dbg::detailed_log(lvl:1, src:fn, msg:'Running command "' + command +'" using Cisco Nexus shell "' + this.current_shell + '"');

      var ret = super.run_command(
        channel                : channel,
        command                : command,
        cmd_timeout_min        : cmd_timeout_min,
        inactivity_timeout_min : inactivity_timeout_min);

      # set last shell after successful command run
      if (!isnull(ret))
      {
        this.last_shell_used = cmd_shell;
      }

      return ret;
    }

    ##
    # Revert to default shell
    #
    # @param channel channel for ssh session
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    public function revert(&channel)
    {
      var fn = objname + FUNCTION_NAME;
      var session = channel.session;
      var res = TRUE;

      if (this.current_shell == this.default_shell)
        return TRUE;

      dbg::detailed_log(lvl:2, src:fn,
        msg:'Reverting current shell "'+this.current_shell+'" to default shell "'+this.default_shell + '".');

      if (this.default_shell == NXOS_MODE)
        res = this.get_sh_nxos_mode(channel:channel);
      else if(this.default_shell == OBJECT_MODE)
        res = this.get_sh_object_mode(channel:channel);

      if (!res)
      {
        session.set_cmd_error('Failed to revert to default Cisco Nexus shell.');
        return FALSE;
      }

      return TRUE;
    }


    ##
    # Close the shell by sending an 'exit'
    #
    # @param channel channel for ssh session
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    public function close(&channel)
    {
      var fn = objname + FUNCTION_NAME;
      var session = channel.session;

      dbg::detailed_log(lvl:3, src:fn, msg:'Closing Cisco Nexus shell.');

      # Revert to default shell if necessary
      if (this.current_shell != this.default_shell)
      {
        this.revert(channel:channel);
      }

      super.run_command(
        channel                : channel,
        command                : 'exit');

      return TRUE;
    }
  }
}
