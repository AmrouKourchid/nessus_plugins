#TRUSTED 16d4f3bc35edecf82ae637e1f6429948e87d3bf5474a434abe0d23c8c70bd445dae0de31b11646016425734039fb2af909648793bb4e07d80279a30620658f58dcdacf8540cba3d547fa491896be96a1dda25c77d6a6ca966e558f7695b279f7743c782d5f2053ba1d92b77eb6e3cb2d047a404d599cc9db801dab2228515cc90d1149f37e2a10b7603c319e87f02f03be6343403291a9808077a5c6a44cc2ab60e5527ef110898237526614bab16bb599b9d5bb94b9b0b100eae8e3531a735b9b4314d7fa9a1e0a1de25ebcb4e2d69cf7118338cdeb6c1f151f51e3e4f3086af14fb1bd28e25c123b795f65b0f787103bfd6d6a6e5ff823b05a39e4921b470855638fbb7b91bb824619e9f063e28352ad4c26a3cf5b181b0f6e120bd450c6733eacc802a82eb387a9891fc821468a451641d8db5a2d5f8e1064fc410a7e4384db224c3abf3e3f2df5683624e53929376b54b44bbe58ca3118b29bcc5d9e297fa6a958c6297fa565e7cb1f118a13b37ede316bc2a32a0c97fda8251c5419a2dd5acfd540260170e47a725bf37833e71bf850e91bd1bc06307bd61293f8c32f9b5e0f25022556fc61764987ae1783177b3d1ec557da82d862ead5050743aa8695707f56b2536a07015ecfd15b0999733166421431821a335d570442232a00a52aff68a7d3fead7e0a218116aee113feed652e6c7f6bf95320c63468ae4e37aaf5
#TRUST-RSA-SHA256 6cf8b4b6c1fb87ac6cc5cbc4d8fdf3d6b2f9ad9a4659de5d43c2470720ca709dbd53144f00417d6edeaa1578199e8ace057285037e1fa1be3684b6a8f1f4803df0c02ce7a6da768c22d41d9adc685c7a2953c565c576ab98fb7a5516868e0110ad965e45ca9b0802c6b753ac11fb36116b6bf5a529a032efc236e00c81a6d87973a0e1a19619427b8d75f96db4c0b388c996cc6b74191c40033ce22299608688c4b218e203b26c63c60bec4cf0501a60d51d6ced5a18ed994aef5a1540bdbdfb282dd7228b6323d25f03eec4abedf0930545961c12eb53bc3f013631c62f6f3d80b22d51690ca7cc19d4132d766fc9c9ced4b16cf03839ab99d99934d59d410a3e5cbbf13d43043b4576e49ff63fe99594363175d7cd0b6877e63c8484de9d7d3cf3f40134106393c4349413d932ffae6aa9ce31df04d2f37c76c6c910ed5d6bf85b0c5ab00691d1727038839203c298d17893c2bdd1057b7633ecf864bb766116136200d89d451960fa2e04aae4c566dd1b28c758a73b1b040446d7e6cd8ff17ea3940a28ec0b8032dad48ebb5614ea81a92a4b12fd2ffb6867a6d8d2d0c20845e7e3d0c321f39bc478dda9b706b4d51eefd475808dc04e329463fe62615fa787f79268b91378280a86e20cbd9742ead97395bd80c46f47d92c6ae59e445f1e5b90f5bdc6ea15552c8600ad14d437b38812c44e1fb7b01d0ee61b0eda0c3771

###
#
# Global symbols for the Nessus QUIC library.
#
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security, Inc.
#
# @NOGPL@
#
# Revision: 1.1
#
###

namespace quic
{
  # Frame type codes
  var PADDING_FRAME = 0;
  var PING_FRAME = 1;
  var ACK_FRAME = 2;
  var ACK_CONGESTION_FRAME = 3;
  var RESET_STREAM_FRAME = 4;
  var STOP_SENDING_FRAME = 5;
  var CRYPTO_FRAME = 6;
  var NEW_TOKEN_FRAME = 7;
  var STREAM_FRAME = 8;
  var STREAM_FIN_FRAME = 9;
  var STREAM_LEN_FRAME = 10;
  var STREAM_LEN_FIN_FRAME = 11;
  var STREAM_OFF_FRAME = 12;
  var STREAM_OFF_FIN_FRAME = 13;
  var STREAM_OFF_LEN_FRAME = 14;
  var STREAM_OFF_LEN_FIN_FRAME = 15;
  var MAX_DATA_FRAME = 16;
  var MAX_STREAM_DATA_FRAME = 17;
  var MAX_STREAMS_BI_FRAME = 18;
  var MAX_STREAMS_UNI_FRAME = 19;
  var DATA_BLOCKED_FRAME = 20;
  var STREAM_DATA_BLOCKED_FRAME = 21;
  var STREAMS_BLOCKED_BI_FRAME = 22;
  var STREAMS_BLOCKED_UNI_FRAME = 23;
  var NEW_CONNECTION_ID_FRAME = 24;
  var RETIRE_CONNECTION_ID_FRAME = 25;
  var PATH_CHALLENGE_FRAME = 26;
  var PATH_RESPONSE_FRAME = 27;
  var CONNECTION_CLOSE_PROTO_FRAME = 28;
  var CONNECTION_CLOSE_APP_FRAME = 29;
  var HANDSHAKE_DONE_FRAME = 30;

  # QUIC error codes
  var STATELESS_RESET = -1;
  var SUCCESS = 0;
  var INTERNAL_ERROR = 1;
  var CONNECTION_REFUSED = 2;
  var FLOW_CONTROL_ERROR = 3;
  var STREAM_LIMIT_ERROR = 4;
  var STREAM_STATE_ERROR = 5;
  var FINAL_SIZE_ERROR = 6;
  var FRAME_ENCODING_ERROR = 7;
  var TRANSPORT_PARAMETER_ERROR = 8;
  var CONNECTION_ID_LIMIT_ERROR = 9;
  var PROTOCOL_VIOLATION = 10;
  var INVALID_TOKEN = 11;
  var APPLICATION_ERROR = 12;
  var CRYPTO_BUFFER_EXCEEDED = 13;
  var KEY_UPDATE_ERROR = 14;
  var AEAD_LIMIT_REACHED = 15;
  var NO_VIABLE_PATH = 16;
  # QUIC crypto errors range from 256-511, the lower eight bits correspond
  # to the space of TLS 1.3 alert codes (RFC-8446 section 6).
  var CRYPTO_ERROR = 256;

  # salt for initial keys is hard-coded in the RFC
  var INITIAL_SALT = hex2raw(s:'38762cf7f55934b34d179ae6a4c80cadccbb7f0a');

  var AEAD_AES_128_GCM_SHA256 = "TLS13_AES_128_GCM_SHA256";
  var AEAD_AES_256_GCM_SHA384 = "TLS13_AES_256_GCM_SHA384";

  var TLS_CHACHA20_POLY1305_SHA256 = "TLS13_CHACHA20_POLY1305_SHA256";
  var TLS_AES_128_CCM_SHA25 = "TLS13_AES_128_CCM_SHA256";


  # long header form packet types
  var VERSION_NEGO_PACKET = -1;
  var INITIAL_PACKET = 0;
  var ZERO_RTT_PACKET = 1;
  var HANDSHAKE_PACKET = 2;
  var RETRY_PACKET = 3;

  # short header form packet type
  var ONE_RTT_PACKET = -2;

  # indices into secrets array
  var CLIENT_KEY = 0;
  var CLIENT_IV = 1;
  var CLIENT_HPKEY = 2;
  var SERVER_KEY = 3;
  var SERVER_IV = 4;
  var SERVER_HPKEY = 5;

  # transport parameters
  var ORIG_DCID_TP = 0;             # only sent by servers
  var MAX_IDLE_TIMEOUT_TP = 1;
  var STATELESS_RESET_TOKEN_TP = 2; # only sent by servers
  var MAX_UDP_PAYLOAD_TP = 3;
  var INITIAL_MAX_DATA_TP = 4;
  var INITIAL_LOCAL_BIDI_MAX_TP = 5;
  var INITIAL_REMOTE_BIDI_MAX_TP = 6;
  var INITIAL_UNI_MAX_TP = 7;
  var INITIAL_MAX_BIDI_STREAMS_TP = 8;
  var INITIAL_MAX_UNI_STREAMS_TP = 9;
  var ACK_DELAY_EXP_TP = 10;
  var MAX_ACK_DELAY_TP = 11;
  var DISABLE_ACTIVE_MIGRATION_TP = 12;
  var PREFERRED_ADDRESS_TP = 13;    # only sent by servers
  var CONNECTION_ID_LIMIT_TP = 14;
  var INITIAL_SCID_TP = 15;
  var RETRY_SCID_TP = 16;

  # packet direction
  var FROM_CLIENT = 0;
  var FROM_SERVER = 1;

  # packet space indices
  var CRYPTO_LEVEL_INITIAL = 0;
  var CRYPTO_LEVEL_HANDSHAKE = 1;
  var CRYPTO_LEVEL_APPLICATION = 2;

  # stream constants
  var BLOCK_START_OFFSET = 0;
  var BLOCK_END_OFFSET = 1;

  # stream states
  var STREAM_READY = 0;
  var STREAM_SIZE_KNOWN = 1;
  var STREAM_CLOSED = 2;
}

