#%NASL_MIN_LEVEL 80900
##
# (C) Tenable, Inc.
##

include('compat.inc');

if (description)
{
  script_id(213084);
  script_version("1.4");
  script_set_attribute(attribute:"plugin_modification_date", value:"2025/02/20");

  script_cve_id("CVE-2024-9880");

  script_name(english:"Pandas DataFrame.query Code Injection (Unpatched)");

  script_set_attribute(attribute:"synopsis", value:
"The Pandas library installed on the remote host is affected by a code injection vulnerability.");
  script_set_attribute(attribute:"description", value:
"The version of the Pandas library installed on the remote host has an unpatched exposure. It is, therefore,
affected by a code injection vulnerability in the pandas.DataFrame.query function.  The function is 
intended to allow querying the columns of a DataFrame using a boolean expression. A malicious attacker
can constructs a malicious query to bypass input validation mechanisms and trigger a code injection vulnerability
which can lead to command execution if the code passes untrusted input into self.eval().

Note that Nessus has not tested for this issue but has instead relied only on the application's self-reported version
number.");
  script_set_attribute(attribute:"see_also", value:"https://huntr.com/bounties/a49baae1-4652-4d6c-a179-313c21c41a8d");
  # https://github.com/pandas-dev/pandas/blob/v2.2.3/pandas/core/frame.py#L4823
  script_set_attribute(attribute:"see_also", value:"http://www.nessus.org/u?dbbeef33");
  # https://github.com/pandas-dev/pandas/blob/main/pandas/core/frame.py#L4612
  script_set_attribute(attribute:"see_also", value:"http://www.nessus.org/u?f363005e");
  script_set_attribute(attribute:"solution", value:
"This vulnerability is currently not fixed. Fix the code manually or monitor new releases for a fix.");
  script_set_attribute(attribute:"agent", value:"all");
  script_set_cvss_base_vector("CVSS2#AV:L/AC:L/Au:N/C:C/I:C/A:C");
  script_set_cvss_temporal_vector("CVSS2#E:U/RL:OF/RC:C");
  script_set_cvss3_base_vector("CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H");
  script_set_cvss3_temporal_vector("CVSS:3.0/E:U/RL:O/RC:C");
  script_set_attribute(attribute:"cvss_score_source", value:"CVE-2024-9880");

  script_set_attribute(attribute:"exploitability_ease", value:"Exploits are available");
  script_set_attribute(attribute:"exploit_available", value:"true");
  script_set_attribute(attribute:"vendor_unpatched", value:"true");

  script_set_attribute(attribute:"vuln_publication_date", value:"2024/12/03");
  script_set_attribute(attribute:"plugin_publication_date", value:"2024/12/17");

  script_set_attribute(attribute:"plugin_type", value:"local");
  script_set_attribute(attribute:"cpe", value:"cpe:/a:pandas-dev:pandas");
  script_set_attribute(attribute:"thorough_tests", value:"true");
  script_end_attributes();

  script_category(ACT_GATHER_INFO);
  script_family(english:"Artificial Intelligence");

  script_copyright(english:"This script is Copyright (C) 2024-2025 and is owned by Tenable, Inc. or an Affiliate thereof.");

  script_dependencies("python_packages_installed_nix.nbin", "python_packages_win_installed.nbin");
  script_require_ports("Host/nix/Python/Packages/Enumerated", "Host/win/Python/Packages/Enumerated");

  exit(0);
}

##
# For debugging, uncomment the following line:
# set_kb_item(name:"global_settings/enable_plugin_debugging", value:TRUE);
##

include('python.inc');

var installs = [];

var os_pkg, os, pkg = 'pandas';
var python_app_info, lib, libs = [];
if (!empty_or_null(get_kb_item("Host/win/Python/Packages/Enumerated")) || !empty_or_null(get_kb_item("Host/nix/Python/Packages/Enumerated")))
{
  if ('windows' >< tolower(get_kb_item_or_exit('Host/OS')))
    os = 'win';
  else
  {
    os = 'nix';
  }
  libs = python::query_python_package(os:os, pkg_name:pkg);
  if (!empty_or_null(libs))
  {
    foreach (lib in libs)
    {
      python_app_info = {
        'app' : pkg,
        'version' : lib.version,
        'display_version' : lib.version,
        'path' : lib.path
      };
      append_element(var:installs, value:python_app_info);
    }
  }
}

if (empty_or_null(installs))
  audit(AUDIT_HOST_NOT, 'affected');

var app_info = branch(installs);

var report = 'These vulnerabilities remain unfixed and exist in the following locations:\n';

report += '\t Path: ' + app_info.path;
report += '\n\t Version: ' + app_info.version;
security_report_v4(port:0, severity:SECURITY_HOLE, extra:report);
