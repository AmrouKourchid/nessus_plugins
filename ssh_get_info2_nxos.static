#TRUSTED 13755fa18420e3b00b86b0238c8eb64a110b56afcd929d90424a6b831c5feff7b96af19bf6932ab53bf37d572ada5eb4cf46dc91b2f7e08b792c1ac15c3ee7498b5e01cdf4b1cce053194750cf3d3c7600bc44a7422fde6cc382c09aea8669da8cef7261f06286137535faeb2cde32ecdc547469a8ecba922ba0d5303a968d55414b5ce3612ef81ca4707d81ed5cc73ff06e8dcca70c7cf8606fdd9e02d3d894835f33f41fe4dc26e6168f153cb53993e9c603a0040bd6ccdaeb6031931a47f456059745cf2aab74dc4679bfc1c5b97fcd00fb497a7670753d322f23f4a201ef85a1c41661982734593defd4fdad64af966b86a0e3431c6ee1d7016071b7a987bd55fd5aeb0cbed3e65f63e82c51c35ea9c0b13596b9f86db6abf6eb1da66dc22c7cbcbdcd71acc61289dd1b96c4a2cdea9df6a4848f83d901a333b0982209e698867e756a7620afa1e79896f69a754ac1aeea359e5a6dbf7ec9e6f80c758595d060a93cee9e96f586f087c523c485bf159f1571a16da14e121f790674651d2030a67c753fd18a773809efdf103a2dd24de89ef6dcfe359e07855c8caf8960f8062d6ab90952afffa96f12fd652a029f8f58b690b725c75f1ff98fac4bc3d07abf70a444b095b84f64941865db42f3efca8668377c02b6b63ca77f18f5c6ce9d15f314335ab73c8ca525ce5507c308e990ef7c987fce2f44e8b8a687a2a30dd8
#TRUST-RSA-SHA256 9351415e46c676285920481d8d7240f05a4f5040966caef98d19e8e709e782ea350d35b759b9e8947d6b32f5087a42c15c4f6fb3a1500f43e8c07162343d3d65335ee134dc9cb544eca5ad07e101657d07d91b38c47e472df2e2adcccae862a1a75c7702cdede0004b5b26e71603bfaa5d2fb70550e7e767f1f558fea2cb04439d70a2854e5a67c2e9db7d9cfd055f05ceeaf2668ad80e0deb08ad419042d685cf7d9d1059994fc7f2c38571621b1bd1d53c99c50b321735aeac5ee1a16301a4b1fbfe739f93709bf4423409bee926936313ef28917604b86e808f82f8fcd110a82a9e938d1233dd4f6b2d251f4c5344fe5ee8a03895a2e604c8954ef5691f599a3e519e21e2987e8aafad9f368641cde90247033cc200059d8a6a5d7dafd7f8e4fcbdb27ee0bb9c7fceb7b5fa018bd278744571251f8a8712c10d46d420063c62859db4ef8f1998aef2afba3e2db80d04aa3ede72d158e27057a35131ec05e381054072dd650fef4f21dea423b658359a3d6aef7b95a7cd86f8cfd216a14fd21628208b4fd49de89b8d6a6b64cc5608d7eb1005288220fd4f73be8aa67dea67e519842cbfa359eb80248a58ede4f4e0b6a4f64ce8e2b207874730c07f3c10f6b358276fca66b5bdc8e6ec6228fbec3c93d4abb067354f56a50bbfa01618c237931490656ae246c5ce0a1b7487c35f6dc8514f6d444f8946cc57121e73f8a5e6
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.31


#
# Check host information for triggers that the device is most likely supported
# by this file.
#
function is_cisco_nxos()
{
  if(host_info_key_val['remote_ssh_userauth_banner'] =~ "Nexus \d+v? [Ss]witch")
  {
    dbg::log(src:'is_cisco_nxos()', msg:'SSH userauth banner matches ' +
      '"Nexus \\d+v? [Ss]witch".');
    return TRUE;
  }

  return FALSE;
}

function nxos_pre_check_fail()
{
  # have we already checked that the host is not ios?
  if(host_info_key_val['host_not_nxos'])
  {
    # already checked that host is not ios, no need to check again
    return TRUE;
  }
  if(!empty_or_null(host_info_key_val['showversion_unrecognized']) &&
     host_info_key_val['showversion_unrecognized'] !~ "Cisco Nexus")
    return TRUE;

  # Not NXOS if one of the following devices
  if (is_cisco_firepower() ||
      is_cisco_ssh() ||
      is_timos_userauth() ||
      is_cisco_ucos() ||
      is_huawei() ||
      is_panos() ||
      is_acos() ||
      is_adtran() ||
      is_asyncos() ||
      is_staros() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

function handle_nxos(session, use_shell_handler, &channel, cmd_res)
{
  local_var ver,
            os_name,
            ciscomac,
            cmd_output,
            matches,
            mlist,
            commands,
            compliance,
            cmd_no_spaces,
            macs,
            cmd,
            line,
            priv;

  local_var testing = _FCT_ANON_ARGS[0];

  report += '\n' + 'Local checks have been enabled for Cisco NX-OS.\n';

  ver = pregmatch(
          string:cmd_res,
          pattern:"(?:NXOS|system):\s+version\s+([0-9a-zA-Z\.\(\)]+)[^\s\r\n]*");

  if (!isnull(ver) && !isnull(ver[1]))
    os_name = "Cisco NX-OS Version " + ver[1];
  else
    os_name = "Cisco NX-OS";


  # Get MAC address
  ciscomac = "([a-f0-9A-F]{4}\.[a-f0-9A-F]{4}\.[a-f0-9A-F]{4})";
  cmd_output = run_command(
                cmd:"show interface",
                session:session,
                use_shell_handler:use_shell_handler,
                channel:channel);

  cmd_output = split(cmd_output, sep:'\n', keep:FALSE);
  macs = {};

  foreach line (cmd_output)
  {
    matches = pregmatch(
                string:line,
                pattern:"^[ \t]*Hardware.*address: "+ciscomac);

    if(!isnull(matches) && !isnull(matches[1]))
      macs[matches[1]] = TRUE;
  }

  foreach line (keys(macs))
    mlist += line+',';
  mlist = ereg_replace(string:mlist, pattern:',$', replace:'');
  if(!isnull(mlist))
    replace_kb_item(name:"Host/raw_macs", value:mlist);


  set_kb_item(name:"Host/OS/showver", value:os_name);
  set_kb_item(name:"Host/OS/showver/Confidence", value:100);
  set_kb_item(name:"Host/OS/showver/Type", value:"switch");

  if(!testing)
  {
    compliance = get_preference(
                "Cisco IOS Compliance Checks[file]:Policy file #1 :");
  }
  else
    compliance = "this is a test string";

  if (strlen(compliance) > 0)
  {
    commands = make_list(
       'show startup-config',
       'show running-config'
    );

   foreach cmd (commands)
   {
     cmd_no_spaces = str_replace(find:" ", replace:"_", string:cmd);

     cmd_output = run_command(
                    cmd:cmd,
                    session:session,
                    use_shell_handler:use_shell_handler,
                    channel:channel);

     if (isnull(cmd_output))
     {
       set_kb_item(
           name:"Host/Cisco/"+cmd_no_spaces+"/errmsg",
           value:"The command failed to produce any output.");
     }
     else
     {
       if (channel.shell_handler.last_cmd_error)
       {
           set_kb_item(
               name:"Host/Cisco/"+cmd_no_spaces+"/errmsg",
               value:cmd_output);
       }
       else
       {
         set_kb_item(
             name:"Host/Cisco/"+cmd_no_spaces,
             value:cmd_output);
       }
     }
   }
  }

  set_kb_item(name:"Host/Cisco/show_ver", value:cmd_res);
  set_kb_item(name:"Host/Cisco/NX-OS", value:TRUE);
  set_kb_item(name:'Host/Cisco/device_type', value:'switch');

  var max_privs = 0;

  cmd_output = run_command(
                cmd:'show privilege',
                session:session,
                use_shell_handler:use_shell_handler,
                channel:channel,
                force_priv_escl:TRUE);
  if(cmd_output && "Current privilege level is" >< cmd_output)
  {
    priv = pregmatch(pattern:'Current privilege level is ([0-9]*)', string:cmd_output);
    if(priv && priv[1])
    {
      priv = int(priv[1]);

      if(priv == 15)
        max_privs = 1;

      set_kb_item(name:'Host/Cisco/show_privilege', value:priv);
    }
  }

  if(!isnull(session))
    replace_kb_item(name:"Host/Auth/SSH/" + session.get_port() + "/MaxPrivs", value:max_privs);

  cmd_output = run_command(
                cmd:'show running-config',
                session:session,
                use_shell_handler:use_shell_handler,
                channel:channel,
                force_priv_escl:TRUE);
  if(cmd_output)
    set_kb_item(name:"Secret/Host/Cisco/Config/show_running-config", value:cmd_output);
  cmd_output = run_command(
                cmd:'show running-config all',
                session:session,
                use_shell_handler:use_shell_handler,
                channel:channel,
                force_priv_escl:TRUE);
  if(cmd_output)
    set_kb_item(name:"Secret/Host/Cisco/Config/show_running-config_all", value:cmd_output);

  cmd_output = run_command(
                cmd:'show install active',
                session:session,
                use_shell_handler:use_shell_handler,
                channel:channel,
                force_priv_escl:TRUE);
  if(cmd_output)
    set_kb_item(name:"Secret/Host/Cisco/Config/show_install_active", value:cmd_output);

  cmd_output = run_command(
                cmd:'show inventory',
                session:session,
                use_shell_handler:use_shell_handler,
                channel:channel,
                force_priv_escl:TRUE);
  if(cmd_output)
    set_kb_item(name:"Host/Cisco/Config/show_inventory", value:cmd_output);

  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_nxos.static', value: 240);
  report += '\nOS Security Patch Assessment is available for Cisco NX-OS.';
}

function handle_nxos_alt(session, use_shell_handler, &channel, cmd_res)
{
  local_var cmd_output;

  cmd_output = run_command(
                cmd:"show version",
                session:session,
                use_shell_handler:use_shell_handler,
                channel:channel);
  if("Cisco Nexus Operating System (NX-OS) Software" >!< cmd_output)
    cmd_res = cmd_res + '\n' + cmd_output;

  handle_nxos_alt(session:session, use_shell_handler:use_shell_handler, channel:channel, cmd_res:cmd_res);
}

function handle_not_nxos(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  host_info_key_val['host_not_nxos'] = TRUE;
  if(!empty_or_null(cmd_res))
  {
    if (empty_or_null(host_info_key_val['showversion_reported']) && cmd_res !~ "^%%")
    {
      host_info_key_val['showversion_reported'] = TRUE;
    }

    replace_kb_item(name:"Host/showversion", value:cmd_res);

    host_info_key_val['showversion_unrecognized'] = cmd_res;
  }
}



function handle_not_nxos_alt(session, use_shell_handler, &channel, cmd_res)
{
  # This shouldn't do anything, it might still be nxos, it needs to perform the other check
  return TRUE;
}
