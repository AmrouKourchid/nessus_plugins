#TRUSTED 528817b5af6d9f30758ed401395753fa6a5ad7cf43e93f9ffbc2df3425f9c318ec3e42cb29077dc862b90527bc235369c0be60f2b28c10927529f197eb77c5e9161a3416ed245a0060ef1ea9ef7195065bac7a232cb174927f95ed7b6121a63ab3784c94e51d41acd454ae29c9e4bf269aec98beb8494e10c2c1e5fa870023fb3538d5ed45ab4c8980e1b79f189ef69b941554bc1fec152725044175257998a194dfb4390e71012290e2c6c25d4c8c4fc4ca4b72f6a1fafeef1945f51ff0ef9dd91d2331bf6858e7aeed93c0ca0e20a4c3f34ac7d4c66186be062f24786de21e128d1411dc09f7f9b10d2b7022ee7eeec8f4423a4a7e35d515398eeb7c6a44fbdb39574dea62b6714fedd7f788fb76742ba3e59f98937daa41257eeb935ada4e9b441e02d5a33642e6dd7fd0e4a1d45fd339f5a6dc79a78befb158243733c25c6a711fe2e89c63086032e84b4ed0229bc061c606bde46461598f3462160f04826d275f1d6721058e7cc23d582a76f48c6bfe25866d2f29ec6697bbb1658a40460de8473c447d71de17adba8b536200c3c5714a6ae58caf926d3d28cdebe9998af2813c840017fe1155c0be63a50bb041e292546078e5f6b2ff7a461b9210198f0d88552a376492c253f7ef9382f07bb3e64c670b53ce428f7c39972e08528716f69f27050892f6d264b8e3f5ccfc9c4183c8ee83ac31e3ae06e8e393f2ecb246
#TRUST-RSA-SHA256 a6405bf2e306c13553b648b19dc237d90096d30d668af8ade229419ee6b106355328beb05ed95d3a77f3c5badf30ad8bf8d338b05560e0419394dc5e2e25a4cafd6bf1e66c775226f57978346da6d029c9582eb3314db1f3ad794335d8e79a8f7e3a847bd0e7cc2bebb0c75d504fbc29d0b66e2164e93073329f10e983bcc50349d2da2fe82e33d21ce27b60021939935027e5b0d5afaf5ba7aa1e5dce4bcea54d4268eca61d7d3481c9eaf400868b86058686e30894128da7f16a078ea34cf3928298f422d66bfe1a8b2ecae9fce35cac519629280694d3e32fb6ce0c55b0243f57d26359f125f43f6f39365f399fd7f265cbd82b69e46e5f91bd2754932efb6177758ca26762221f97dac1635d884e4e4b1634946a88138580125a94999b7d74a0c6831b32f638b17a795ee6789203a7b8c9a29661bf74e76ec5185c6b6b4921a12ee3e1048bbd7d4e3d4374fb1f3ac5cdb2872f6194f8bce51766eee44253b375949f969dd0e6f29e2678d30be4f766dc91681cab0b7d96269e74950d11d93a7c05ece36ee36867f9164639cb96232114be4c6bab5c7bb829d99401bc634ff673d4355c8a2d33253173dffaf714b15678d6751af30b3df3da2a77415b7ad533c544232b481e19ce03ce60b1c44140cecf8e1b0818500bbaccf854e681c2de23256e9449ff5d3e3d5d6902d23defabfcc1179fd918ae6c5fe0f3e1cbdca186

# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.11

#
# cisco_csp_pre_check_fail
# check if this is a cisco_csp device based on information collected
#
function cisco_csp_pre_check_fail()
{
  # have we already checked that the host is not cisco_csp?
  if(host_info_key_val['host_not_cisco_csp'])
    return TRUE;

  if(!empty_or_null(host_info_key_val['showversion_unrecognized']) &&
     host_info_key_val['showversion_unrecognized'] !~ cisco_csp_check['test_cmd_regex'])
    return TRUE;

  # Not Cisco Cloud Services if one of the following devices
  if (is_cisco_firepower() ||
      is_cisco_ssh() ||
      is_cisco_nxos() ||
      is_timos_userauth() ||
      is_cisco_ucos() ||
      is_huawei() ||
      is_panos() ||
      is_acos() ||
      is_adtran() ||
      is_asyncos() ||
      is_staros() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

#
# callback for systems with "Cisco Cloud Services Platform Software," in show version
#
function handle_cisco_csp(session, use_shell_handler, &channel, cmd_res)
{
  var cisco_csp_version_match, version, model, build;

  #Local checks just means we can run commands on the target host.
  report += '\nLocal checks have been enabled for this host.';

  replace_kb_item(name:"Host/showversion", value:cmd_res);
  replace_kb_item(name:"Host/OS", value: "Cisco Cloud Services Platform");
  replace_kb_item(name:"Host/Cisco/CloudServicesPlatform", value:TRUE);
  replace_kb_item(name:"Host/Cisco/CloudServicesPlatform/show_ver", value:cmd_res);

  cisco_csp_version_match = pregmatch(pattern:"Cisco Cloud Services Platform Software, [0-9]+ Software \(CSP-([0-9]+)\), Version ([0-9.]+) Build:([0-9]+)", string:cmd_res, icase:TRUE);

  if(!isnull(cisco_csp_version_match))
  {
    if(!isnull(cisco_csp_version_match[1]))
      model = cisco_csp_version_match[1];
    else
      model = "UNKNOWN";

    if(!isnull(cisco_csp_version_match[2]))
      version = cisco_csp_version_match[2];
    else
      version= "UNKNOWN";

    if(!isnull(cisco_csp_version_match[3]))
      build = cisco_csp_version_match[3];
    else
      build = "UNKNOWN";

    report += '\nThe remote Cisco Cloud Services Platform system is:\n' +
              "   Model " + model+ '\n' +
              "   Version " + version + " Build " + build + '\n';

    replace_kb_item(name:"Host/Cisco/CloudServicesPlatform/version", value:version);
    replace_kb_item(name:"Host/Cisco/CloudServicesPlatform/build", value:build);
    replace_kb_item(name:"Host/Cisco/CloudServicesPlatform/model", value:model);
  }

  if(isnull(cisco_csp_version_match) || model == 'UNKNOWN' || version == 'UNKNOWN')
  {
    var failure_kb_msg = 'The remote host appears to be running Cisco Cloud Services Platform.\n' +
                         'However, we were unable to parse the OS version or Model from the\n' +
                         'output of running the "show version" command.';

    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_UNAVAILABLE);
    return TRUE;
  }

  report += '\nOS Security Patch Assessment is available for Cisco Cloud Services Platform.\n';
  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_cisco_csp.static', value: 108);

  replace_kb_item(name:"Host/OS/showver", value:"Cisco Cloud Services Platform " + version + " Build " + build);
  replace_kb_item(name:"Host/OS/showver/Confidence", value:100);
  replace_kb_item(name:"Host/OS/showver/Type", value:"embedded");

}

#
# callback for systems without "cisco_csp..." in show version
#
function handle_not_cisco_csp(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/showversion", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['showversion_unrecognized'] = cmd_res;
    host_info_key_val['host_not_cisco_csp'] = TRUE;
  }
}
