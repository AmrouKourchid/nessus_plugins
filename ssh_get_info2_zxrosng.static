#TRUSTED 9a20470d79d5e1aa260bb6d1a74d45cee2984bee23c466ff97595f04ddb334c46f95510035e53b9720c48a46f0a343767ad61df5bf83fdb74648f61721a0afde268844cda5a23324be7416d8b0413aa0caf1a55dd5b453402c50625dc3207613813f581d5dc6ba15a69790e2567c9ebda14a03374a61bee337c2351b9ef29fdc7b5735fd3e82eedd61c1a18029c4ae32b71d957498008cf03dc20439c58e516d3a3838d4f4b105453965521b7efca2f027efe193927d6424b0ee0335e9c6244ffe31dd16930b31031bd54fd216ae7cc043678f4aaf3168eaf6d8ea627c7fb0d4ce5daf9ce0b42de0d500b94b32d807cbf5933e2bf3f81d84ae8a7c3b72644fbd97276dd20e51bb2621041f39902dec179876d17788a119a14d2f9e4e574b70acb9059bb6f5f7b906c2d9575b9e273919a3548a5bf5c299369d966f71712fc1359ecf312b32ee944c8e1e763e330bb2bb1ab917455a5eddd6f8e03adea51e99642a5ba5154bd2d8a6e75c0b8cd1362a3f399e96da0053769d8d792adbb897989b8649ef37bb55513ecbad016fbc4d3335a298108086b24a057f851d657da7a28a57a1117da8c4240295dc5bae5e58324df6cab6b617d9ca930465f8d43c4732311952e4bfcbe2d33be1c71bedf187c2ec6afd27ccf916f75431d6ea2de84675ee0875d0bc2e203060cba896476dfbfca212d574c4d63e3628d1304773024ee587
#TRUST-RSA-SHA256 7ae19520ae19b594eb6894116738ea48ae4fc458651289fd5460636ed1e51a1a0100ac9a4ffe75302f7037260237107bd5fba912e1d8dc2deaf42a5f09447f862654105d7da1c0ae55a8d6f8235dd9bbc8b0db6840e758cb8daa04b8197d08c9c9f9a61775754ceaa1812d696842cf93ac0586973faad2fc62eefc1aa21e0955fdcfbe3078684123a0f0e64bad630dce6b5ab846352ded393fc2fb9efd6a258124cfe7e3f1fc3eec8fd2a155cf502d8439ecdc82cd956cac57e1929a6b9034d6037fa7e4634d4ad115309103bfa52db0248a34ef52bb9a89b6c0269ad2e5add5a3d4858cd54102eae6975b021dbc764ee24e2d961dd58432a71eb6cd00ee4b46d1e7a7ba3e21fa41c793a658591ea5b6a059d2651405c6f242195e8358aece3ef420410f14ae6002e33e75183b97f4f1bfbca1f007ed09550f112cc623cbfb4fe6c9ed8e3094489aeec174166504f8db8c2cbae0758f30bfc20d500f44aa6fc9a75bd96b006c2d7d93bb620dbd44faf21304789c3003b99febd8c8fa7c7d26572b854b3fea89bcad1af5002ae28ed8cf5bae2be5536baf36ebbc1d6ae22133e8d1bbb11daf81fbf68333fc87883642a058bf6cef4efba2573f0beaff563cda85acb1db5525044ab10a794616120cf0cc8fb72843b58359ec426c382e6ba5d287142abc1ac18f3376c9d9f5c6d0906e1f5fdbf317f8c9353f1af37aa9bebe2e2b


# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.12

#
# zxrosng_pre_check_fail
# check if this is a ZXROSNG device based on information collected
#
function zxrosng_pre_check_fail()
{
  # have we already checked that the host is not zxrosng?
  if(host_info_key_val['host_not_zxrosng'])
  {
    # already checked that host is not zxrosng, no need to check again
    return TRUE;
  }
  if(host_info_key_val['showzxrpinfo_unrecognized'] &&
     host_info_key_val['showzxrpinfo_unrecognized'] !~ zxrosng_check['test_cmd_regex'])
    return TRUE;

  # Not ZXROSNG if one of the following devices
  if (is_panos() ||
      is_huawei() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

#
# callback for systems with "ZTE Router Platform Software:" in show zxrp-info
#
function handle_zxrosng(session, use_shell_handler, &channel, cmd_res)
{
  var cmd_no_spaces, cmd_set, cmd, commands, cmd_output, secret_prefix;
  var cmd_prompt, os, i, priv, os_level, os_pattern, err_kbs;
  var zte_kb_prefix = 'Host/ZTE/ZXROSNG/';
  replace_kb_item(name:zte_kb_prefix + 'show_zxrp_info', value:cmd_res);
  os_pattern = "ZTE Router Platform Software:\s*ZXROSNGV(\d+(?:\.\d+)+(?:\(\d+(?:\.\d+)*\))?(?:\[\d+(?:\.\d+)*\])?)";
  os_level = pregmatch(string:cmd_res, pattern:os_pattern);
  if(!empty_or_null(os_level) && !empty_or_null(os_level[1]))
  {
    os_level = os_level[1];
    set_kb_item(name:zte_kb_prefix + 'os_level', value:os_level);

  }
  else
  {
    failure_kb_msg =
      'The remote operating system appears to be a type of ZTE ZXROSNG\n' +
      'software, however it was not possible to determine the specific OS.';
    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    return NULL;
  }
  report += '\nCommand execution for ZXROSNG device successful.';

  commands = [
    {'cmd': 'show system-info', 'secret': FALSE},
    {'cmd': 'show running-config', 'secret': TRUE},
    {'cmd': 'show privilege', 'secret': FALSE}
  ];
  # show running-config all takes way too long, skip until needed.

  foreach cmd_set (commands)
  {
    cmd = NULL;
    secret_prefix = '';
    if (!empty_or_null(cmd_set['cmd']))
    {
      cmd = cmd_set['cmd'];
    }
    else
    {
      continue;
    }
    if (!empty_or_null(cmd_set['secret']) && cmd_set['secret'])
    {
      secret_prefix = 'Secret/';
    }
    cmd_no_spaces = str_replace(find:" ", replace:"_", string:cmd);

    cmd_output = run_command(cmd:cmd,
                   session:session,
                   use_shell_handler:use_shell_handler,
                   channel:channel,
                   force_priv_escl:TRUE);
    if (isnull(cmd_output))
    {
      set_kb_item(name:secret_prefix + zte_kb_prefix + cmd_no_spaces + '/errmsg', value:'The command failed to produce any output.');
    }
    else
    {
      if (preg(pattern:"\r\nError ", string:cmd_output, multiline:TRUE))
      {
        i = stridx(cmd_output, '\r\nError ');
        # make sure the ^ error marker appears followed by a series of spaces.
        if (i > 0 && preg(pattern:"\^ +$", string:substr(cmd_output, 0, i-1), multiline:TRUE))
        {
          set_kb_item(name:secret_prefix + zte_kb_prefix + cmd_no_spaces + '/errmsg', value:cmd_output);
        }
        else set_kb_item(name:secret_prefix + zte_kb_prefix + cmd_no_spaces +'/errmsg', value:'An unknown error occurred :' + '\r\n' + cmd_output);
      }
      else set_kb_item(name:secret_prefix + zte_kb_prefix + cmd_no_spaces, value:cmd_output);
    }
  }

  cmd_output = get_kb_item(zte_kb_prefix + 'show_privilege');
  if(cmd_output && "Current privilege level is" >< cmd_output)
  {
    priv = pregmatch(pattern:'Current privilege level is ([0-9]*)', string:cmd_output);
    if(!empty_or_null(priv) && !empty_or_null(priv[1]))
    {
      priv = int(priv[1]);
      replace_kb_item(name:zte_kb_prefix + 'show_privilege', value:priv);
    }
    else
    {
      rm_kb_item(name:zte_kb_prefix + 'show_privilege');
      replace_kb_item(name:zte_kb_prefix + 'show_privilege/errmsg', value:'Unable to extract non-digit privilege level from show privilege output:\r\n' + cmd_output);
    }
  }
  else if (cmd_output)
  {
    rm_kb_item(name:zte_kb_prefix + 'show_privilege');
    replace_kb_item(name:zte_kb_prefix + 'show_privilege/errmsg', value:'Unable to extract privilege level from unusual show privilege output:\r\n' + cmd_output);
  }
  # If cmd_output doesn't exist here, the errmsg KB is already written.

  err_kbs = get_kb_list('*' + zte_kb_prefix + '*' + '/errmsg');
  if (!empty_or_null(err_kbs))
  {
    failure_kb_msg =
      'The remote operating system appears to be a type of ZTE ZXROSNG device,\n' +
      'ZTE Routing Operating System for Next Generation, version ' + os_level + '.\n' +
      'However, at least one command has run into unexpected errors and local checks\n' +
      'will not be enabled at this time.\n';
    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    return NULL;

  }
  else
  {
    report += '\nLocal security checks have been enabled for ZXROSNG device, ZTE Routing Operating System for Next Generation, version ' + os_level + '.';
    sshlib::enable_local_checks();
    replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_zxrosng.static', value: 164);
  }
}

#
# callback for systems without "ZTE Router Platform Software:" in show zxrp-info
#
function handle_not_zxrosng(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/show_zxrp_info", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['showzxrpinfo_unrecognized'] = cmd_res;
    host_info_key_val['host_not_zxrosng'] = TRUE;
  }
}
