#TRUSTED 72979d906d6c9187d3c0366a58a85c7f8cdd6d7ca0ee905ba050114a32a461b3f70edfb6430a7edf939815b10b35de09bf6fcfa0e853ccc05782b1c7c38cc099f2864a429ea40039a59e6a693790d16d18bfb7e8f29213b1c72fd66d5a1c0dc5cb64fc418596c78afc8feef91100fa36a847667016139be671c478c0803a4d83cf1d504371cea5275e3274efc5e437ebc63a256c0702804f6753d4f14dcb7059299344fade85380333307dae612aa0aedd8b2f957bce356314b73786d9f96efcb7ea4567bffb506fc511845043d1a863217ddcb54a1609f5826cec0893c2b4ff8441469a6d2834b5b61d731b77313e90e2de522fe93828e741aac1c436a2ccccbc2f87d1605c3eba506bc663cfed7d4a372a92cb8e114cce5d4ad7fac9db52859fc7256e43edb5573d473ae36a0cf69cbcbaf4fcab3789bde17472019a71c01489d1101aaf43c05766bac0f7addfa7f8d82729c97cf14be2239d3925d6b7a6cd83a4f9c9074ca4b3da22a9156f6a0cff3accdaee54d27102fdf123910a06fbaa7ae8e81d56e1b8ae7be8e5a046e12db926500223391511116e8b3c5c61dd091cb964fc12ceaf9af7155b6562ec7e3cd21f8ad79e54a9e85ea0031b4e8c374bf13dfe42de72cc3d72bea6e6785bdefe3e951de4af7b103990db1723308472abaeddc5b3895d9677580bf81dd670693e8e003e2f4aad6c74688f7fe59020647838
###
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# @NOGPL@
#
# Revision: 1.2
#
# This shell handler is more of a wrapper around the basic shell handler.
# The idea is that the handler will manage a stack of layers that the shell
# can be in; what layer it entered at, what layer it is in, how to change
# between the layers.
#
# The handler will obtain a specified shell, and remain at that shell for
# future calls.
###

namespace sshlib
{
  global_var _CP_SH_DEFAULT_INACTIVITY_TIMEOUT = 60;
  global_var _CP_SH_INITIAL_INACTIVITY_TIMEOUT = 10;

  ##
  # Checkpoint Gaia shells
  ##
  var CP_SH_CLISH  = 'Checkpoint_Gaia_clish';
  var CP_SH_EXPERT = 'Checkpoint_Gaia_expert';

  ##
  # Handle expert prompt post escalation.
  ##
  function is_elevated_prompt(session, channel)
  {
    if(empty_or_null(channel.data_buf))
    {
      channel.window_send_data(data:'\x00', redact:FALSE);
      return NULL;
    }

    var prompt_idx = stridx(tolower(channel.data_buf), "[expert@");

    if(prompt_idx >= 0)
    {
      channel.clear_data_buf();
      return TRUE;
    }
    else if("wrong password" >< tolower(channel.data_buf))
    {
      session.set_cmd_error(channel.data_buf);
      return TRUE;
    }

    return basic_shell_handler_on_channel_buffer_inactivity(session:session, channel:channel);
  }

  ##
  # Handles clish to expert mode escalation using a password.
  ##
  function at_expert_pw_prompt(session, channel)
  {
    if("password" >< tolower(channel.data_buf))
    {
      var kb_id = SSH_LIB_KB_PREFIX + session.get_kb_connection_id();
      var escl_method = get_kb_item(kb_id + "/escalation_type");
      var escl_pwd = get_kb_item("Secret/" + kb_id + "/escalation_extra/expert_pass");

      if(isnull(escl_pwd) && escl_method == "cisco_enable")
      {
        escl_pwd = get_kb_item("Secret/" + kb_id + "/escalation_extra/enable_pass");
        dbg::detailed_log(lvl:1, src:FUNCTION_NAME,
          msg:"No expert mode credential configured in scan.  Trying existing Cisco 'enable' instead.");
      }

      # Sending password for expert mode
      channel.clear_data_buf();

      # sleep to make sure PAM is ready
      dbg::detailed_log(lvl:2, src:FUNCTION_NAME, msg:'Sleep 3 seconds to let PAMs catch up');
      sleep(3);

      channel.window_send_data(data:escl_pwd + '\n', redact:TRUE);
      session.sshrecv_until(
        end_states     : make_list("SOC_CLOSED"),
        check_callback : @is_elevated_prompt,
        channel        : channel,
        cmd_timeout    : 60,
        timeout        : 10
      );

      return TRUE;
    }

    return basic_shell_handler_on_channel_buffer_inactivity(session:session, channel:channel);
  }

  ##
  # Checkpoint Gaia shell manager, handles two shells and switching
  # between them while wrapping basic_shell_handler to run commands
  object checkpoint_shell_manager : sshlib::basic_shell_handler
  {
    var objname = 'checkpoint_shell_manager::';
    var default_shell;
    var last_shell_used;
    var cmd_prompts = {};
    var kb_cmd_prompts = {};
    var kb_id;

    ##
    # Shell that channel is currently in
    ##
    var current_shell;

    # Shell handler initialization caller
    # @category SSH
    ##
    function checkpoint_shell_manager()
    {
      this.init();

      this.kb_cmd_prompts[CP_SH_CLISH] = '/cp_cmd_clish_prompt';
      this.kb_cmd_prompts[CP_SH_EXPERT] = '/cp_cmd_expert_prompt';
    }

    # Initialize cmd_prompts from KB
    # @category SSH
    ##
    function get_cmd_prompts()
    {
      var key, shells, val;
      foreach var shell ([CP_SH_CLISH, CP_SH_EXPERT])
      {
        key = this.kb_id + this.kb_cmd_prompts[shell];
        this.cmd_prompts[shell] = get_kb_blob(kb_id + this.kb_cmd_prompts[shell]);
      }
    }

    ##
    # Set a command prompt in the KB
    # @param layer Shell layer
    # @param cmd_prompt Command prompt to set
    # @category SSH
    ##
    function set_cp_cmd_prompt(shell, cmd_prompt)
    {
      this.cmd_prompts[shell] = cmd_prompt;
      var key = this.kb_id + this.kb_cmd_prompts[shell];
      return replace_kb_blob(name:key, value:cmd_prompt);
    }

    ##
    # Get a command prompt from the KB
    # @param layer Shell layer
    # @param cmd_prompt Command prompt to set
    # @category SSH
    ##
    function get_cp_cmd_prompt(shell)
    {
      if (this.cmd_prompts[shell])
        return this.cmd_prompts[shell];
      var key = this.kb_id + this.kb_cmd_prompts[shell];
      return get_kb_blob(key);
    }

    ##
    # Opens a new shell and runs "uname -a" to determine the
    # default shell
    #
    # @param channel channel for ssh session
    # @param cmd_timeout_min The total number of seconds that may elapse
    #                      waiting for the command response. (optional)
    # @param inactivity_timeout_min The number of seconds that may
    #                             elapse with no data received from
    #                             the target. (optional)
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    protected function _set_default_shell(&channel, cmd_timeout_min,
        inactivity_timeout_min)
    {
      var fn = objname + FUNCTION_NAME;
      var session = channel.session;
      var res = get_kb_item("Host/uname");
      if(empty_or_null(res))
      {
        res = super.run_command(
          command                : "uname -a",
          channel                : channel,
          cmd_timeout_min        : cmd_timeout_min,
          inactivity_timeout_min : inactivity_timeout_min);

        if (!res)
        {
          dbg::detailed_log(lvl:1, src:fn,
            msg:'Default shell does not appear to be a Checkpoint Gaia shell because command "uname -a" failed to return results.');
          return FALSE;
        }
      }

      if (res =~ "^CLINFR0329\s+Invalid command:")
      {
        this._init_shell_values(handler: channel.shell_handler, shell: CP_SH_CLISH);
      }
      else if (res =~ "^(Linux) +([^ ]+) +([0-9.]+-[0-9.]+cp)")
      {
        this._init_shell_values(handler: channel.shell_handler, shell: CP_SH_EXPERT);
      }
      else
      {
        dbg::detailed_log(lvl:1, src:fn,
          msg:'Default shell does not appear to be a Checkpoint Gaia shell based on result of "uname -a" :\n' + res,
          msg_details:{'Result of "uname -a"':{"lvl":1, "value":res}});
        return FALSE;
      }

      dbg::detailed_log(lvl:1, src:fn, msg:'Setting default shell to: ' + this.default_shell);
      replace_kb_item(name:kb_id + '/default_shell', value:this.default_shell);
      return TRUE;
    }

    ##
    # Public function to set the current shell.  This can be used by ssh_get_info2
    # handlers that already have enough information to identify which shell is
    # being used.
    #
    # @param shell    name of the shell to use
    # @param handler  shell handler used to identify os
    #
    # @return Returns NULL.
    ##
    public function set_gaia_shell(shell, handler)
    {
      this.default_shell = shell;
      this.current_shell = shell;

      if (handler) this.cmd_prompts[shell] = handler.cmd_prompt;

      this.last_shell_used = this.default_shell;

      return NULL;
    }

    ##
    # Helper function to set the default values for the identified shell.
    #
    # @param shell   name of shell to use
    # @param handler shell handler object
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    protected function _init_shell_values(shell, handler)
    {
      if (isnull(shell))
        return FALSE;

      if (isnull(handler) && isnull(this.cmd_prompts[shell]))
        return FALSE;

      this.default_shell = shell;
      this.current_shell = shell;
      if (handler) this.cmd_prompts[shell] = handler.cmd_prompt;
      if (!get_kb_blob(this.kb_id + this.kb_cmd_prompts[shell]))
        set_kb_blob(name:this.kb_id + this.kb_cmd_prompts[shell], value:this.cmd_prompts[shell]);
      this.last_shell_used = this.default_shell;

      return TRUE;
    }

    ##
    # Switches the shell handler between the different posible shells
    #
    # @param channel channel for ssh session
    # @param source  The source shell changing from
    # @param destination  The destination shell changing to
    # @param command The command to use to change the shell (optional, default 'exit')
    # @param callback The callback function to use (optional, default @basic_shell_handler_at_prompt3_or_timeout)
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    protected function _change_shell(&channel, source, destination, command, callback)
    {
      var fn = objname + FUNCTION_NAME;
      var session = channel.session;
      var msg = NULL;

      # verify the environment is setup as needed
      if (this.current_shell != source)
      {
        dbg::detailed_log(lvl:1, src:fn, msg:'Current shell is not "' + source + '".');
        return FALSE;
      }

      if (isnull(command))
      {
        dbg::detailed_log(lvl:1, src:fn, msg:'No command provided.');
        return FALSE;
      }

      if (!channel_usable_for_shell_command(channel:channel))
        return FALSE;

      if (isnull(callback))
      {
        dbg::detailed_log(lvl:2, src:fn, msg:'Using default callback.');
        callback = @basic_shell_handler_at_prompt3_or_timeout;
      }

      dbg::detailed_log(lvl:1, src:fn, msg:'Changing "' + source + '" to "' + destination + '".');
      dbg::detailed_log(lvl:1, src:fn, msg:'command: ' + command);

      # Null out and set the cmd prompt if known
      var orig_cmd_prompt = this.cmd_prompt;
      this.cmd_prompt = this.get_cp_cmd_prompt(shell:destination);
      var check_len = 3;
      if (this.cmd_prompt)
      {
        if (strlen(this.cmd_prompt) < 3) check_len = strlen(this.cmd_prompt);
        dbg::detailed_log(lvl:1, src:fn, msg:'Expecting command prompt: ' + this.cmd_prompt);
      }

      # run command to get change layer
      channel.session.clear_cmd_error();
      channel.clear_data_buf();
      channel.window_send_data(data:command + '\n');
      this.timeout_check = _CP_SH_DEFAULT_INACTIVITY_TIMEOUT;
      channel.session.sshrecv_until(
        end_states     : make_list("SOC_CLOSED"),
        check_callback : callback,
        channel        : channel,
        timeout        : this.recv_timeout);

      # If using the default callback and did not time out, then the
      # shell was gained with the expected command prompt
      if (!this.timed_out && !channel.session.cmd_error)
        this.current_shell = destination;

      # Custom call backs will change the shell on their own
      if (this.current_shell != destination)
      {
        msg = 'Failed to obtain shell "' + destination + '"';
        session.set_cmd_error(msg);
        # Try to get back to source cmd_prompt
        if (orig_cmd_prompt)
        {
          this.cmd_prompt = orig_cmd_prompt;
          check_len = 3;
          if (strlen(this.cmd_prompt) < 3) check_len = strlen(this.cmd_prompt);
          dbg::detailed_log(lvl:1, src:fn, msg:'Getting command prompt',
            msg_details:{"Expected command prompt":{"lvl":1, "value":this.cmd_prompt}});

          channel.window_send_data(data:'\x03');
          this.timeout_check = _CP_SH_INITIAL_INACTIVITY_TIMEOUT;
          channel.session.sshrecv_until(
            end_states     : make_list("SOC_CLOSED"),
            check_callback : @basic_shell_handler_at_prompt2_or_timeout,
            channel        : channel,
            timeout        : this.recv_timeout);

          # If we got back to the original command prompt, don't set
          # last_cmd_error
          if (!this.timed_out)
          {
            return FALSE;
          }

          session.set_cmd_error('Timed out waiting for expected command prompt: ' + this.cmd_prompt);
        }
        this.last_cmd_error = TRUE;
        return FALSE;
      }
      # Try to receive the command prompt if we haven't already
      else if (isnull(this.cmd_prompt) || !super.at_cmd_prompt(buf:channel.data_buf, check_len:check_len))
      {
        if (!channel_usable_for_shell_command(channel:channel))
          return FALSE;

        dbg::detailed_log(lvl:1, src:fn, msg:'Getting command prompt');
        channel.window_send_data(data:'\x03');
        this.timeout_check = _CP_SH_INITIAL_INACTIVITY_TIMEOUT;
        channel.session.sshrecv_until(
          end_states     : make_list("SOC_CLOSED"),
          check_callback : @basic_shell_handler_at_prompt2_or_timeout,
          channel        : channel,
          timeout        : this.recv_timeout);

        if (!isnull(this.cmd_prompt) && this.timed_out)
        {
          session.set_cmd_error('Timed out waiting for expected command prompt: ' + this.cmd_prompt);
          this.last_cmd_error = TRUE;
          return FALSE;
        }

        if (!this.cmd_prompt)
        {
          # changed to
          var lines = split(channel.data_buf, sep:'\n', keep:FALSE);
          var tmp_prompt = lines[max_index(lines)-1];
          this.cmd_prompt = tmp_prompt;
          this.cmd_prompts[destination] = this.cmd_prompt;

          this.set_cp_cmd_prompt(shell:destination, cmd_prompt:this.cmd_prompt);
          dbg::detailed_log(lvl:1, src:fn, msg:'Found command prompt: ' + this.cmd_prompt);
        }
      }
      dbg::detailed_log(lvl:1, src:fn, msg:'Successfully obtained shell "' + destination + '"');

      this.fresh_shell = FALSE;
      this.timed_out = FALSE;
      this.last_cmd_error = FALSE;
      this.last_shell_used = destination;
      channel.clear_data_buf();

      return TRUE;
    }

    ##
    # Utility functions to request a shell change
    #
    # @param channel channel for ssh session
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    public function change_shell_to_clish(&channel)
    {
      if(this.current_shell != CP_SH_EXPERT)
        return FALSE;

      # change the shells
      if (this.default_shell == CP_SH_CLISH )
      {
        this._change_shell(
          channel:channel,
          source:CP_SH_EXPERT,
          destination:CP_SH_CLISH,
          command:'exit');
      }
      else if (this.default_shell == CP_SH_EXPERT )
      {
        this._change_shell(
          channel:channel,
          source:CP_SH_EXPERT,
          destination:CP_SH_CLISH,
          command:'clish');
      }

      # check that ending shell is the correct shell
      if (this.current_shell == CP_SH_CLISH)
        return TRUE;

      return FALSE;
    }

    ##
    # Utility functions to request a shell change
    #
    # @param channel channel for ssh session
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    public function change_shell_to_expert(&channel)
    {
      var fn = objname + FUNCTION_NAME;
      var session = channel.session;
      var cisco_fallback = FALSE;

      # make sure the change can happen
      if(this.current_shell != CP_SH_CLISH)
        return FALSE;

      # change the shells
      if (this.default_shell == CP_SH_CLISH)
      {
        var escl_method = get_kb_item(this.kb_id + "/escalation_type");
        var escl_pwd = get_kb_item("Secret/" + this.kb_id + "/escalation_extra/expert_pass");

        # We have to support the old way of specifying a Gaia expert password to support legacy
        # scan policies.
        if(isnull(escl_pwd) && escl_method == "cisco_enable")
        {
          escl_pwd = get_kb_item("Secret/" + this.kb_id + "/escalation_extra/enable_pass");
          cisco_fallback = TRUE;
        }

        if((escl_method == "gaia_expert" || cisco_fallback) && !empty_or_null(escl_pwd))
        {
          this._change_shell(
            channel:channel,
            source:CP_SH_CLISH,
            destination:CP_SH_EXPERT,
            command:'expert',
            callback:@at_expert_pw_prompt);
        }
        else
        {
          var msg = 'No expert mode credential configured in scan.';
          session.set_cmd_error(msg);
          return FALSE;
        }
      }

      if (this.default_shell == CP_SH_EXPERT)
      {
        this._change_shell(
          channel:channel,
          source:CP_SH_CLISH,
          destination:CP_SH_EXPERT,
          command:'exit');
      }

      # check that ending shell is the correct shell
      if (this.current_shell == CP_SH_EXPERT)
        return TRUE;

      return FALSE;
    }

    ##
    # Utility functions to check all valid CP shells
    #
    # @param shell shell string to check
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    protected function _is_valid_shell(shell)
    {
      return
        shell == CP_SH_CLISH ||
        shell == CP_SH_EXPERT;
    }

    ##
    # Removes prompt and errors from command output.
    #
    # @param cmd_res The command result.
    # @return Returns the command result stripped of the command prompt
    #         and error messages.
    ##
    protected function _remove_cmd_prompt(cmd_res)
    {
      var tmp = '';
      foreach var line (split(cmd_res))
      {
        if(this.cmd_prompt >< line)
          continue;
        if(line =~ "CLINFR\d+\s+")
          continue;
        if(strlen(tmp) > 0)
          tmp += '\n';
        tmp += line;
      }

      return tmp;
    }

    ##
    # run given command
    #
    # @param session SSH session in case reconnection is needed
    # @param channel channel for ssh session
    # @param command cmd to run
    # @param force_priv_escl force priv escalation flag
    # @param cmd_timeout_min The total number of seconds that may elapse
    #                      waiting for the command response. (optional)
    # @param inactivity_timeout_min The number of seconds that may
    #                             elapse with no data received from
    #                             the target. (optional)
    # @param cmd_shell The global var for the Checkpoint Gaia shell that should
    #                  be used to run the command
    #
    # @return command result or NULL on failure
    # @category SSH
    ##
    public function run_command(&session, &channel, command, force_priv_escl,
        cmd_timeout_min, inactivity_timeout_min, cmd_shell)
    {
      var fn = objname + FUNCTION_NAME;
      var obj_ch_id = '[channel ' + channel.local_channel + ']: ';
      var msg, res;

      # Check channel and replace if necessary; replace_shell() will
      # set applicable error if it fails
      channel.set_shell_handler(shell_handler:this);
      if (!channel_usable_for_shell_command(channel:channel))
      {
        if (!session_replace_shell(session:session, channel:channel))
        {
          msg = 'Did not run command due to session error.\nCommand : ' + command + '\nSession error : "' + last_error + '"';
          session.set_error(msg);
          return fn + '() ' + msg;
        }
        this.fresh_shell = TRUE;
      }

      # Initialize variables
      set_timeouts(inactivity_timeout_min:inactivity_timeout_min,
          cmd_timeout_min:cmd_timeout_min);

      this.kb_id = SSH_LIB_KB_PREFIX + session.get_kb_connection_id();

      # Likely this shell was initialized with set_gaia_shell(), before
      # the connection was known.  Finish initialization here.
      if (!isnull(this.default_shell) &&
          !get_kb_blob(this.kb_id + this.kb_cmd_prompts[this.default_shell]) &&
          !isnull(this.cmd_prompts[this.default_shell]))
      {
        replace_kb_blob(name:this.kb_id + this.kb_cmd_prompts[this.default_shell],
                    value:this.cmd_prompts[this.default_shell]);
        replace_kb_item(name: this.kb_id + '/default_shell', value:this.default_shell);
      }

      this.get_cmd_prompts();

      if (this.fresh_shell && !this.default_shell)
      {
        dbg::detailed_log(lvl:1, src:fn, msg:'Checking default Checkpoint Gaia shell.');
        this.default_shell = get_kb_item(this.kb_id + '/default_shell');
        if (!this.default_shell || !this.cmd_prompts[this.default_shell])
        {
          this._set_default_shell(
            channel                : channel,
            cmd_timeout_min        : cmd_timeout_min,
            inactivity_timeout_min : inactivity_timeout_min);
        }
      }

      if (!this.default_shell)
      {
        session.set_cmd_error('Unable to run command. Failed to ' +
          'confirm that default shell is a Checkpoint Gaia shell.');
        return NULL;
      }

      # If fresh shell, assume current shell is default shell
      if (this.fresh_shell) this._init_shell_values(shell:this.default_shell);

      # Assume last shell used as shell to run in if not specified
      if (isnull(cmd_shell)) cmd_shell = this.last_shell_used;

      dbg::detailed_log(lvl:1, src:fn, msg:'Command to run : ' + command);
      dbg::detailed_log(lvl:1, src:fn, msg:'Checkpoint Gaia shell to use : ' + cmd_shell);

      # Verify the current and target shells are known shell before proceeding
      if (!this._is_valid_shell(shell: this.current_shell))
      {
        session.set_cmd_error('Unable to run command. Current shell "' +
          this.current_shell + '" is not a known Checkpoint Gaia shell.');
        return NULL;
      }
      if (!this._is_valid_shell(shell: cmd_shell))
      {
        session.set_cmd_error('Unable to run command. Target shell "' +
          cmd_shell + '" is not a known Checkpoint Gaia shell.');
        return NULL;
      }

      # Set sh to the target shell for the command
      dbg::detailed_log(lvl:1, src:fn, msg:'Making sure the current shell ' + 'is the specified shell "' + cmd_shell + '" to run the command.');

      if (cmd_shell == this.current_shell)
        res = TRUE;
      else if (cmd_shell == CP_SH_EXPERT)
        res = this.change_shell_to_expert(channel:channel);
      else if (cmd_shell == CP_SH_CLISH)
        res = this.change_shell_to_clish(channel:channel);
      else
      {
        session.set_cmd_error('Unknown Checkpoint Gaia shell "' + cmd_shell + '".');
        return NULL;
      }

      if (!res)
      {
        session.set_cmd_error('Unable to obtain shell "' + cmd_shell +
          '" specified to run command.');
        return NULL;
      }

      dbg::detailed_log(lvl:1, src:fn, msg:'Running command "' + command + '" using Checkpoint Gaia shell "' + this.current_shell + '"');

      var ret = super.run_command(
        channel                : channel,
        command                : command,
        cmd_timeout_min        : cmd_timeout_min,
        inactivity_timeout_min : inactivity_timeout_min);

      # set last shell after successful command run
      if (!isnull(ret))
      {
        this.last_shell_used = cmd_shell;
        ret = _remove_cmd_prompt(cmd_res:ret);
      }

      return ret;
    }

    ##
    # Revert to default shell
    #
    # @param channel channel for ssh session
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    public function revert(&channel)
    {
      var fn = objname + FUNCTION_NAME;
      var session = channel.session;
      var res = TRUE;

      if (this.current_shell == this.default_shell)
        return TRUE;

      dbg::detailed_log(lvl:1, src:fn, msg:'Reverting current shell "' + this.current_shell + '" to default shell "' + this.default_shell + '".');

      if (this.default_shell == CP_SH_CLISH)
        res = this.change_shell_to_clish(channel:channel);
      else if(this.default_shell == CP_SH_EXPERT)
        res = this.change_shell_to_expert(channel:channel);

      if (!res)
      {
        session.set_cmd_error('Failed to revert to default Checkpoint Gaia shell.');
        return FALSE;
      }

      return TRUE;
    }


    ##
    # Close the shell by sending an 'exit'
    #
    # @param channel channel for ssh session
    #
    # @return TRUE if successful, FALSE otherwise
    ##
    public function close(&channel)
    {
      var fn = objname + FUNCTION_NAME;
      var session = channel.session;

      dbg::detailed_log(lvl:1, src:fn, msg:'Closing Checkpoint Gaia shell.');

      # Revert to default shell if necessary
      if (this.current_shell != this.default_shell)
      {
        this.revert(channel:channel);
      }

      super.run_command(
        channel                : channel,
        command                : 'exit');

      return TRUE;
    }

    ##
    # test private function
    #
    # @param name name of function to return
    # @param args args to pass to the function
    #
    # @return NULL on error / result of named function
    # @category SSH
    ##
    public function test_private_function(name, args)
    {
      var fn = 'checkpoint_shell_manager.' + FUNCTION_NAME;
      if (isnull(name))
      {
        dbg::detailed_log(lvl:1, src:fn, msg:'Missing name parameter');
        return;
      }
      switch (name)
      {
       default:
          return super.test_private_function(name:name, args:args);
      }

      return NULL;
    }
  }
}
