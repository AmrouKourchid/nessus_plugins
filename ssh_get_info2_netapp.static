#TRUSTED 5c0fdbb673c43686d78b7a0f8c1c83c7ad19e1e7ec9fc895f5ac49fb62a767aa98b22c8074939e24bf7380b22e7eefd45cba497350ada5f82e030eae01aad620ca8c6635bce59e8b38d11912d9d92971f6c6b5f4d969c10e367ba8e9029b53addfb0fd1291f4084321b00cd32a6f3bb1c7696b99d39880659f3675119106f8950f4ea86d55827efa6916defe94926a57f2f0e609d3136e72553d2cfd0a208fb1a01a446c2f3e530f8c456aa839492012ae07737b740a372edf0d2798931af11275f2cf66be168f144cee4f19326cdb64c50df85ff7d88e9bdd6295abbef683ffdc363da2d63da7bd7bad8bb5664430acdc21232bef7cfccb0640d996f626162f8d005a11c5a65e4ac6473e7d66f9dd83975a391496fd8c81fa179838be8b8e84e7a4629044d6111cb37523b431bdfa07acb2cab396aa83aaa2174762b2fff3e04d968b21be4666a9a1d4e35e04482b5dade5692ed11c6c2492ddff39cef68892e001ed16651031dfc8d4c124fd2e0e63c7b67202e25c34bba34f19a79b4272ffb226bdcfffa602108b2c0e10ffdd78614ab6868f621400925ea896638b175466cde5109337e231313281aac51a21922a0785bddb5aafd9facf4d8e0cea9f765244abc8bba89bb748c6d1be10d6720b32a50d718db670de8d0c80b78e608c5fef6478c4616f6b77e194b3bf91efba2cd5ce19b8c41a87c02b5b3a7874163470c0
#TRUST-RSA-SHA256 2b286fc163be37182851c6f9c50b30cdfe62d9e305578741e8ebbbc56899ffbe7a0ae166d12aff4e17636f271d45eb20b381dd6163954d20c56318437870b47df3b3b6e75fc16ea034455c6a5eeb1e05275db9ddd2585cc874d7759b3a5758caa268b9c41543abe5c7bb1f3c92d119f64a23abfdefd7022d5f00233b2c8cf35472217613949a633f4047b0924704d6781e7bd0a0787b55e0d2a30b1fceeb7c14506b2b587937d66ef1dfd0b1b81ccfc0a85de3fc2d90a136937f5e104cb00a7927e5079cd2888ab5986c4b866240ef7e456a8500d6663d51abca267780be6aac549dc95a7e63f6060d67cfc3cad3ba9123e4afee074554d0b28c650dd14b52c9d4f360dfb6c42ba9aa2d97c69401f7b258c313f3d4d43696cfee899e424fe5b40b7d74371410c1c52200dc4dd4bbd15429509467a3206ebd16e4f9bf656b1be5d09ae1f5124c849a11dcaed9af6673d92e9db14dd316510536850d3ade25fd2e415dac5bdbff2e07da1f231c472aab05cc34c86c76d6a5cac0496f8788f64a8f73f3b33a9cf310cacbdf6c9c18dc6b1f7e79e284e5af8db74c58ce5c8e50bc48c4e4483bb6cf34f946e314288ef864da16f8e4feeaa4902d4cdd9bc4400465576aaa0c276328d97d5783e761827b0e9e86676cf52ec3048d29431feeffafd365cd9cb306ca91db9c8e2aedcd0ce8f6aeef107f99c6a68428a8f367ea541f7793

# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.16
#


function netapp_pre_check_fail()
{
  # have we already checked that the host is not NetApp
  if(host_info_key_val['host_not_netapp'])
    return TRUE;

  if(!empty_or_null(host_info_key_val['version_unrecognized']) &&
     host_info_key_val['version_unrecognized'] !~ netapp_check['test_cmd_regex'])
    return TRUE;

  # Not NXOS if one of the following devices
  if (is_cisco_firepower() ||
      is_cisco_ssh() ||
      is_cisco_nxos() ||
      is_timos_userauth() ||
      is_cisco_ucos() ||
      is_huawei() ||
      is_panos() ||
      is_acos() ||
      is_adtran() ||
      is_asyncos() ||
      is_staros() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

function handle_netapp(session, use_shell_handler, channel, cmd_res)
{
  local_var mode, cluster, display_version, shell, match, os_name;
  local_var version, local_version, build, uptime;

  report += '\nLocal checks have been enabled for NetApp Data ONTAP.';

  set_kb_item(name:"Host/NetApp/ONTAP/show_version", value:cmd_res);

  mode = FALSE;
  cluster = FALSE;
  display_version = '';
  shell = 'node';

  if("::>" >< channel.shell_handler.cmd_prompt)
  {
    shell = 'cluster';
  }

  # OS fingerprint info
  os_name = "NetApp";
  match = pregmatch(pattern:"^\s*NetApp Release ([0-9.]+)([0-9A-Z]+)?\s*(7-Mode|Cluster-Mode)?", string:cmd_res);
  if (match && match[1])
  {
    os_name = "NetApp Release " +  match[1];
    version = match[1];
    display_version = match[1];

    if (!isnull(match[2]))
    {
      build = match[2];
      os_name += match[2]; # Append build
      display_version += match[2];
    }
  }

  if(!version || !display_version)
  {
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    failure_kb_msg =
      'The device appears to be NetApp, however it was not possible to\n'+
      'determine the installed version. OS Security Patch Assessment is not available.\n';
    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    return NULL;
  }

  # 7-Mode or Cluster-Mode is found version banner in older versions
  if (match[3])
  {
    if ("7-Mode" >< match[3])
      mode = TRUE;
    if ("Cluster-Mode" >< match[3])
      cluster = TRUE;
  }

  # NetApp ONTAP 8.3+ supports only cluster operation; it does not support 7-Mode.
  if (version && ver_compare(ver:version, fix:"8.3", strict:FALSE) >= 0)
  {
    cluster = TRUE;
  }
  # if not 8.3+ then check version output for 7-Mode/Cluster-Mode strings
  else
  {
    local_version = run_command(
                      cmd:"node run -node local -command version",
                      session:session,
                      use_shell_handler:use_shell_handler,
                      channel:channel);

    if(!local_version)
      local_version = 'unknown';
    set_kb_item(name:"Host/NetApp/ONTAP/local_version", value:local_version);

    if ("Mode" >< local_version)
    {
      if ("7-Mode" >< local_version)
        mode = TRUE;
      if ("Cluster-Mode" >< local_version)
        cluster = TRUE;
    }
  }

  # get uptime info
  if (cluster)
  {
    uptime = run_command(
              cmd: "node show -node local",
              session: session,
              use_shell_handler: use_shell_handler,
              channel: channel);
    uptime = pregmatch(pattern:"Uptime:\s+([^\r\n]+)", string: uptime);
    if (uptime) set_kb_item(name:"Host/last_reboot", value:uptime[1]);
  }
  else
  {
    uptime = run_command(
              cmd: "uptime",
              session: session,
              use_shell_handler: use_shell_handler,
              channel: channel);
    if (uptime) set_kb_item(name:"Host/last_reboot", value:uptime);
  }

  set_kb_item(name:"Host/OS/showver", value:os_name);
  set_kb_item(name:"Host/OS/showver/Confidence", value:100);
  set_kb_item(name:"Host/OS/showver/Type", value:"embedded");

  set_kb_item(name:"Host/NetApp/ONTAP/version", value:version);
  set_kb_item(name:"Host/NetApp/ONTAP/display_version", value:display_version);
  if(build)
    set_kb_item(name:"Host/NetApp/ONTAP/build", value:build);
  set_kb_item(name:"Host/NetApp/ONTAP/mode", value:mode);
  set_kb_item(name:"Host/NetApp/ONTAP/cluster", value:cluster);
  set_kb_item(name:"Host/NetApp/ONTAP/shell", value:shell);

  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_netapp.static', value: 166);
  report +=
    '\nThe remote operating system is : ' + os_name +
    '\n' +
    '\nLimited OS Security Patch Assessment is available for NetApp Data ONTAP.\n';

}

function handle_not_netapp(session, use_shell_handler, channel, cmd_res)
{
  if(use_shell_handler)
    store_shell_info();

  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/version", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['host_not_netapp'] = TRUE;
    host_info_key_val['version_unrecognized'] = cmd_res;
  }
}
