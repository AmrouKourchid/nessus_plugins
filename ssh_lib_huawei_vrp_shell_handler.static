#TRUSTED af95ce20c17465d088bd2c299f8be72a45659a5dea86f3f1dc1e08601022d73aec56e2aa89082c7541a98ecb6249aba9651bf6fe514bfa9f95f5f94194b95201aa6b5dc8f24736a2b2973fee7edb10e2ceb5bec956cfc46a73132cca913c4d17882ceda0f5612b9cc2a79794d882dd001cd181efe04bd1fb3a4832f79011cc491fe4fe2ef60a9edeae21766b153ecaef27623b214058841c1c92396c31cd2da270b7b27dc937eac17d5bf0c0358251b3e6d472330d0bf22cac4b420b4e1c35a257e9fb217836e0eac1491ed18847f5f6ae96ce1406f99526a8598b37b8cc61a8cfc611ac043c18934935711200be67d31f6f2e74d66764d8b179a1a42878a6055ea9bfb374fb696a34a54780f4f6337ece0cb69582e82f7f0298b5688c9801dc8114a00d4a98b4e74742459af9257817e25153c8c13649e92ffa1cdef2f65f9ea91811b88b6a51d5e030822d4c6fe09ce12b4c7fb1026e901b90ac54a9674297d6c7e69af276bae5c9728ff02db4bf9fb95e1703dfee206079a64426ef9adb0035c403620fe2b27244904a81503bbc74e27ebb93bfa8360e4b2bf17299ed5be9c38ca761c62face8595362f0d79c89662f09d2c9563415706e40720b88d320a9d12e020b08e25c3001e22895f7eef42c05af46beee7b931c0c1a2a743ba4c11be490653f706e59347506ad95b5fc1992cfe6e775ba13ef833eb047d01ddec6c0
#TRUST-RSA-SHA256 793f0668ee6bdb2f3ba598c79393f11dc773d8dd99595c0d5c843637f3413e0896ce542c52379a7e91f266afddbb9575e6f6f4edb680ea851ac7349b5b6370a313edb43b9598f5dbe9fbbe4327cc334d0ce02d9254b74efc0e53f5772b5b313d0f043b5c2d9cada3fb7196b25589564b16abd293278f6495ac9ab850303257e725ba241c7ffc91ce35632ecd80e31b7c7be6277a1ec1de3393595d364040385012865d1323e29b3706619ab3e0016c1b7bd94d42dda54ce7a94083b502ec38e91078c8e0c23a88a966882389c73d0a0d0b33e20bbcedfc526f69a25b3a538eb03ed6e1f0f453139109b827383b879d7eff57b72cc17d320b1e911353e76b6b8b7f7ac6d0962b5fece67eb9bc8345de63b4ba537183160e0662ed6579a55cbb049b963ff464c40bb4565ee6e21339b49497be90aaf629bc4bd7943a97b42456e9f97efa6b5ee63a0ae4d69ac0c40e93e54cc15187af13babd2e541daf21c9ab7736c115ac97fee07fdd2ed1fe8ce186eac11cccb3aeb552948396aa4a01a8e79135e26c9cd07b0576e1070542f39c1980e0fe90732120facd40c8f7b882e0e676025eb1ff02149117834a8c7b4301a82ea1cb41e72c7036fe70cc6e20782917137911882d3b0d416632f30f1cac39a70c7bfce0e42b0cea180cdc64977f9e97f9420880fb31cf52e8c77b6b477acbc570dac1bbc6532f800a729da104fdbf22af
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.5

namespace sshlib
{

  # all timeouts are controlled by a timer with 1s resolution
  # for that reason keep the shell timeout sufficiently beyond
  # the timer resolution (10s = 10x resolution)
  global_var _HUAWEI_DEFAULT_CMD_TIMEOUT = 60;
  global_var _HUAWEI_DEFAULT_INACTIVITY_TIMEOUT = 45;
  global_var _HUAWEI_INITIAL_INACTIVITY_TIMEOUT = 2;

  # Prompts are delineated by < >
  global_var _HUAWEI_DEFAULT_PROMPT = "<.+>";

  # cmd_states
  # _HUAWEI_CMD_STATE_SEND_REQ: ready to send a command to device
  # _HUAWEI_CMD_STATE_RECV_RSP: ready to recv a response from device
  # _HUAWEI_CMD_STATE_AT_PROMPT: found command prompt in response
  global_var _HUAWEI_CMD_STATE_SEND_REQ = 0;
  global_var _HUAWEI_CMD_STATE_RECV_RSP = 1;
  global_var _HUAWEI_CMD_STATE_AT_PROMPT = 2;
  global_var _HUAWEI_CMD_STATE_SEND_ESCL_REQ = 3;
  global_var _HUAWEI_CMD_STATE_RECV_ESCL_RSP = 4;
  global_var _HUAWEI_CMD_STATE_GET_PROMPT = 5;

  _BANNER_PAGINATION_SPACES = FALSE;

  function huawei_vrp_shell_handler_incoming_data_timeout_cb(session, channel)
  {
    var fn = 'huawei_vrp_shell_handler_incoming_data_timeout_cb';
    var sh = channel.shell_handler;
    var obj_ch_id = 'huawei_vrp_shell_handler [channel '+channel.local_channel+']: ';
    var lines = split(channel.data_buf, sep:'\n', keep:FALSE);
    var last_line = lines[max_index(lines)-1];
    if(isnull(channel))
    {
      dbg::detailed_log(lvl:1, src:fn, msg:"Channel does not exist");
      return TRUE;
    }
    if(channel.state == CHANNEL_STATE_CLOSED)
    {
      dbg::detailed_log(lvl:1, src:fn, msg:obj_ch_id + "Channel is closed.");
      return TRUE;
    }

    if(pgrep(pattern:"-+\s*[Mm]ore\s*-+", string:last_line))
    {
      channel.window_send_data(data:' ');
      _BANNER_PAGINATION_SPACES = TRUE;
      return FALSE;
    }

    dbg::detailed_log(lvl:3, src:fn, msg:obj_ch_id + "_HUAWEI_STATE : " + sh.cmd_state);
    return sh.check_inactivity_timeout(channel:channel);
  }

  function huawei_vrp_shell_handler_incoming_data_timeout_or_prompt_cb( session, channel )
  {
    var fn = 'huawei_vrp_shell_handler_incoming_data_timeout_or_prompt_cb';
    var obj_ch_id = 'huawei_vrp_shell_handler [channel '+channel.local_channel+']: ';
    var lines = split(channel.data_buf, sep:'\n', keep:FALSE);
    var last_line = lines[max_index(lines)-1];
    # does a channel exist?
    if ( isnull(channel) )
    {
      dbg::detailed_log(lvl:1, src:fn, msg:"Channel does not exist");
      return TRUE;
    }
    if (channel.state == CHANNEL_STATE_CLOSED)
    {
      dbg::detailed_log(lvl:1, src:fn, msg:obj_ch_id + "Channel is closed.");
      return TRUE;
    }
    # does channel have a valid data buffer?
    if ( isnull(channel.data_buf) )
    {
      dbg::detailed_log(lvl:1, src:fn, msg:obj_ch_id + "Channel.data_buf does not exist");
      return TRUE;
    }
    if ( isnull(channel.shell_handler ) )
    {
      dbg::detailed_log(lvl:1, src:fn, msg:obj_ch_id + "Shell handler does not exist");
      return TRUE;
    }
    var sh = channel.shell_handler;
    dbg::detailed_log(lvl:3, src:fn, msg:obj_ch_id + "_HUAWEI_STATE : " + sh.cmd_state);

    if(pgrep(pattern:"-+\s*[Mm]ore\s*-+", string:last_line))
    {
      channel.window_send_data(data:' ');
      return FALSE;
    }

    return sh.at_prompt_or_timeout(channel:channel);

  }

  object huawei_vrp_shell_handler
  {
    var settings;
    var cmd_state;
    var cmd_last;
    var cmd_prompt;
    var cmd_timeout;
    var inactivity_timeout;
    var last_md5;
    var last_buffer_update_ts;
    var last_cmd_error = FALSE;
    var fresh_shell = TRUE;
    var timed_out = FALSE;
    var default_escl = FALSE;
    var least_privilege = FALSE;
    var previous_prompt;
    var priv_escl_failed = FALSE;
    var new_channel_needs_new_connection = TRUE;

    function huawei_vrp_shell_handler()
    {
      settings = _FCT_ANON_ARGS[0];
      this.init(settings:settings);
    }

    public function init(settings)
    {
      this.cmd_last = "";
      this.cmd_prompt = _HUAWEI_DEFAULT_PROMPT;
      this.cmd_timeout = _HUAWEI_DEFAULT_CMD_TIMEOUT;
      this.inactivity_timeout = _HUAWEI_DEFAULT_INACTIVITY_TIMEOUT;
      this.cmd_state = _HUAWEI_CMD_STATE_SEND_REQ;
      this.last_cmd_error = FALSE;
      this.fresh_shell = TRUE;
      this.last_buffer_update_ts = unixtime();
      if (!isnull(settings))
      {
        this.settings = settings;
        if ( !isnull(this.settings['cmd_prompt']) )
          this.cmd_prompt = this.settings['cmd_prompt'];
        if ( !isnull(this.settings['cmd_prompt']) )
          this.previous_prompt = this.settings['cmd_prompt'];
        if ( !isnull(this.settings['cmd_timeout']) )
          this.cmd_timeout = this.settings['cmd_timeout'];
        if ( !isnull(this.settings['least_privilege']) )
          this.least_privilege = this.settings['least_privilege'];
      }
      else this.settings = make_array();
    }


    public function get_cmd_prompt()
    {
      return this.cmd_prompt;
    }

    ##
    # Returns terminal options
    #
    # @no53   If true don't populate flag 53 with any value - flag 53 (PTY_OPT_ECHO)
    #         reputedly breaks Palo Alto's SSH implementation. (optional)
    # @return Returns an array with a terminal carriage return Opcode
    ##
    public function get_pty_opts(no53)
    {
      if(isnull(no53))
        no53 = FALSE;

      return make_array(PTY_OPT_OCRNL, 0);
    }

    public function get_pty_size_chars()
    {
      # Make the default pty size large to avoid issues with truncation
      return make_list(200, 200);
    }

    public function get_pty_size_pixels()
    {
      return DEFAULT_PTY_SIZE_PIXELS;
    }

    public function get_pty_term()
    {
      return DEFAULT_PTY_TERM;
    }

    # should we send / recv data to device without setting up a channel?
    public function is_nosetup()
    {
      return FALSE;
    }

    # do we want to request a PTY on this device?
    public function send_pty_req()
    {
      return TRUE;
    }

    ##
    # do we want to handle the "shell" channel request?
    #
    # @category SSH
    ##
    public function get_shell_channel_request_cb()
    {
      return NULL;
    }

    public function set_last_cmd_error()
    {
      this.last_cmd_error = _FCT_ANON_ARGS[0];
    }

    public function set_cmd_prompt()
    {
      this.previous_prompt = this.cmd_prompt;
      this.cmd_prompt = _FCT_ANON_ARGS[0];
    }

    public function set_cmd_state(new_cmd_state)
    {
      var channel = _FCT_ANON_ARGS[0];
      if(!isnull(channel))
      {
        var obj_ch_id = 'huawei_vrp_shell_handler [channel '+channel.local_channel+']: ';
        dbg::detailed_log(lvl:3, src:'huawei_vrp_shell_handler.set_cmd_state',
          msg:obj_ch_id + ' updating from state ' + this.cmd_state + ' to state ' + new_cmd_state);
      }
      this.cmd_state = new_cmd_state;
    }


    ##
    # run a command on target system using Huawei VRP shell handler
    #
    # @param [channel:object] channel used for connection
    # @param [command:string] the command to run against the target
    # @param [force_priv_escl:bool] command should use escl if available
    # @param [cmd_timeout_min:int] timeout for command to run
    # @param [inactivity_timeout_min:int] timeout for inactivity
    #
    # @return NULL on fail, response to command on success
    ##
    public function run_command(channel, command, force_priv_escl,
        cmd_timeout_min, inactivity_timeout_min)
    {
      var fn = 'huawei_vrp_shell_handler.run_command';
      # Local reference to session, channel's reference gets deleted
      # if the channel gets closed
      var session = channel.session;
      var obj_ch_id = 'huawei_vrp_shell_handler [channel '+channel.local_channel+']: ';
      var cmd_logger = new("sshlib::cmd_logger");
      var lines;
      var last_line;
      var escl_result;
      var kb_id = session.get_kb_connection_id();
      var kb_base = SSH_LIB_KB_PREFIX + kb_id;
      var use_priv_escl = FALSE;
      var least_priv_escl = FALSE;

      if(isnull(force_priv_escl))
        force_priv_escl = FALSE;

      if ( isnull(channel) )
      {
        return NULL;
      }
      dbg::detailed_log(lvl:3, src:fn, msg:obj_ch_id + "In run_command");

      if( this.last_cmd_error )
      {
        session.set_error(obj_ch_id +
          'ERROR - shell is in unknown state from last interaction, ' +
          'no additional commands via this shell will be executed.');
        return NULL;
      }

      # Reset default timeouts
      this.inactivity_timeout = _HUAWEI_DEFAULT_INACTIVITY_TIMEOUT;
      this.cmd_timeout = _HUAWEI_DEFAULT_CMD_TIMEOUT;

      # If custom inactivity_timeout and cmd_timeout values are passed,
      # ensure the values in use meet or exceed passed values
      if (inactivity_timeout_min &&
          this.inactivity_timeout < inactivity_timeout_min)
        this.inactivity_timeout = inactivity_timeout_min;

      if (cmd_timeout_min &&
          this.cmd_timeout < cmd_timeout_min)
        this.cmd_timeout = cmd_timeout_min;

      if (this.fresh_shell)
      {
        if(this.cmd_prompt != _HUAWEI_DEFAULT_PROMPT)
        {
          check_prompt = TRUE;
        }
        else
        {
          var post_login_buffer = get_kb_blob(kb_base + "/post_login_buffer");
          var tmp_prompt = get_kb_blob(kb_base + "/cmd_prompt");
          dbg::detailed_log(lvl:2, src:fn, msg:obj_ch_id + "Getting prompt on fresh shell.");

          var check_prompt = FALSE;
          # see if we can look for prompt from previous login rather
          # than waiting for timeout
          if(strlen(tmp_prompt) >= 3)
          {
            # remove first found instance of prompt from previous post
            # login buffer
            var sub_prompt = substr(
                               tmp_prompt,
                               strlen(tmp_prompt) - 3,
                               strlen(tmp_prompt) - 1
                             );
            post_login_buffer -= sub_prompt;

            # if we don't find it again (e.g. in MOTD), it's probably ok
            # to look for last characters of prompt to recognize prompt
            if(sub_prompt >!< post_login_buffer)
            {
              this.cmd_prompt = tmp_prompt;
              this.settings['cmd_prompt'] = this.cmd_prompt;
              check_prompt = TRUE;
            }
          }
        }

        var initial_recv_timeout = _HUAWEI_INITIAL_INACTIVITY_TIMEOUT;

        if(check_prompt)
        {
          dbg::detailed_log(lvl:2, src:fn, msg:obj_ch_id + "Using command prompt from previous login to find cmd prompt.");
          session.sshrecv_until(
            end_states     : make_list("SOC_CLOSED"),
            check_callback : @huawei_vrp_shell_handler_incoming_data_timeout_or_prompt_cb,
            channel        : channel,
            timeout        : initial_recv_timeout
          );
        }
        else
        {
          dbg::detailed_log(lvl:2, src:fn, msg:obj_ch_id + "Waiting for inactivity period to find command prompt.");
          session.sshrecv_until(
            end_states     : make_list("SOC_CLOSED"),
            check_callback : @huawei_vrp_shell_handler_incoming_data_timeout_cb,
            channel        : channel,
            timeout        : initial_recv_timeout
          );
        }

        if(empty_or_null(channel.data_buf))
        {
          if(this.timed_out)
            return session.set_cmd_error(obj_ch_id +
              "Timed out waiting for data from server after opening shell.");

          last_cmd_error = TRUE;
          return session.set_cmd_error(obj_ch_id +
            "No data received from server after opening shell.");
        }

        if (channel.state == CHANNEL_STATE_CLOSED)
        {
          dbg::detailed_log(lvl:1, src:fn, msg:obj_ch_id + "Channel is closed.");
          return TRUE;
        }

        post_login_buffer = channel.data_buf;
        if(isnull(get_kb_item(kb_base + "/post_login_buffer")))
          set_kb_blob(name:kb_base + "/post_login_buffer", value:post_login_buffer);
        channel.clear_data_buf();
        this.fresh_shell = FALSE;
        this.timed_out = FALSE;

        lines = split(post_login_buffer, sep:'\n', keep:FALSE);
        this.cmd_prompt = lines[max_index(lines)-1];
        if('\n' >< this.cmd_prompt)
          this.cmd_prompt = str_replace(find:'\n', replace:'', string:this.cmd_prompt);

        # There will be a bunch of spaces echoed from pagination in the banner, remove all but one.
        if(_BANNER_PAGINATION_SPACES)
          this.cmd_prompt = str_replace(find:'  ', replace:'', string:this.cmd_prompt);

        if(isnull(get_kb_item(kb_base + "/cmd_prompt")))
          set_kb_blob(name:kb_base + "/cmd_prompt", value:cmd_prompt);

        dbg::detailed_log(lvl:2, src:fn, msg:obj_ch_id + 'Detected command prompt  "' + this.cmd_prompt + '".');

        if(strlen(this.cmd_prompt) == 0)
        {
          session.set_cmd_error(obj_ch_id +
            "Unable to detect command prompt on shell.");
          last_cmd_error = TRUE;
          return NULL;
        }

        this.settings['cmd_prompt'] = this.cmd_prompt;
      }

      this.cmd_last = command + '\n';
      session.reset_cmd_interrupted();

      dbg::detailed_log(lvl:1, src:fn, msg:"sending command: " + cmd_last);
      channel.clear_data_buf();
      this.last_buffer_update_ts = unixtime();
      this.cmd_state = _HUAWEI_CMD_STATE_SEND_REQ;
      dbg::detailed_log(lvl:3, src:fn, msg:obj_ch_id + "cmd_state:_HUAWEI_CMD_STATE_SEND_REQ(" + this.cmd_state + ")");
      channel.window_send_data(data:cmd_last);
      session.sshrecv_until(
        end_states     : make_list("SOC_CLOSED"),
        check_callback : @huawei_vrp_shell_handler_incoming_data_timeout_or_prompt_cb,
        channel        : channel,
        cmd_timeout    : this.cmd_timeout
      );

      var ret = NULL;

      if(channel && channel.data_buf )
      {
        ret = channel.data_buf;

        if ( this.cmd_state != _HUAWEI_CMD_STATE_AT_PROMPT )
        {
          session.set_cmd_error(obj_ch_id +
            "Unable to return to command prompt after last command.");
          this.last_cmd_error = TRUE;
          return NULL;
        }

        ret = str_replace(string:ret, find:command, replace:'');

        ret = chomp(string_reverse(chomp(string_reverse(remove_cmd_prompt(cmd_res:ret)))));
      }

      cmd_logger.add(
        cmd                : this.cmd_last,
        response           : ret,
        error              : session.cmd_error,
        user               : session.user,
        escl_user          : session.user
      );
      return ret;

      if ( this.cmd_state != _HUAWEI_CMD_STATE_AT_PROMPT )
      {
        channel.session.set_cmd_error(obj_ch_id +
          "Unable to return to command prompt after last command.");
        this.last_cmd_error = TRUE;
        return NULL;
      }

      return TRUE;
    }

    #Huawei VRP does not support privilege escalation
    #but sshlib shell handler code calls this function
    public function set_priv_escalation(type, extra)
    {
      this.settings['priv_escalation_type'] = NULL;
      this.settings['priv_escalation_extra'] = NULL;
    }

    #Huawei VRP does not support privilege escalation
    #but sshlib shell handler code calls this function
    public function unset_priv_escalation()
    {
      this.settings['priv_escalation_type'] = NULL;
      this.settings['priv_escalation_extra'] = NULL;
    }

    public function remove_cmd_prompt(cmd_res)
    {
      var tmp = '';
      var ret = cmd_res;

      var idx = stridx(cmd_res, this.cmd_prompt);
      if(idx >= 1)
        ret = substr(cmd_res, 0, idx-1);

      # remove null bytes so that it doesn't break ereg_replace
      ret = str_replace(string: ret, find:'\x00', replace:'');
      ret = ereg_replace(pattern:"([Mm]ore[^\x08\n]*)\n([^\x08\n]*\x08)", string:ret, replace:'\\1\\2');

      var line;
      foreach line (split(ret))
      {
        line = ereg_replace(
                pattern:"^ *<?--+ *\(?[Mm]ore ?([0-9]+%)?\)? *--+>?\x0d?( +\x0d)?(.*( \x08+)+|(\x0d +\x0d*)?)",
                replace:"",
                string:line);

        line = ereg_replace(pattern:"(lines [0-9]+-[0-9]+(/[0-9]+( \(END\))?)? \x0d(\x07\x0d)?)", replace:"", string:line);

        tmp  += line;
      }

      ret = tmp;

      return ret;

    }

    function at_cmd_prompt(buf)
    {
      var channel = _FCT_ANON_ARGS[0];
      var lines = split(buf, sep:'\n', keep:FALSE);
      var last_line = lines[max_index(lines)-1];
      if(this.cmd_prompt && this.cmd_prompt >< last_line)
      {
        this.set_cmd_state(
           new_cmd_state: _HUAWEI_CMD_STATE_AT_PROMPT,
           channel);
        return TRUE;
      }
    }

    public function at_prompt_or_timeout(channel)
    {
      if(at_cmd_prompt(buf:channel.data_buf, channel)) return TRUE;
      return check_inactivity_timeout(channel:channel);
    }

    public function check_inactivity_timeout(channel)
    {
      var fn = 'huawei_vrp_shell_handler.check_inactivity_timeout';
      if ( channel && channel.data_buf && strlen(channel.data_buf) > 0 )
      {
        var new_md5 = MD5( channel.data_buf );
        if ( this.last_md5 != new_md5 )
        {
          if(!isnull(channel) && !isnull(channel.session))
          {
            dbg::detailed_log(lvl:2, src:fn, msg:"New data found, updating last_buffer_update_ts");
          }
          this.last_md5 = new_md5;
          this.last_buffer_update_ts = unixtime();
          return FALSE;
        }
      }
      if (channel && (unixtime() - this.last_buffer_update_ts) >= this.inactivity_timeout)
      {
        if(channel.session)
        {
          dbg::detailed_log(lvl:1, src:fn, msg:"Inactivity timeout.");
        }
        this.timed_out = TRUE;
        return TRUE;
      }
      else if(isnull(channel))
      {
        return TRUE;
      }

      return FALSE;
    }

  }


}
