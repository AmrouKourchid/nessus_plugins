#TRUSTED a6c1ba962de570da3b950ac9e18d95930f9038eef5f7384370f368007721db27c8de81b1571f730cb562866ea49d2ee4c77b9b8418c9c8e490ef7c4d02b203ddf0043a2d4f078e7ea6cd76888c58863484ac8a1ba63b0a9b9b9ca3f05f709e7a551205dc21cb4590af594dcb116f695b70a87196a214587ca8cbe7327b284e76befb343a570f5c693f21b3fddd5c3ae9f237adebd4e8dfc9ef0559b3a5d45dde85d701059915018bc60363014aaaa6ae5ced1e9b39c95e9e5a85dce1ed9ddabe5760c5c11facc03295636aa98367bac3d909b68a9399e460ba539fa28f1384693b1df468a8d14fedf003c76d7b7f5561717689f6afe07804472738b7f8de592b5f1ea4fcd0647e55355305027c0160ca515fbfe578c28cae7efc1352472a6f96cae3343e330cdc6bc452cebf25f90955146ae38bf63c38671de67eca7baacf26f3d244ac447a76e4a470c173099fe6ff549aab74fd86ce2b4b3bbc2c948e94230012606d0abb22d5671acf877b2ae05485eb0095880a1e8488c058ce9441d4b80960f34121df643cf0c833e61ae7657550201baed2fed8441a55211d1bb3d3a630570311c02f65c6b05dc81b354a5fa374469edf13c65b5bd13caac5850a09f99d74ec153226631f8f579c366222b1c870408c75da3ba038e11fb71725b3f8f57d7ce82c18a04ddcdf7b5cd988ac0dbd321a8bc20539d9975401d18b3a68ee84
#TRUST-RSA-SHA256 571977876001536f8c06682aebfe9530487eaf80f8e28b5bed2e0f8cfa44b9978ac7268ff0850b37f84bff6a3aa073a35295e0430524b266dd51797ef1afc217beb5c3def902686fe4ddfcad922e0787a13463fd12e758f837274c9ebf0c3172f63e6f245bc155a22085805caed771f94f8acd39f93fc3154c0151453337cecaa62a8726cefdf5c23c28237275d9b59f1df066b3679ca938720edd7612b5460abb6fbcb8d7908ec1e11a1e0d6f46eface8ff5d44dccda55f1db712c1a6f23d49c2701249f792f7dc6fc6ee80732238af35c14d7d11c65132b09e41981ccaa5a3cf0a44abd43a2d8755828db6f20947f5dc80a1580502acd226811915ce71fa978c6000f1d7d4cee72cffb9d1ea97805cec06ed30c64702c2c7e117fc97d87b6493b919b98d819a012c5c451bff5fd74a10eb5be683d545426d4569062e2c0da5b3601e37db2477f3a346b7605b7df488c9d7a4eac8151e98edd1ff8b6e12476f52d2da579623f5f55ef3e745fe9064814c13874d1711bfab35b8b7e548af50ef997908eedd22c0bae1f7c8d832c1e140bf69b0d4c03ec2949fe28c0df26e80a1f5da1d260564af4849f1d374eedbf7d79c245995f1d475a5d726cc94c3318d1562ba3d3097fb0ec3f18f1abcb83b9e2667c49ef5eb47018822de3f0c7fc2c48e5aae6bba83b882af9f0815c94240af1bb0f1b2606ca93a160b126453280e9fc9
##
# (C) Tenable Network Security, Inc.

##
# Check host information for triggers that the device OS is a supported QNAP OS.
##
function is_qnap_qes()
{
  if (get_kb_item('Host/OS/QNAP/QES')) return TRUE;
  return FALSE;
}

##
# Check if the device OS is a QNAP device based on information collected
##
function qnap_qes_pre_check_fail()
{
  if(host_info_key_val['host_not_qnap_qes'])
    return TRUE;

  if(!empty_or_null(host_info_key_val['ver-a_unrecognized']) &&
     host_info_key_val['ver-a_unrecognized'] !~ qnap_qes_check['test_cmd_regex'])
    return TRUE;

  if (is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
    return TRUE;

  return FALSE;
}

##
# Runs QNAP OS assessment commands
#
# QES models either start with TES or ES
# The firmware consists of an alternative model name followed by the build number and ending with the version (up to 4 segments) 
# i.e.
#   Model: TES-1885U(QES)   Version 2.2.0  Build 20211029   Firmware: ES-SINGLE_20211029-2.2.0.0966
#   Model: TES-1885U(QES)   Version 1.1.4  Build 20190213   Firmware: ES-X85U_20190213-1.1.4
#   Model: ES1686dc v2      Version 2.2.0  Build 20230112   Firmware: ES-DUAL_20190627-2.0.0.0820 
#   Model: ES1686dc         Version 1.1.4  Build 20190213   Firmware: ES164Xdc_20190213-1.1.4
#
# @param   session              Session object associated with connection
# @param   use_shell_handler    Shell handler information for commands to be run
# @param   channel              Address of channel object associated with connection
# @param   cmd_res              The command result
#
# @return  TRUE
##
function handle_qnap_qes(session, use_shell_handler, &channel, cmd_res)
{
  set_kb_item(name:'Host/QNAP/system-version', value:cmd_res);
  var version = 'unknown';

  var model = pregmatch(pattern:"QNAP\sModel:\s*(T?ES.+?)\n", string:cmd_res);
  if (!model) return TRUE;
  model = trim(model[1]);
  set_kb_item(name:'Host/OS/QNAP/QES', value:TRUE);
  set_kb_item(name:'Host/QNAP/QES/Model', value:model);

  report += '\nQNAP OS: QES\nModel: ' + model + '\n';
  var firmware = pregmatch(pattern:"firmware:\s*rev:\s*([^\s]+)", string:cmd_res);
  if (firmware)
  {
    set_kb_item(name:'Host/QNAP/QES/Firmware', value:firmware[1]);
    report += 'Firmware: ' + firmware[1] + '\n';
    var build_ver = pregmatch(pattern:"_(\d+)-([\d.]+)", string:firmware[1]);
    if (build_ver)
    {
      report += 'Build: ' + build_ver[1] + '\n';
      set_kb_item(name:'Host/QNAP/QES/Build', value:build_ver[1]);
      version = build_ver[2];
    }
    else
    {
      dbg::detailed_log(lvl:1, src:FUNCTION_NAME, msg:'Unable to determine version and build numbers.');
    }
  }
  else
  {
    dbg::detailed_log(lvl:1, src:FUNCTION_NAME, msg:'Unable to determine the firmware.');
  }
  set_kb_item(name:'Host/QNAP/QES/Version', value:version);
  report += 'Version: ' + version + '\n';

  report += '\nOS security patch assessment checks have been enabled for QNAP QES.';
  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_qnap_qes.static', value: 94);
  return TRUE;
}

##
# Callback for systems without "QNAP\sModel:\s*T?ES" in output from "ver -a"
##
function handle_not_qnap_qes(session, use_shell_handler, &channel, cmd_res)
{
  if(use_shell_handler)
    store_shell_info();

  if(!empty_or_null(cmd_res))
  {
    # store more details for other handlers to use.
    host_info_key_val['ver-a_unrecognized'] = cmd_res;
    host_info_key_val['host_not_qnap_qes'] = TRUE;
  }
}

