#TRUSTED 1db0d07a07db4e22bb90eccf52fa4b3fe2b0bc9c8b2de6c3ec6ab60926d2943e27195091912748c6ae2d237d0cc7f1254dd685982e3a49fa9cdad76e47243e6df10f2c9661de2b29c8ef98a1627e02e2293eded92e7889d96ffa31ebc0b12f078fc1e87edf4cd23a9f9c520b7df3130f5a740e93748ca50ea40d63e765bb19dc25f3034fb354b9012dadf1eb464552c08e02dcca58b1cbce220f01f6ffbd341281eff34ee4b4347d96ab760c1813a6a1629b86995ee04684ce49a4b45d2414369297e24b54fc3255c0dff1702704a85d2b8c1742d15580eb9eef292de8ec296974334071123e7aa676987e1d36d1987e6303dd535101b4246fbaaa39c1d05b3e8bbd84eda841dda0d6ba158d701c09f0fc8a8a70089bb6144e2ab3b6c26ecb89eecc0f4554b7bf494a7a5392f96818849858c858b7795854f4acd40048d4ac268b40f2d462e4b4cff805e43f50a3a8e6459caa60c16530d25e056b16321efeb7c37a7fc0c43aff8cd720a7739c60e4ae71180b4899e55d07a2444beec68f35c5d5d39adcf586662f117dd69d175e7f110c8cd3333ce75002e256b8d3e4b8db25ce92b2322f75b5e40e0700c52d7f7e02c7c48f5c8458da60ddff2dbf3ec508a73c2ea0155a6b9c04c9f07ad38ab779cc464eddab397e1952132a7d64a27c75a22ee0602ea8ea29a791790f7b1d85b42a88bb03bff255700d1fa900329bbd8f83
#TRUST-RSA-SHA256 1eefbe0f85766f8c5069faafe49100adc7f8ef05f8c75b48940773a33c7fc6f6f619a7707506c0d57b1916d62bd7e51ed207e08cf590fca8c20228348903754b1afe447249a5a8c3ea32d6e8a2f42c0b6bc6fb9e65f3c99f02f9bf432856b9a06cbb7ae53d11256b5d9a11e86c295d0cadb78a5006c472639da89feb9243351b9170cebc783487136b7edd79fb40d4c47ccb0a5bc16fcb9c6675fb76941d9b5128fb5d701056f71e61d1047ae3688d3f25cf596652ab1106b6f5072b8c401f1963f0c2bcd0c4f167399b26d9f928167a906205219fb49588073cb079b69d7897275cde5d5b7681d8898baf842207a4b0bca5bebc7696b6b7294c427a0ff73fe358c9c4453680edf44db6fb839dcc448952e1fa890ba113797c96d26958bb7f5b1276f4b353597ec07506585cb309486aa08ecb92973f4f8ed8792f626755c16d1158ec0b12fba5ddf2b77dec040487722c826ee22768182898121cde743faea3c8122b8b7ab1b224858085d094f3c8c39bf16c2dd62b2a9fd6374992e68832e79132a11fc6daf771ce190c66b484482a5d87e27d415591ef6dd6e12b4b10ff9adde2b8eda88e52148423e90bd19ac4c393e6a957c8fe608fa7f0bf4eb214244d996941377aa5f3770b298d8a8fa7c06643367bef445996308f519b7cf47bb53920634232aba32ba95021e16286039ab91ae5230ca12835f4a1eeff6b7e30363e

# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.10


function solaris_pre_check_fail()
{
  # we've already checked that the host is not Solaris previously,
  # so don't recheck
  if(host_info_key_val['host_not_solaris'])
    return TRUE;

  # General checks that target is not Linux/UNIX
  if (not_nix()) return TRUE;

  # Not Solaris if one of the following devices
  if (is_cisco_ucos() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
    return TRUE;

  # Check uname output for errors or mismatch
  if (uname_error_or_mismatch(regex:solaris_check['test_cmd_regex']))
    return TRUE;

  return FALSE;
}

function cmd_solaris_fail_stops_enable()
{
  var cmd = _FCT_ANON_ARGS[0];
  var session = _FCT_ANON_ARGS[1];
  var use_shell_handler = _FCT_ANON_ARGS[2];
  var channel = _FCT_ANON_ARGS[3];
  var kb_target = _FCT_ANON_ARGS[4];

  if (session) session.clear_cmd_error();

  var buf = run_command(cmd:cmd,
                        session:session,
                        use_shell_handler:use_shell_handler,
                        channel:channel);

  var cmd_array = split(cmd, sep:' ', keep:FALSE);
  var base_cmd = cmd_array[0];

  if (buf) buf = chomp(buf);

  if ( empty_or_null(buf) || base_cmd >< buf || pregmatch(pattern: "usage:", string: buf, icase: TRUE))
  {
    var err_msg = session.cmd_error;
    if(!err_msg) err_msg = session.error;
    if(!err_msg) err_msg = buf;

    if (err_msg)
    {
      report +=
  'OS Security Patch Assessment is not available because of the following
  error :

  ' + err_msg;
    }
    else
    {
      failure_kb_msg = "'" + cmd + "' failed";
      failure_kb_type = lcx::ISSUES_ERROR;
      sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
      report += 'OS Security Patch Assessment is not available because the command \n\''
  + cmd + "' failed to produce any results.";
    }

    return NULL;
  }

  if (kb_target) set_kb_item(name:kb_target, value:buf);
  return buf;
}

# handles systems with SunOS 5.11 in uname
function handle_solaris11(session, use_shell_handler, &channel)
{
  local_var buf;

  if(!cmd_solaris_fail_stops_enable(
      '/usr/bin/pkg list',
      session,
      use_shell_handler,
      channel,
      'Host/Solaris11/pkg-list'
    )) return NULL;

  cmd_kb(channel:channel,
         'Host/cpu',
         'uname -p',
         session,
         use_shell_handler);

  cmd_kb(channel:channel,
         'Host/Solaris11/pkginfo',
         '/usr/bin/pkginfo',
         session,
         use_shell_handler);

  buf = run_command(cmd:'/usr/bin/pkg list -H entire',
                    session:session,
                    use_shell_handler:use_shell_handler,
                    channel:channel);

  if(buf)
  {
     buf = chomp(buf);
     if(strlen(buf) > 0)
     {
       buf = ereg_replace(string: buf, pattern: "^entire .*?([0-9.]+-[0-9.]+[0-9])", replace: "\1");
       buf = ereg_replace(string: buf, pattern: " +...\s*$", replace: "");
       set_kb_item(name: "Host/Solaris11/release", value: buf);
     }
  }
  set_kb_item(name:"Host/Solaris11/Version", value:"5.11");

  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_solaris.static', value: 133);
  if (! empty_or_null(host_info_key_val['uname-a_unrecognized'])) {
    delete_element(idx:'uname-a_unrecognized', var:host_info_key_val);
  }

  report += '\nOS Security Patch Assessment is available for Solaris 11.';

  return found_solaris(session:session, use_shell_handler:use_shell_handler, channel:channel);
}

# callback for systems with "SunOS" in uname
function handle_solaris(session, use_shell_handler, &channel, cmd_res)
{
  local_var buf, showrev_result, err_msg, prev, array, new_array, i, tmp, line, pkg, version;

  if (empty_or_null(host_info_key_val['uname-a_reported'])) {
    report += '\nThe output of "uname -a" is :\n' + cmd_res;
    host_info_key_val['uname-a_reported'] = TRUE;
  }

  replace_kb_item(name:"Host/uname", value:cmd_res);

  sshlib::set_support_level(level: sshlib::SSH_LIB_SUPPORTS_COMMANDS);
  report += '\nLocal checks have been enabled for Solaris 11.';

  if(cmd_res =~ "SunOS .* 5\.11 ")
    return handle_solaris11(session:session, use_shell_handler:use_shell_handler, channel:channel);

  #Handle Solaris prior to 5.11
  if (session) session.clear_cmd_error();

  showrev_result = run_command(cmd:'/usr/bin/showrev -a',
                               session:session,
                               use_shell_handler:use_shell_handler,
                               channel:channel);

  if(!showrev_result || !pgrep(pattern:"^Patch:", string: showrev_result))
  {
     showrev_result= cmd_solaris_fail_stops_enable(
          '/usr/sbin/patchadd -p',
          session,
          use_shell_handler,
          channel
        );

     if(!showrev_result) return NULL;
  }

  buf = cmd_solaris_fail_stops_enable(
          '/usr/bin/pkginfo -x',
          session,
          use_shell_handler,
          channel,
          'Host/Solaris/pkginfo'
        );

  if (!buf) return FALSE;

  set_kb_item(name:"Host/Solaris/showrev", value:showrev_result);

  showrev_result = pgrep(pattern:"^Release: ", string:showrev_result);
  showrev_result -= "Release: ";
  set_kb_item(name:"Host/Solaris/Version", value:showrev_result);

  # Parse the output of 'pkginfo -x'
  prev = NULL;
  array = make_list();
  new_array = split(buf, sep:'\n', keep:FALSE);

  for (i=0; i<max_index(new_array); i++)
  {
    if (i % 2)
      array = make_list(array, prev + " " + new_array[i]);
    else
    {
      tmp = new_array[i];
      prev = ereg_replace(pattern:"^([^ ]+) .*$", replace:"\1", string:tmp);
    }
  }

  # Save the package info
  foreach line ( array )
  {
    pkg = ereg_replace(pattern:"^([^      ]*).*", replace:"\1", string:line);
    version = ereg_replace(pattern:"^" + pkg + " *\([^)]*\) (.*)", replace:"\1", string:line);
    set_kb_item(name:"Solaris/Packages/Versions/" + pkg, value:version);
  }


  report += '\nOS Security Patch Assessment is available for Solaris 11.';
  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_solaris.static', value: 224);
  if (! empty_or_null(host_info_key_val['uname-a_unrecognized'])) {
    delete_element(idx:'uname-a_unrecognized', var:host_info_key_val);
  }

  return found_solaris(session:session, use_shell_handler:use_shell_handler, channel:channel);
}

function found_solaris(session, use_shell_handler, &channel)
{
  # misc_calls_and_exit() commands
  cmd_kb(channel:channel,
         'Host/NSM/guiSvr/version_src',
         '/etc/init.d/guiSvr version',
         session,
         use_shell_handler);

  cmd_kb(channel:channel,
         'Host/NSM/devSvr/version_src',
         '/etc/init.d/devSvr version',
         session,
         use_shell_handler);

  cmd_kb(channel:channel,
         'Host/ifconfig',
         '/sbin/ifconfig -a',
         session,
         use_shell_handler);

  if (agent())
  {
    var ip_addr = agent_get_ip();
    if (!isnull(ip_addr))
      report_xml_tag(tag:"host-ip", value:ip_addr);
  }

  cmd_kb(channel:channel,
         'Host/hostname',
         '/bin/hostname',
         session,
         use_shell_handler);

  cmd_kb(channel:channel,
         'Host/last_reboot',
         '/usr/bin/last reboot 2>/dev/null',
         session,
         use_shell_handler);

  cmd_kb(channel:channel,
         'Host/uname-r',
         'uname -r',
         session,
         use_shell_handler);

  return NULL;
}

function handle_not_solaris(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  store_and_report_uname(cmd_res:cmd_res, session:session,
                         use_shell_handler:use_shell_handler);
  host_info_key_val['host_not_solaris'] = TRUE;
}
