#TRUSTED 16f4a8c72555c90124405fdacd81cb3b306432d98fe06239942dd902446e83d797ad23793c7533aa205ff4acbfe0830867ddc5ef888b1e9d4855fb4e3d0322aaa9c4e05c90cfd8000c5b58b1800b170c58c0f77f9aec542a934f84f149cee1f1319cc691dc4b89c00042ef92ab06e557bc67f91fcab026c8017ab6e8791dfd6028706bc6673a41117d6915ff874cd5e4afc08126b8d58b6f4b9ab8b631a6098b50b1553e22acf5149f5ff5c2bc2cb1ea76468034414b9780e0624c27c26558a0c2c80d4675ccffd74a9bf58438e6cc62c995a9af07526d287c34ac817c11daada8c1d8d6325c63e72830b1b3de97cea5ed95dede273b0804568ae513db05922f9f05b9d2c54e2b6cf0a141f47a6e07774e14541eecc949a5d0b7e8193a06a6a4fe7f88303059dfbd67728ffeab35d58ca147fd43d7f2de8ee740d9bd83c1c72db3ee8ff60b4b1b3d7160a794887f377725bdc4a8f3c0079d2288246a40b48b662f26ef564a5c99ba5f032205f27cf0efa284eea8f02f8a8be0598fa6a1eca1e2965715dc7f8aa20354923586305f169c8ac1906598aefc931f4ae6273255b99f8c11ab72adbfd7c913c2fb3cb4f675e8f3e5236133d161ee6bfaf3cdb3d7dcd385088e51a31b0e41fe01f62be67a0c06ad1a16f6c5df8b4f2f82b896bcd645afc32afdcb78cd7bcdf383fc69bb46be09e7a4c66c2973f9aa613c85c97ac6400a
#TRUST-RSA-SHA256 672d208c9631f4cd7744fcc1a91188991bd0ec99977b0702c28c150fbe1407c910cc6d7611fdd86b4b3ee05d28172be6e4d3e769f178d2368d70802acdcf5d3b60905c96b4d72d2c264488564f66d85384925df6f65e276e5a7a5df5aac4f316a45132fddd037885058d03bf5f562a7ede7e3ede3a347c885e3edeea96626d5931823be7e32ca914140f335aed1a7b9597048a6a15c223d847fc5b9de02f1ab70ca2bd4149b76a3a55bb83d09327bfe198cf8e9595520e490850137ba7407a4bb4756810d4ee9e5ae3a7c8816a5ca35d4afe863af66590588967a73a59d1b2682988db2ac6aeed8338f76b8100434a45404f39f687d6b6c11537cf9c0a7e34f61f95ad9865aa3ad6188fdee903309b226374be0ae6a14fcd4fb807c8f0d05c7f9fb2b10b04bc0dcbad8ba5d6fa2dcdd0b2e64fc9fe71a3fe5a01844339af719770e6a26eb56911d717fffc56e03fc7840863a70b941ffd4686ae669038f92c0553f70643965084ad0cd46726f58f33644db38845f01e427f1bf3d5484445befbdd569da2f5fe91bb9a1ae294b84f9bcf9881bbd2ea53bb76824cb467470ea8696a5b8e52f1d817dd27a27b2769b59e75743b3761ae2f159290409ca0abe2d91ab486e2a788d6e3f35a68cbc42da21fc183628e589bddc7112f47926dc78e5acd4d6fada0868de489ab83b0f2b1ee988e9b0a4a5efc4863de0eab1ef87f1bd38e

# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.12

#
# cisco_ips_pre_check_fail
# check if this is a cisco_ips device based on information collected
#
function cisco_ips_pre_check_fail()
{
  # have we already checked that the host is not cisco_ips?
  if(host_info_key_val['host_not_cisco_ips'])
    return TRUE;
  if(!empty_or_null(host_info_key_val['showversion_unrecognized']) &&
     host_info_key_val['showversion_unrecognized'] !~ cisco_ips_check['test_cmd_regex'])
    return TRUE;

  # Not Cisco Intrusion Prevention Service if one of the following devices
  if (is_cisco_firepower() ||
      is_cisco_ssh() ||
      is_cisco_nxos() ||
      is_timos_userauth() ||
      is_cisco_ucos() ||
      is_huawei() ||
      is_panos() ||
      is_acos() ||
      is_adtran() ||
      is_asyncos() ||
      is_staros() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

#
# callback for systems with "Cisco Intrusion Prevention System Software," in show version
#
function handle_cisco_ips(session, use_shell_handler, &channel, cmd_res)
{
  var cisco_ips_version_match, version;

  #Local checks just means we can run commands on the target host.
  report += '\nLocal checks have been enabled for this host.';

  replace_kb_item(name:"Host/Cisco/show_ver", value:cmd_res);
  replace_kb_item(name:"Host/Cisco/IPS", value:TRUE);

  cisco_ips_version_match = pregmatch(pattern:"\nCisco Intrusion Prevention System, Version ([^\s]+)[\s]",
                                      string:cmd_res, icase:TRUE);

  if(!isnull(cisco_ips_version_match))
  {
    if(!isnull(cisco_ips_version_match[1]))
      version = cisco_ips_version_match[1];
    else
      version = "UNKNOWN";

    report += '\nThe remote system is Cisco Intrusion Prevention System, Version ' + version;
  }

  if(isnull(cisco_ips_version_match) || version == 'UNKNOWN')
  {
    var failure_kb_msg = 'The remote host appears to be running Cisco Intrusion Prevention System.\n' +
                         'However, we were unable to parse the OS version from the output of running\n' +
                         'the "show version" command.';

    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_UNAVAILABLE);
    return TRUE;
  }

  var buf = run_command(cmd:"show privilege",
                        session:session,
                        use_shell_handler:use_shell_handler,
                        channel:channel,
                        force_priv_escl:FALSE);

  if(buf && "current privilege level" >< tolower(buf))
  {
    var priv = pregmatch(pattern:"current privilege level is (administrator|operator|viewer)", string:buf, icase:TRUE);
    if(!isnull(priv) && !isnull(priv[1]))
    {
      var privval = 1;

      #Translate Cisco IPS privilege levels into regular Cisco values (1-15)
      if(tolower(priv[1]) == "administrator")
        privval = 15;

      replace_kb_item(name:"Host/Cisco/show_privilege", value:privval);
    }
  }

  report += '\nOS Security Patch Assessment is available for Cisco Intrusion Prevention System.\n';
  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_cisco_ips.static', value: 111);

  replace_kb_item(name:"Host/OS/showver", value:"Cisco Intrusion Prevention System " + version);
  replace_kb_item(name:"Host/OS/showver/Confidence", value:100);
  replace_kb_item(name:"Host/OS/showver/Type", value:"embedded");
}

#
# callback for systems without "Cisco Intrusion Pre..." in show version
#
function handle_not_cisco_ips(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/showversion", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['showversion_unrecognized'] = cmd_res;
    host_info_key_val['host_not_cisco_ips'] = TRUE;
  }
}
