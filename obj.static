#TRUSTED 8b537c8e6080b8db4480ffc0d5d2146436af3312dc67df1fd0f44f2ae4bc5d67e214c24e9021b2f3afa96e02e079f94571a7c46ac937714188872a4e494290936052ec7d409590cc09d9f731e1a99c7dc9f10443301f2f7699b4cb4e6efc379da6322d43579ec48370308a72d3f3d2960bf2725485ff21dcca7246ce4c6d65a9d98acf1f9a1cc92234df8a1c7b1558c3e462a5c35350a74771b28bc831325c67a7a15973ad30af0940a37bbfb31abbc385b165aa69055556ca5d45cf6be7ebb584fa85208396df2995192e9307ca881494934e9b601d8af5e17399882c5db3d7ad53d6317c46ec50a0e07399951e6413cba2cee1f396cc42986f37ba48baa8bb30b973afa744f700620582e151fbbc2225f35cb1652ad1234a0a7d5faf91c8953b7370f8da24960782b4c7ae5fb07a0821d727fdda24ced2034bfe3a624ce852b9bde920848426ef847714a2709cb3e110b4c792f2599a6eaa649883972da7a9868024a7a63d100acc8bced083444fc65c20303dc0592b0fcb36979ffed0d18e6cf5843617607063b4667088d80e9ec26a07c6bfd23764b5b52a0acfbe012fc9414deb3881aee49a5f69578a4ce3908f6c112c69c643034e4856650783a9e8a84108ba963f22a8db994d0b42153942dfe2a856bfa6d637db658c4433c310f77d15c63680cc28a4238f7b9771384da8d8da7313636407f779c23331d8e89164ba
#TRUST-RSA-SHA256 94da123aa9b53f01b1957cf84a899f388efecb6d83aa2111f88e2a3ab9db46bbf267f32bd0071d5d9b94ba89731d87b6e7146df20135d28ab3b1a94603a91491c79f6ceb436d050fee780a1867564499aded33261456b3d46d20e729e6928fb915e707537f875888a15c1e6bf2c8d20dc0e606e5d3629ab03e548648fa2ed4ed382bb394b297a9024f020e2919abc9afb03b2684563c81b4bc1c5a8d24b52471e043f3f5c07ae1a365ff3fe972b3ccd434a0b06791755300e575cf2b72142bf9ac1cfa2aa3f4452fcd8423c4f1420d024ef1dcf85459a17fac3f2adb19a60bc8c375dc6844f808f4e4ea53180bf82f2969b326dda2954b5e15916df410f0f77e855e6a0efecb66af07c9599bd888a02f4bd6280386ba097f94d93798fef7c69dbeaf37a3461f551459e0dfcc2d477a5482241ece4f3f101678339fd45f2dbe8867491e917224951f4a5b6f70b63cf80fc86a0c4ed1b09f12129929db7601b56aa64f5482aa7e7caf1695659cac9e990d760ad78f90834157f80d2fcf97859f32a173365ae560408322c83979dbcd0d93d21f42b41fba5185d80183c2500d7bd6c91ccf3bfdb79875d1778287257cb50ef63009069136e1b46ec9b53d22c293a2a8b80cdac0572d03917c45269239391acdf0d74ba9f0330c94c2dc742e76a7c5eab77cee5a2852b545c51b84ad45aa7c230a6512da0cf9f21ee07e92ff9f8f41
###
# Functions to interact with basic structures of NASL code.
#
# @license
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security, Inc.
#
# @NOGPL@
#
# @library obj.inc
#
# Revision: 1.10
###

######################################################################
# Private Comparison Functions
######################################################################

##
# Compares two NASL arrays.
#
# @anonparam [a:array] First array to be compared.
# @anonparam [b:array] Second array to be compared.
#
# @return [boolean] TRUE if both arrays contain the same data, FALSE otherwise.
##
function _obj_cmp_array()
{
  var a, b, key_a, key_b, keys_a, keys_b;

  a = _FCT_ANON_ARGS[0];
  b = _FCT_ANON_ARGS[1];

  # Get the list of keys for both arrays.
  keys_a = keys(a);
  keys_b = keys(b);

  # Ensure both arrays have the same number of keys. This prevents us
  # from having to worry about keys in array b that don't exist in
  # array a.
  if (max_index(keys_a) != max_index(keys_b))
    return FALSE;

  # Compare the pairs in both arrays.
  foreach key_a (keys_a)
  {
    # Since you can store NULLs in an array and keys() will return the
    # keys they're stored at, we can't just index the array and check
    # for NULL to determine whether the key exists.
    foreach key_b (keys_b)
    {
      # Ensure array b has this key. When a NASL object is used as a
      # key, it is cast to an object of type "data". This means that
      # we can compare keys directly.
      if (key_a == key_b)
        break;
    }

    # If these keys aren't the same, array a contains a key that
    # array b doesn't.
    if (key_a != key_b)
      return FALSE;

    # Compare the values of the keys.
    if (!_obj_cmp(a[key_a], b[key_b]))
      return FALSE;
  }

  return TRUE;
}

##
# Compares two NASL objects.
#
# @anonparam [a:any] First object to be compared.
# @anonparam [b:any] Second object to be compared.
#
# @return [boolean] TRUE if both objects contain the same data, FALSE otherwise.
##
function _obj_cmp()
{
  var a, b, type_a, type_b;

  a = _FCT_ANON_ARGS[0];
  b = _FCT_ANON_ARGS[1];

  # Both objects must be of the same type.
  type_a = typeof(a);
  type_b = typeof(b);
  if (type_a != type_b)
    return FALSE;

  # This type represents both integers and the constants TRUE and
  # FALSE.
  if (type_a == "int")
    return (a == b);

  # This type represents unsigned integers.
  if (type_a == "uint")
    return (a == b);

  # This type represents double-quoted strings.
  if (type_a == "string")
    return (a == b);

  # This type represents single-quoted strings.
  if (type_a == "data")
    return (a == b);

  # This type represents both the constant NULL and undefined
  # variables.
  if (type_a == "undef")
    return TRUE;

  # This type represents both arrays and lists, since the latter is
  # implemented as the former.
  if (type_a == "array")
    return _obj_cmp_array(a, b);

  # This type represents custom objects which are basically just
  # arrays with extra syntactic sugar.
  if (type_a == "object")
    return _obj_cmp_array(a, b);

  # This type represents booleans.
  if (type_a == "boolean")
    return (a == b);

  # Unsupported data type.
  return FALSE;
}

######################################################################
# Private Random Functions
######################################################################

##
# Generates a random NASL string object.
#
# @param [max_chars:integer] The maximum number of characters in the string object.
#
# @remark
# The generated string object will contain only printable ASCII.
#
# @return [string] A randomly generated string object.
##
function _obj_random_string(max_chars)
{
  var ascii, i, len, s;

  # Randomly determine the number of bytes to generate.
  len = rand() % max_chars;

  # We cannot generate strings from numbers, since the only builtin
  # functions for that produce data, not string, objects. This
  # limitation forces the use of a literal list.
  #
  # Additionally, the below list is missing the double-quote
  # character, since there is *no* way to add this to a string object
  # without it becoming a data object.
  ascii = make_list(
    "!", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".",
    "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";",
    "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H",
    "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U",
    "V", "W", "X", "Y", "Z", "[", "\", "]", "^", "_", "`", "a", "b",
    "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o",
    "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "{", "|",
    "}", "~"
  );

  s = "";
  for (i = 0; i < max_chars; i++)
    s += ascii[rand() % max_index(ascii)];

  return s;
}

##
# Generates a random NASL data object.
#
# @param [max_chars:integer] The maximum number of characters in the data object.
#
# @return [data] A randomly generated data object.
#
# @remark
# The generated data object may contain any 8-bit value.
##
function _obj_random_data(max_chars)
{
  var i, len, s;

  # Randomly determine the number of bytes to generate.
  len = rand() % max_chars;

  s = "";
  for (i = 0; i < len; i++)
    s += raw_string((rand() % 255) + 1);

  return s;
}

##
# Generates a random NASL array object.
#
# @param [int_keys:boolean]  Determines whether generated keys must be integers
#                            (i.e. a list will be generated) (optional, defaults to FALSE).
# @param [max_chars:integer] The maximum number of characters in any string.
# @param [max_depth:integer] The maximum depth of the data structure.
# @param [max_keys:integer]  The maximum number of keys at any level of the data structure.
#
# @return [array|list] A randomly generated array object (or list if ``int_keys`` is TRUE).
##
function _obj_random_array(int_keys, max_chars, max_depth, max_keys)
{
  var ds, i, len, key, val;

  # Randomly determine the number of keys to generate.
  len = rand() % max_keys;

  # Initialize the data structure.
  if (int_keys)
    ds = make_list();
  else
    ds = make_array();

  # Populate the data structure.
  for (i = 0; i < len; i++)
  {
    # Keys are data objects for arrays, and integer objects (that are
    # cast to data objects) for lists. Note that there is a chance of
    # a random key being generated twice, especially with low values
    # of max_chars.
    if (int_keys)
      key = i;
    else
      key = _obj_random_data(max_chars:max_chars);

    # Values in arrays and lists can be anything.
    val = obj_random(
      max_chars : max_chars,
      max_depth : max_depth - 1,
      max_keys  : max_keys
    );

    ds[key] = val;
  }

  return ds;
}

######################################################################
# Public Functions
######################################################################

##
# Compares any number of NASL objects.
#
# @anonparam [obj1:any] First object to be compared.
# @anonparam [obj2:any] Second object to be compared.
#
# @return [boolean] TRUE if all objects contain the same data, FALSE otherwise.
#
# @remark
# This function accepts any number of objects beyond the first two,
# and they will **all** be compared to the ``obj1`` object.
##
function obj_cmp()
{
  var i, len;

  # Get the number of objects passed.
  len = max_index(_FCT_ANON_ARGS);

  # Compare the first object to all other objects.
  for (i = 1; i < len; i++)
  {
    if (!_obj_cmp(_FCT_ANON_ARGS[0], _FCT_ANON_ARGS[i]))
      return FALSE;
  }

  return TRUE;
}

##
# Produces a random NASL data structure.
#
# @param [max_chars:integer] The maximum number of characters in any string
#                            (optional, defaults to random under 255).
# @param [max_depth:integer] The maximum depth of the data structure
#                            (optional, defaults to random under 11).
# @param [max_keys:integer]  The maximum number of keys at any level of the data structure
#                            (optional, default to random under 11).
#
# @return [any] A NASL random generated data structure.
##
function obj_random(max_chars, max_depth, max_keys)
{
  var type, types;

  # Pick a random maximum number of characters if none was specified,
  # or an invalid value was given.
  if (isnull(max_chars) || max_chars < 0)
    max_chars = (rand() % 256);

  # Pick a random maximum depth if none was specified, or an invalid
  # value was given.
  if (isnull(max_depth) || max_depth <= 0)
    max_depth = (rand() % 10) + 1;

  # Pick a random maximum number of keys if none was specified, or an
  # invalid value was given.
  if (isnull(max_keys) || max_keys <= 0)
    max_keys = (rand() % 10) + 1;

  # Pick a random data type for this level of the structure. This has
  # a 2/3 chance of each level being the last.
  types = make_list("data", "int", "string", "uint", "undef");
  if (max_depth > 2)
    types = make_list(types, "array", "list");
  type = types[rand() % max_index(types)];

  if (type == "int")
    return rand();

  if (type == "uint")
    return uint(rand());

  if (type == "string")
    return _obj_random_string(max_chars:max_chars);

  if (type == "data")
    return _obj_random_data(max_chars:max_chars);

  if (type == "undef")
    return NULL;

  if (type == "list")
    return _obj_random_array(
      max_chars : max_chars,
      max_depth : max_depth - 1,
      max_keys  : max_keys,
      int_keys  : TRUE
    );

  if (type == "array")
    return _obj_random_array(
      max_chars : max_chars,
      max_depth : max_depth - 1,
      max_keys  : max_keys,
      int_keys  : FALSE
    );
}

##
# Convert data structure into a string of NASL code.
#
# @anonparam [ds:any]       Data structure to be converted.
#
# @param [indent:string]    String to be used for as indentation (optional, defaults to 2 spaces).
# @param [depth:integer]    Current depth of recursion (optional, defaults to 1).
# @param [prettify:boolean] Boolean to represent lists and arrays with brackets instead of functions
#                           (optional, defaults to FALSE).
#
# @return [string] A string representing the data structure.
#
# @remark
# If the type of the data structure given in ``ds`` is unknown, the string ``<unknown>`` will be returned.
##
function obj_rep(depth, indent, prettify)
{
  var ch, ds, escs, i, idxs, key, len, max, n, prefix, str, type, val, close, sep;

  if (isnull(depth))
    depth = 1;

  if (isnull(indent))
    indent = "  ";

  if (isnull(prettify))
    prettify = FALSE;

  len = strlen(indent);

  ds = _FCT_ANON_ARGS[0];
  type = typeof(ds);

  # This type represents NASL objects
  # member functions will not be returned
  # data members are public and will be returned in a random order
  # data member lists and arrays will be represented like:
  # -- object:foo, data members:{"foos_list":["e","f","g"],"foos_array":{"d":54,"c":52},"foos_var":42}
  # nested objects are returned like so:
  # -- Example: object foo with nested object bar
  # -- obj_rep(my_foo) ==> 'object:foo, data members:{"bar_obj":{"bar_objs_var":31337},"foos_var":42}'
  # objects using inheritance are returned like so:
  # -- Example: object foobar which extends object bar
  # -- obj_rep(my_foobar) ==> 'object:foobar, data members:{"foobars_var":20,"bars_var":31337}'
  if (type == "object")
    return '{"' + type + '": "' + typeof_ex(ds) + '", "data members":' + string(serialize(ds)) + '}';

  # This type represents both integers and the constants TRUE and
  # FALSE.
  if (type == "int")
    return ds;

  # This type represents unsigned integers.
  if (type == "uint")
    return 'uint(' + string(uint(ds)) + ')';

  # This type represents double-quoted strings.
  if (type == "string")
    return '"' + ds + '"';

  if (type == "boolean")
    return string(ds);

  # This type represents single-quoted strings.
  if (type == "data")
  {
    escs = make_array(
      '\0', '\\0',
      '\'', '\\\'',
      '\\', '\\\\',
      '\n', '\\n',
      '\r', '\\r',
      '\t', '\\t'
    );

    val = "";
    max = strlen(ds);

    for (i = 0; i < max; i++)
    {
      key = ds[i];
      ch = escs[key];

      if (isnull(ch))
      {
        n = ord(key);
        if (n < 0x20 || n > 0x7E)
        {
          ch = toupper(hex(n));
          ch[0] = "\";
          ch[1] = "x";
        }
        else
        {
          ch = key;
        }
      }

      val += ch;
    }

    return "'" + val + "'";
  }

  # This type represents both the constant NULL and undefined
  # variables.
  if (type == "undef")
    return "NULL";

  # This type represents both arrays and lists, since the latter is
  # implemented as the former.
  if (type == "array")
  {
    if (is_list(ds))
      type = "list";

    str = "";
    prefix = crap(data:indent, length:depth * len);
    close = ")";
    sep = ", ";

    # Create the representation of the object.
    if (prettify && type == "array")
    {
      str += "{";
      close = "}";
      sep = ": ";
    }
    else if (prettify && type == "list")
    {
      str += "[";
      close = "]";
    }
    else
    {
      str += "make_nested_" + type + "(";
    }

    # Extract the keys and see how many we're dealing with.
    if (type == "array")
    {
      idxs = numsort(keys(ds));
      max = max_index(idxs);
    }
    else
    {
      max = max_index(ds);
    }

    # Use compressed representation if the object is empty.
    if (max == 0)
      return str + close;

    # Create the representation of the object's contents.
    for (i = 0; i < max; i++)
    {
      # Finish off the previous line appropriately.
      if (i > 0)
        str += ",";
      str += '\n' + prefix;

      # Extract the key-value pair.
      if (type == "array")
        key = idxs[i];
      else
        key = i;
      val = ds[key];

      # Add in the key for arrays.
      if (type == "array")
        str += obj_rep(key, depth:depth + 1, indent:indent, prettify:prettify) + sep;

      # Add the value for both lists and arrays.
      str += obj_rep(val, depth:depth + 1, indent:indent, prettify:prettify);
    }

    # Close the representation of the object.
    str += '\n' + crap(data:indent, length:(depth - 1) * len) + close;

    return str;
  }

  # Unsupported data type.
  return "<unknown>";
}

##
# Checks if the given values is in the given list.
#
# @param [list:list] The list to search through.
# @param [item:any]  The item to look for.
#
# @return [boolean] TRUE if an item exists in list, FALSE otherwise.
#
# @remark
# Supports all data types supported by `obj_cmp()`_.
##
function obj_in_list(list, item)
{
  var candidate;

  foreach candidate (list)
  {
    if (obj_cmp(candidate, item))
      return TRUE;
  }

  return FALSE;
}
