#TRUSTED 62aeb0a4380eababe1c844e4efeef552e90a0e16e22bbf68ec605eb06f3c7de8e6c0e70783e30f64a2e7e6f043dbd1c25ae2168d979ea54fc1b687910bb7beeffead8a7f7c8a445dd15815de69f16c34f5f7a26f79604819d4a4ddfe09c8f81fda08ad9f69c2dd385afd538abecae081bcfcf054b4113627df0e6ca5d21d3e5fc7ede41404ef625f20f56cc83828470e13c55dc3bfcf7f7e2ef1eca571c5fd4e7f906392d9b32accf63b94668eee8802f66cb0d34a46ecf4431ab5974b076f59c946e8418344eeabe62f60796bfe1ad73fb5a116f543a31e55133f89488065d4d86f53c78e406920528f2a4517a26439e67f22f0965758d9b25b6bf6bf17b78faccb12d1484e032e1e97e3d07df774672f28b5ecdeefdf59b4f3eb3859d0889a23a276c8124a5ccfa2eab02efa78559b60209a0f101c7ab2ede643c8ae4e0e42ea31a10d87adbdc08df3dc472a39073166cdbbaacc43a3eafb81cea51c29be0b8643aa0ab4eb570714b2182f9f756f52f94b4325faa2ac35a015be17065113c9c984296146e4519dfb177edb7dc072b627e8368cec9ed114739ea74b2051c7b48c28b72374a212c703b2a7f00c7e71906d197732c0cf5db91e0c9dac0ec6a2328e69baf00c180401b91cb81ce4089e3a5b40c14920a565dccc44daab9241544fbd02e3232e58c0be9032bbf353419289765a3cb594a279fd8c90b81d0e0679c6
#TRUST-RSA-SHA256 86717ae33daafe999076657bc263b7a6a2470ad260f36da0bcfcaa1ddb1498a41fce0f68daf296fd2626155024eb284f0dc6c9303ffc1b98b92b108676fcb793ae9a988fd68416ec653dc874bd2008e57616a8bf0f186329b3e7f090262ab5c52897b438a2b0d4f9957e50bdb5767af4fb861d15cd16a246e3588d897a707c973b8cffe34438e249f79e6013fd90f0db1a9d0c65149082e1749d39cfd68cfa5105d431c05bfa8a107028883aaab4430cd31b5f5b718bdc8003bea7e04f97bc6e4cddd83cc503dc8c9132e335c1a934a09d5355b66cdbdcc83ff00dc41f7f39f9d635855d4db5246e51e470d501e36829e9b20712f9f51e08a3280fad37da3a3279322e84722f84e11fc3b8f11820ab1a46566e4f9e8c6f6bc0a5448926b7108819c8c29929cf66cb43b12b8bc95aeb5c4258690dba01c9ac1c1fccc0f3462700f48dd5ae6167f302e9417d4ea7bf1334271fedbde6c926b1a617fa651ba96c301c531f09295cee6fca5cd7756a6324144466988e6f734b9c46ebe1385cb7c3f30d4add9915bad39149f4a9f8d49bb9a4a5b95a1f6d832666b0bd9f10d6880f5448a7f1f94c3212eb648565743d56ee55ecde5f2e90b049777b806f3db2636a79daaf993e6d75aa7b87bd3f2de0c8b36683f7460553769020d1e9083e74c5b587f7d0bfc657d309189b1250963cda005209c2689b49239c69529342f3d204f050
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.11


#
# Check host information for triggers that the device is most likely supported
# by this file.
#
function is_adtran()
{
  if("ADTRAN, Inc." >< host_info_key_val['post_login_buffer'])
  {
    dbg::detailed_log(lvl:1, src:'is_adtran()', msg:'Post login buffer contains "ADTRAN, Inc.".');
    return TRUE;
  }

  return FALSE;
}

function adtran_pre_check_fail()
{
  # have we already checked that the host is not adtran?
  if(host_info_key_val['host_not_adtran'])
  {
    # already checked that host is not adtran, no need to check again
    return TRUE;
  }

  if(!empty_or_null(host_info_key_val['showversion_unrecognized']) &&
     host_info_key_val['showversion_unrecognized'] !~ "ADTRAN, Inc.")
    return TRUE;

  # Not ADTRAN if one of the following devices
  if (is_cisco_firepower() ||
      is_cisco_ssh() ||
      is_timos_userauth() ||
      is_cisco_ucos() ||
      is_huawei() ||
      is_panos() ||
      is_cisco_nxos() ||
      is_acos() ||
      is_asyncos() ||
      is_staros() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

function save_adtran_fingerprint(os, type)
{
  report += '\nLocal checks have been enabled for ' + os + '.\n';

  replace_kb_item(name:"Host/OS/showver", value:os);
  replace_kb_item(name:"Host/OS/showver/Confidence", value:100);
  replace_kb_item(name:"Host/OS/showver/Type", value:type);
}

function handle_adtran(session, use_shell_handler, &channel, cmd_res)
{
  var testing = _FCT_ANON_ARGS[0];

  var os = "ADTRAN, Inc. OS";
  var device_type = "embedded";

  if ("Platform: NetVanta" >< cmd_res)
    device_type = "router";

  replace_kb_item(name:"Host/ADTRAN/show_version", value:cmd_res);

  var ver = pregmatch(pattern:"^ADTRAN, Inc\. OS version ([A-Z0-9][0-9.]+)[\r\n]", string:cmd_res);
  if(isnull(ver) || isnull(ver[1]))
  {
    save_adtran_fingerprint(os:os, type:device_type);

    var err_msg = '\nHowever, we could not detect the version from the output of "show version".';
    failure_kb_msg = "Could not parse ADTRAN version from 'show version' output.";
    failure_kb_type = lcx::ISSUES_INFO;
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    report += err_msg;

    return TRUE;
  }

  os += ' ' + ver[1];

  # Collect time of last reboot.
  if (cmd_res && " uptime is " >< cmd_res)
  {
    foreach var line (split(cmd_res, keep:FALSE))
    {
      if (preg(pattern:" uptime is [0-9]", string:line))
      {
        set_kb_item(name:"Host/last_reboot", value:line);
        break;
      }
    }
  }

  sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_UNAVAILABLE);
  save_adtran_fingerprint(os:os, type:device_type);

  report += '\n' + 'Nessus was able to run commands in support of OS' +
            '\n' + 'fingerprinting.' +
            '\n';
}

function handle_not_adtran(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  host_info_key_val['host_not_adtran'] = TRUE;
  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/showversion", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['showversion_unrecognized'] = cmd_res;
  }
}

