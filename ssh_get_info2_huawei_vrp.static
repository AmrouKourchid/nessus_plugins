#TRUSTED 4a02c3706b1559624250bb2277e0109d97061dc17c6f5a843520a7ac7cfcfad9b1df5fafb705406d5439c645b51952118d2bb380644026fdb07bde7d94b4e34e6771efbb6c880b3c3786f0be9cc0a8375f2e21f084183cce2c536c93b0d7a6bbc0ccd92c8d78b476607bfb42ad1ecc0ca476a1d6d2e0506a291ff0ae86cf70831281443e66baadec1ee56549a85cdc5e4c4995151533ba03db0627090473b8074f14385a199789cb673bca7a1854874ae330160eaa3d15c2740e34eb35d27e445d38fb58689f043e3550c2464dcf5566134edddd1a08762a17f63aa624b7c823be75be5fa69e06f2e2ad6a87056b44b53c9648466b5247f507022d7b1d44f0c080f966a83553f1435cdd177cc00d67e4793560d0dbe314cb9c0e105ee44b2f6d5fe6f7387319b6c3269c066f655da480faad1dcd591ee233b6b7ce6d8b0d99a4a10db0fbbd473ff5318a95b2aa9b9c4e4e27e6d5038b6cd3a6d481cb5134441ccfc8811896a4c5cbffa58dee4c26b0c1ce6a18f4a951e8c87413a2c84b4bde6a51de2fe25333d6e351bf928a328a5a54737b1a51d2a57fc540951b377be149864220fed6053633da7e3dc6d181764ca04734347870cbb097eb82a22042523acd26e455d8ce3319474af0ca94652709741747873a07493f282988b49a2e7fc83615352a021613b3320214d184b1232a52ac5b930cd5ce24ff2b34465f162aab17
#TRUST-RSA-SHA256 1ed0e15dfcbcd840c194caf1ef3ed017dd6688135c8946d861d2be5b8f9fb3168107fd70a3065595c7bfea5cd3de866e2907a03599010b901faa699fd3014c136465ea77ece3cc0992df262da8b640bafb9c43286eca82d29c24abec758f86f4f0a280837b05d2dd2fbba2aab68f1463f58e9263c1911c052e649967833ee5a6d3da14c43219d87cab2f425777fb733695ba8240fda361c20a3647e01dbbd947f3d6166999b2e7db09ebd3ac7c6ba247c74828f273e7b44342a81790e83c9524c47f775ede59b4032826b39d6ca9833b4f7215fa669d01a3ad6a6c884e5afad5344e5ebe6ccf50b0c33ab80dcde97171d1c6a369758898484d7647438b0e419299e91c289930e7443a4e24238c981f5a0cda983b2671623574bd42ec555d2eb47db38e298cc9bd4f45b9a4738a6719b3768af10d9968c91a04886289621db64f37a4d4a345dc5b1264333b3271b325450babfa30bdb4f31ed3cd3d52a23128f8f18b3b2b6f19ee1344a9fc85b5b4d9337931cde42d3d9465170ebe51bb4befffd666737eb7f4f796e682abfbd866c67204010acef1865cbdccea13323fd85131824895f94d571cacfad80994ef8994066a07fb729f031db3f519f23ef837211ef83f8d472cd1a6d43454ade2868e48b4dcc3de1dad24b296d0494706eff4a5f17441796b84039808bdc7aff960b93169e30995b07c1df14c702ca7fc47aa0a02

# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.14

##
# check if target is Huawei
##
function is_huawei()
{
  if("HUAWEI" >< host_info_key_val['remote_ssh_banner'])
  {
    dbg::log(src:'is_huawei', msg:'"HUAWEI" found in SSH banner.');
    return TRUE;
  }

  return FALSE;
}

#
# huawei_vrp_pre_check_fail
# check if this is a Huawei VRP device based on information collected
#
function huawei_vrp_pre_check_fail()
{
  # have we already checked that the host is not Huawei VRP?
  if(host_info_key_val['host_not_huawei_vrp'])
  {
    # already checked that host is not Huawei VRP, no need to check again
    return TRUE;
  }
  if(host_info_key_val['displayversion_unrecognized'] &&
     host_info_key_val['displayversion_unrecognized'] !~ huawei_vrp_check['test_cmd_regex'])
    return TRUE;

  if (is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
    return TRUE;

  return FALSE;
}

#
# callback for systems with "Huawei Versatile Routing Platform Software" in display version
#
function handle_huawei_vrp(session, use_shell_handler, &channel, cmd_res)
{
  var cmd_no_spaces, cmd_set, cmd, commands, cmd_output, secret_prefix;
  var cmd_prompt, os, i, priv, os_level, os_pattern, err_kbs;
  var huawei_vrp_kb_prefix = 'Host/Huawei/VRP/';
  replace_kb_item(name:huawei_vrp_kb_prefix + 'display_version', value:cmd_res);

  os_pattern = "VRP \(R\) Software, Version (\d+(?:\.\d+)+)(?:\s|$)";
  os_level = pregmatch(string:cmd_res, pattern:os_pattern, icase: TRUE);
  if(!empty_or_null(os_level) && !empty_or_null(os_level[1]))
  {
    os_level = os_level[1];
    set_kb_item(name:huawei_vrp_kb_prefix + 'os_level', value:os_level);
  }
  else
  {
    failure_kb_msg =
      'The remote operating system appears to be a type of Huawei VRP\n' +
      'software, however it was not possible to determine the OS version.';
    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    return NULL;
  }
  report += '\nCommand execution for Huawei VRP device successful.';
  report += '\nOS Security Patch Assessment is available for Huawei VRP device, version ' + os_level + '.';
  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_huawei_vrp.static', value: 83);
}

#
# callback for systems without "Huawei Versatile Routing Platform Software" in display version
#
function handle_not_huawei_vrp(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/display_version", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['displayversion_unrecognized'] = cmd_res;
    host_info_key_val['host_not_huawei_vrp'] = TRUE;
  }
}
