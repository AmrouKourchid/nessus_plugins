#%NASL_MIN_LEVEL 80900
##
# (C) Tenable, Inc.
##

include('compat.inc');

if (description)
{
  script_id(213287);
  script_version("1.3");
  script_set_attribute(attribute:"plugin_modification_date", value:"2025/02/28");

  script_cve_id("CVE-2024-55587");
  script_xref(name:"IAVA", value:"2024-A-0834");

  script_name(english:"python-libarchive Python Library <= 4.2.1 Directory Traversal (CVE-2024-55587)");

  script_set_attribute(attribute:"synopsis", value:
"A Python library installed on the remote host is affected by a directory traversal vulnerability.");
  script_set_attribute(attribute:"description", value:
"The version of the python-libarchive Python library that is installed on the remote host is 4.2.1 or prior.
It is, therefore, affected by a directory traversal vulnerability. python-libarchive through 4.2.1 allows
directory traversal (to create files) in extract in zip.py for ZipFile.extractall and ZipFile.extract.

Note that Nessus has not tested for this issue but has instead relied only on the application's self-reported version
number.");
  script_set_attribute(attribute:"see_also", value:"https://github.com/smartfile/python-libarchive/issues/42");
  script_set_attribute(attribute:"solution", value:
"Upgrade to a version of python-libarchive higher than 4.2.1.");
  script_set_attribute(attribute:"agent", value:"all");
  script_set_cvss_base_vector("CVSS2#AV:N/AC:L/Au:S/C:C/I:C/A:C");
  script_set_cvss_temporal_vector("CVSS2#E:U/RL:OF/RC:C");
  script_set_cvss3_base_vector("CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H");
  script_set_cvss3_temporal_vector("CVSS:3.0/E:U/RL:O/RC:C");
  script_set_attribute(attribute:"cvss_score_source", value:"CVE-2024-55587");

  script_set_attribute(attribute:"exploitability_ease", value:"No known exploits are available");
  script_set_attribute(attribute:"exploit_available", value:"false");

  script_set_attribute(attribute:"vuln_publication_date", value:"2024/12/11");
  script_set_attribute(attribute:"patch_publication_date", value:"2024/12/11");
  script_set_attribute(attribute:"plugin_publication_date", value:"2024/12/20");

  script_set_attribute(attribute:"plugin_type", value:"local");
  script_set_attribute(attribute:"asset_categories", value:"component");
  script_set_attribute(attribute:"cpe", value:"cpe:/a:python:python-libarchive");
  script_set_attribute(attribute:"stig_severity", value:"I");
  script_set_attribute(attribute:"thorough_tests", value:"true");
  script_end_attributes();

  script_category(ACT_GATHER_INFO);
  script_family(english:"Misc.");

  script_copyright(english:"This script is Copyright (C) 2024-2025 and is owned by Tenable, Inc. or an Affiliate thereof.");

  script_dependencies("unix_enum_sw.nasl", "python_packages_installed_nix.nbin", "python_packages_win_installed.nbin");
  script_require_ports("Host/nix/Python/Packages/Enumerated", "Host/win/Python/Packages/Enumerated");

  exit(0);
}

include('vcf.inc');
include('python.inc');
include('local_detection_nix.inc');

var os = NULL;
var os_pkg = NULL;
var pkg = 'python-libarchive';

if(!empty_or_null(get_kb_item('Host/win/Python/Packages/Enumerated')))
  os = 'win';
else if (!empty_or_null(get_kb_item('Host/nix/Python/Packages/Enumerated')))
{
  get_kb_item_or_exit('Host/nix/packages');
  os = 'nix';  
  os_pkg = ldnix::search_packages([new('ldnix::pkg_target', 'python-libarchive', '(python\\d*-libarchive)')]);
  # if the package is found, the host has a version of python-libarchive backported by the OS vendor
  if (!empty_or_null(os_pkg) && report_paranoia < 2)
    audit(AUDIT_MANAGED_INSTALL, pkg + ' Python package');
}
else
  audit(AUDIT_HOST_NOT, 'affected because no Python packages were found');

var found_lib, libs = [];
found_lib = python::query_python_package(os:os, pkg_name:pkg);

if (!empty_or_null(found_lib))
  foreach (var found in found_lib)
  {
    found.pkg_name = pkg;
    append_element(var:libs, value:found);
  }

if (empty_or_null(libs))
  audit(AUDIT_HOST_NOT, 'affected');

var lib = branch(libs);
var lib_info = {
  'app' : lib.pkg_name,
  'version' : lib.version,
  'display_version' : lib.version,
  'parsed_version' : vcf::parse_version(lib.version),
  'path' : lib.path
};

var constraints = [
  { 'max_version' : '4.2.1', 'fixed_display': 'Update to a version higher than 4.2.1' }
];

vcf::check_version_and_report(app_info:lib_info, constraints:constraints, severity:SECURITY_HOLE);
