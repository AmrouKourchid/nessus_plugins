#TRUSTED 70c4bea02e3c7e7d0f2287bf100b569767463ab3a74c1dd6f335ad7d1fe51fae2ad14d9892c5338003b8198114b0848f7a07723f4dfc617641a01ed3713ccf38bc60f5f6a16f21afa69fc5ef691262eb7a815141bc66ffa032e16646ca33ae801e7ff2ac550573512d2919a13f835609e93a9430eb53a5c6ae24363eb0598607a7732cce4795be517bcf2639de132053d56d7ea5539ee3e6198d66e00e812066e5b8b40686dff29112abbde207c02dcddec169b6047099d54b47ac63fd7281914f5d21244748aecb29ba14aa30b69a992974485bb847fff797b8d8fb5955624939499222b3232803c39676e1f22104fd69dbe3565931347a5d7bcad4e73b575b48e29defb0d075ed4234b7655b49a6d9e00f8b3b3ef62eb50a313965eb306c84c59dda618442348b8aa57f91b3b101af7cef7738640d885f56d04a548d47e7b504d7fc35843528c0b85bb99ab41a7fa15ae53211051d697bd8efebb9ba6c3be188a84a3efcf8d525fc33c7e4f9dcf2422cd4afcfcf184dd9eb288a9fc9f32c4c1abdfa27ae6a7e1f3245cbe1df91c4b97ca37ede0c33bc4b8602631733d1c8b182f1a56b377f5514da27afadb700fe0d6c0acea2edf524b4df66b7a9f957f1e0c45cc046a852c8f46d23d8c75ce8eaa5e6a3748e92a3012bc2f4f1c474f783d697fcf29cde5e9b9e8fa0f62cc0914cb18bc5c4ce67334b478189637e41ccf8bf
#TRUST-RSA-SHA256 58983247cd683ccecaa9d096caeccff4237008db0fda51316bcf959944c0e7f2020a33dcd6ffb60fb25698cb2190e847832f39f38dfacd2d41a18809d41601bc6a59007f799b11893a8926c84001fb3c3eea5e5a93298263ee0974b6fc5cbfbe3ac4c27cc0d79166f0e7deb2423fd7aaca03c6656c136e082a90c17f5dc22af53af52342f874885ef7af4404aa9d14dc2cde57d7cd77dacf235218893fdbbb4e8d2d51039c1c0c91688c977a7cbed5acf1f330413838541086289f3a6543a65233f24c20a0b7b8604879dbec8a817e906a8f5dc5d931a74fe7deca3a8d51dee85c0ab140bd2ecc6bc2dce60a4528d417976998e2b14adb952fa2b5584eb0af778e5163d88358e97e9d9f444de7a50b7b12d9f9ce5496be03fb12b0fd5aa6eef2fdd6d67d1fa677d3d2b692072ba07f3f83e099e38bf5711f4a222c7e37cc83b4d1e599f65453ecb3fc800f1cfafb6fdaae89dd570508aa1edb33dae8c8400186024b632410f34179e8c7b5e6891caca10a915a3d2f81f3af4c977d4e115c867c3e0c0287e624aac8079bcebc148e2adad2154965c50c6d97c07244a4d18101e0b0cb934fc38aa8565f13e37745f9b345f011c269ba43d975181e573e18e2320f3c12993b70d931a3686afdfa299cea16c7d7e8fece5d7dbb90fce37e85a2499e7bc4d4148f816e9eeac51bfe71b6a42f55ba5fc1418e5b1bba1ef10e1ecd121b

# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.11


function is_staros()
{
  if(host_info_key_val['remote_ssh_userauth_banner'] =~ "Cisco Systems ASR(\d+) Intelligent Mobile Gateway")
  {
    dbg::detailed_log(lvl:1, src:'is_staros()', msg:'Post login buffer contains "Cisco Systems ASR.');
    return TRUE;
  }

  return FALSE;
}

#
# cisco_staros_pre_check_fail
# check if this is a Cisco StarOS based on information collected
#
function cisco_staros_pre_check_fail()
{
  # have we already checked that the host is not Cisco StarOS?
  if(host_info_key_val['host_not_cisco_staros'])
    return TRUE;
  if(!empty_or_null(host_info_key_val['showversion_verbose_unrecognized']) &&
     host_info_key_val['showversion_verbose_unrecognized'] !~ cisco_staros_check['test_cmd_regex'])
    return TRUE;

  # Not Cisco StarOS if one of the following devices
  if (is_cisco_firepower() ||
      is_cisco_ssh() ||
      is_cisco_nxos() ||
      is_timos_userauth() ||
      is_cisco_ucos() ||
      is_huawei() ||
      is_panos() ||
      is_acos() ||
      is_adtran() ||
      is_asyncos() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

#
# callback for systems with "Kernel Version.*-staros-.*" in show version verbose
#
function handle_cisco_staros(session, use_shell_handler, &channel, cmd_res)
{
  var matchvar, version, build, model;

  #Local checks just means we can run commands on the target host.
  report += '\nLocal checks have been enabled for this host.\n';

  replace_kb_item(name:"Host/Cisco/ASR/show_version_verbose", value:cmd_res);
  replace_kb_item(name:"Host/Cisco/StarOS", value:TRUE);

  matchvar = pregmatch(pattern:"Image Version: +([\d\.\(\)A-Za-z]+)", string:cmd_res, icase:TRUE);

  version = "UNKNOWN";
  if(!isnull(matchvar))
  {
    if(!isnull(matchvar[1]))
      version = matchvar[1];
  }

  matchvar = pregmatch(pattern:"Image Build Number: +(\d+)", string:cmd_res, icase:TRUE);

  build = "UNKNOWN";
  if(!isnull(matchvar))
  {
    if(!isnull(matchvar[1]))
      build = matchvar[1];
  }

  matchvar = pregmatch(string:session.userauth_banner,
                       pattern:"Cisco Systems ASR(\d+) Intelligent Mobile Gateway");
  if(!isnull(matchvar))
  {
    if(!isnull(matchvar[1]))
    {
      model = matchvar[0];
      replace_kb_item(name:"Host/Cisco/ASR/Model", value:matchvar[1]);
    }
  }

  if(!isnull(model))
    report += '\nThe remote system is a ' + model + '\n';
  else
    report += '\nThe remote system is ';

  report += 'running Cisco StarOS ' + version + ' build: ' + build + '\n';

  if(version == 'UNKNOWN' || build == "UNKNOWN")
  {
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_UNAVAILABLE);
    failure_kb_msg = 'The remote host appears to be running Cisco StarOS.\n' +
                     'However, we were unable to parse the OS version or build\n' +
                     'from the output of running the "show version verbose" command.';

    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    return TRUE;
  }

  replace_kb_item(name:"Host/Cisco/StarOS/Version", value:version);
  replace_kb_item(name:"Host/Cisco/StarOS/Build", value:build);

  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_cisco_staros.static', value: 126);
  report += '\nOS Security Patch Assessment is available for Cisco StarOS.\n';
  replace_kb_item(name:"Host/OS/showver", value:"Cisco StarOS " + version);
  replace_kb_item(name:"Host/OS/showver/Confidence", value:100);
  replace_kb_item(name:"Host/OS/showver/Type", value:"router");
}

#
# callback for systems without "Kernel Version.*-staros-.*" in show version verbose
#
function handle_not_cisco_staros(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  if(!empty_or_null(cmd_res))
  {
    # store more details for other handlers to use
    host_info_key_val['showversion_verbose_unrecognized'] = cmd_res;
    host_info_key_val['host_not_cisco_staros'] = TRUE;
  }
}
