#TRUSTED 51a5533e49c168ae930a85091fff2dd5bd5bceb40a9d73066f18758cb9e938ac681e2b92f3e9289cd552d7c7215d6dc46ef42595ae5731e5bee8dc8f7cdd9b2582bac8fbd6cd3081525b79675bb03c5da75f46549a35a0e90d2712dbc167d56f3cd361de198c6d0e99f5ed095d91930bdfa75ddfb9adf9b1cf1af2f5a84445717cdcbf32e11542bc987572849adc33740248a1e0ddcfe7b8b1e2c9f10e0063278f160138cb8a0790cbcce83b8400d561d68f371fadf7fb91dfc50436cb9341ce528e51b001880c5550cbeec05d878359e70cfd52f6c957327c8caa7f07a4a674b2a66db033bb32e2960d8c78681568465c209a7a1ff1899afda70162a0850583f11a76d9634af326437058f50f466d09bd989c73bce58d03945f55b2d1d31a0e07cacef146f7df1532231bc8dda9470ff44b52a2dade05cb8a07bcad497d26c5f629643d65aa94f73920271208e5cfb3c65bedcef6076a84fb16672bb7eabb9853e6b60636deb08e1f859ed1430321d3d1b16c441cd9642c2bb42fdc7996adecfcde8d18ba17638b2c2dd1458edcda657cc75a7795e1e9bfa5c016a4d1ccdff20444cc500642250eca9696b614dbcdf0767135c4127abc2706c6a92ac683661be934c87a86457a368e228025623857fe5fb3b2995d9bdffe94b69e06f5ae85c0d30e28ce936efdebe1b5bc8daacdbca3804be5fd59bae6d6eb27d99e12890afd
#TRUST-RSA-SHA256 08772fa7951016d897f84674db43c3ae178de88df5858560fd2275261b01a5d18b76a4437c90b3e73443d3ee762d48cedc6436b026a3c1886f28f961163dd653ab7754564145c4f6778a1a1366ae58cf2577d03ffe0c785a163c4be3e209f5b0cb6bd4484f39e772e41eefad4a7092d18934fb3ba78c51e6c4ef58bf2511637f2bd0ec98e938ee8afc90d1a750b593f3efc1fe34353822dbcb2d2eabc418abb41fd8b5ddb33d53cbc859585843561f71a9d94615e882a38c08b630aa1425efd2595ad3e66406ebf22cbc34df8d5a043bd23037949d5a42c211708f3b0729e4ba784c0974d07405c023c79a1b1cacffa9b03549720fb53ef3e339b859057d844ffa7f105b344cede51a72a1774c133a96dd314fcc166f43e5b6ca73d2dfa2808c67863280551ef1d3515121e9a3a917cbebe7e171d5d70f2e61fe52c3d3b8b40d8f6b5d05fb4fc57636f33a1f10c0b78530e05958345b45ad26091c15710e3e5c861a76e5f935d58e08b5c3ac0032816064233502810a6a0d83b5198efa670f371976e8c4c963d453e25bbba2ddd048df7a27b5b1aa9eeaf7a9cfed1745c71ebcfd9a44ea6b35e7a69e7a56edf3b364f9741f7dbc8c432cad59bf6f568a432a3ec88046d5b86ce7a2a9fbecf3e87b178e4ead997278f4ed0ba749cdbb823d927dfe2d7a04e866ceec7cdfeab8b10bfadf98309fcb444b6072de35579af0027aed


# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.13

#
# fireeye_pre_check_fail
# check if this is a FireEye device based on information collected
#
function fireeye_pre_check_fail()
{
  # have we already checked that the host is not FireEye?
  if(host_info_key_val['host_not_fireeye'])
  {
    # already checked that host is not FireEye, no need to check again
    return TRUE;
  }
  if(!empty_or_null(host_info_key_val['showversion_unrecognized']) &&
     host_info_key_val['showversion_unrecognized'] !~ fireeye_check['test_cmd_regex'])
    return TRUE;

  # Not FireEye if one of the following devices
  if (is_cisco_firepower() ||
      is_cisco_nxos() ||
      is_timos_userauth() ||
      is_cisco_ucos() ||
      is_huawei() ||
      is_panos() ||
      is_acos() ||
      is_adtran() ||
      is_staros() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

#
# callback for systems with "Product Model: FireEye" in show version
#
function handle_fireeye(session, use_shell_handler, &channel, cmd_res)
{
  var cmd_no_spaces, cmd_set, cmd, commands, cmd_output, secret_prefix;
  var cmd_prompt, os, i, priv, os_level, os_pattern, err_kbs;
  var fireeye_kb_prefix = 'Host/FireEye/';
  replace_kb_item(name:fireeye_kb_prefix + 'show_version', value:cmd_res);
  os_pattern = "Product release:\s*([^\d]*[\d\.]+)";
  os_level = pregmatch(string:cmd_res, pattern:os_pattern);
  if(!empty_or_null(os_level) && !empty_or_null(os_level[1]))
  {
    os_level = os_level[1];
    set_kb_item(name:fireeye_kb_prefix + 'os_level', value:os_level);

  }
  else
  {
    failure_kb_msg =
      'The remote operating system appears to be a type of FireEye\n' +
      'software, however it was not possible to determine the specific OS.';
    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    return NULL;
  }
  report += '\nCommand execution for FireEye device successful.';

  commands = [
    {'cmd': 'no cli session paging enable', 'secret': FALSE},
    {'cmd': 'show configuration full', 'secret': TRUE}
  ];

  foreach cmd_set (commands)
  {
    cmd = NULL;
    secret_prefix = '';
    if (!empty_or_null(cmd_set['cmd']))
    {
      cmd = cmd_set['cmd'];
    }
    else
    {
      continue;
    }
    if (!empty_or_null(cmd_set['secret']) && cmd_set['secret'])
    {
      secret_prefix = 'Secret/';
    }
    cmd_no_spaces = str_replace(find:" ", replace:"_", string:cmd);

    cmd_output = run_command(cmd:cmd,
                   session:session,
                   use_shell_handler:use_shell_handler,
                   channel:channel,
                   force_priv_escl:TRUE);
    if (isnull(cmd_output))
    {
      set_kb_item(name:fireeye_kb_prefix + cmd_no_spaces + '/errmsg', value:'The command failed to produce any output.');
    }
    else
    {
      if (preg(pattern:"\n% Unrecognized command", string:cmd_output, multiline:TRUE))
      {
        set_kb_item(name:fireeye_kb_prefix + cmd_no_spaces + '/errmsg', value:cmd_output);
      }
      else set_kb_item(name:secret_prefix + fireeye_kb_prefix + cmd_no_spaces, value:cmd_output);
    }
  }

  # If cmd_output doesn't exist here, the errmsg KB is already written.

  err_kbs = get_kb_list('*' + fireeye_kb_prefix + '*' + '/errmsg');
  if (!empty_or_null(err_kbs))
  {
    failure_kb_msg =
      'The remote operating system appears to be a type of FireEye device\n' +
      'version ' + os_level + '.\n' +
      'However, at least one command has run into unexpected errors and local checks\n' +
      'will not be enabled at this time.\n';
    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    return NULL;

  }
  else
  {
    report += '\nOS Security Patch Assessment is available for FireEye device version ' + os_level + '.';
    sshlib::enable_local_checks();
    replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_fireeye.static', value: 143);
  }
}

#
# callback for systems without "Product Model: FireEye" in show version
#
function handle_not_fireeye(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/show_version", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['showversion_unrecognized'] = cmd_res;
    host_info_key_val['host_not_fireeye'] = TRUE;
  }
}
