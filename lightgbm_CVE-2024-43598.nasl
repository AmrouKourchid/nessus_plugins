#%NASL_MIN_LEVEL 80900
##
# (C) Tenable, Inc.
##

include('compat.inc');

if (description)
{
  script_id(211682);
  script_version("1.2");
  script_set_attribute(attribute:"plugin_modification_date", value:"2024/11/22");

  script_cve_id("CVE-2024-43598");

  script_name(english:"LightGBM < 4.6.0 RCE");

  script_set_attribute(attribute:"synopsis", value:
"The LightGBM library installed on the remote host is affected by a remote code execution vulnerability.");
  script_set_attribute(attribute:"description", value:
"The version of the LightGBM library installed on the remote host is prior to 4.6.0. It is, therefore,
affected by a remote code execution vulnerability.

Note that Nessus has not tested for this issue but has instead relied only on the application's self-reported version
number.");
  script_set_attribute(attribute:"see_also", value:"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-43598");
  script_set_attribute(attribute:"solution", value:
"Upgrade to LightGBM version 4.6.0 or later.");
  script_set_attribute(attribute:"agent", value:"all");
  script_set_cvss_base_vector("CVSS2#AV:N/AC:H/Au:N/C:C/I:C/A:C");
  script_set_cvss_temporal_vector("CVSS2#E:U/RL:OF/RC:C");
  script_set_cvss3_base_vector("CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H");
  script_set_cvss3_temporal_vector("CVSS:3.0/E:U/RL:O/RC:C");
  script_set_attribute(attribute:"cvss_score_source", value:"CVE-2024-43598");

  script_set_attribute(attribute:"exploitability_ease", value:"No known exploits are available");
  script_set_attribute(attribute:"exploit_available", value:"false");

  script_set_attribute(attribute:"vuln_publication_date", value:"2024/11/12");
  script_set_attribute(attribute:"patch_publication_date", value:"2024/11/12");
  script_set_attribute(attribute:"plugin_publication_date", value:"2024/11/21");

  script_set_attribute(attribute:"plugin_type", value:"local");
  script_set_attribute(attribute:"cpe", value:"cpe:/a:microsoft:lightgbm");
  script_set_attribute(attribute:"thorough_tests", value:"true");
  script_end_attributes();

  script_category(ACT_GATHER_INFO);
  script_family(english:"Artificial Intelligence");

  script_copyright(english:"This script is Copyright (C) 2024 and is owned by Tenable, Inc. or an Affiliate thereof.");

  script_dependencies("unix_enum_sw.nasl", "os_fingerprint.nasl", "python_packages_installed_nix.nbin", "python_packages_win_installed.nbin", "nuget_package_enumeration_win_installed.nbin", "nuget_package_enumeration_nix_installed.nbin");
  script_require_ports("Host/nix/Python/Packages/Enumerated", "Host/win/Python/Packages/Enumerated", "Host/win/NuGet/Packages/Enumerated", "Host/nix/NuGet/Packages/Enumerated");

  exit(0);
}

include('vcf_extras_nuget.inc');
include('python.inc');
include('local_detection_nix.inc');

var nuget_app_info, installs = [];
if (!empty_or_null(get_kb_item("Host/win/NuGet/Packages/Enumerated")) || !empty_or_null(get_kb_item("Host/nix/NuGet/Packages/Enumerated")))
  nuget_app_info = vcf::nuget_package::get_app_info(pkg_name:"LightGBM");
  if (!empty_or_null(nuget_app_info))
    append_element(var:installs, value:nuget_app_info);

var os_pkg, os, pkg = 'lightgbm';
if (!empty_or_null(get_kb_item("Host/win/Python/Packages/Enumerated")) || !empty_or_null(get_kb_item("Host/nix/Python/Packages/Enumerated")))
{
  if ('windows' >< tolower(get_kb_item_or_exit('Host/OS')))
    os = 'win';
  else
  {
    os = 'nix';
    get_kb_item_or_exit("Host/nix/packages");
    os_pkg = ldnix::search_packages([new('ldnix::pkg_target', 'python3-lightgbm', '(py311-lightgbm)')]);
    # if the package is found, the host has a version of lightgbm backported by the OS vendor
    if (!empty_or_null(os_pkg) && report_paranoia < 2)
      audit(AUDIT_MANAGED_INSTALL, pkg + ' Python package');
  }

  var python_app_info, lib, libs = [];
  libs = python::query_python_package(os:os, pkg_name:pkg);
  if (!empty_or_null(libs))
  {
    foreach (lib in libs)
    {
      python_app_info = {
        'app' : pkg,
        'version' : lib.version,
        'display_version' : lib.version,
        'parsed_version' : vcf::parse_version(lib.version),
        'path' : lib.path
      };
      append_element(var:installs, value:python_app_info);
    }
  }
}

if (empty_or_null(installs))
  audit(AUDIT_HOST_NOT, 'affected');

var app_info = branch(installs);

var constraints = [
  {'fixed_version': '4.6.0'}
];

vcf::check_version_and_report(
    app_info:app_info,
    constraints:constraints,
    severity:SECURITY_HOLE
);
