#TRUSTED 74ca625d5de2b25c37b02a84080fbd6afcffe3cdb1d4ad64c60436935046c6cbb5484cf197cb05e6c1bf6b86b70a513e7965ca20a015ec7a3c2131619a1e646e157502c190a6ee17555a46c001f323b706396e3da1e32ab25cc1d9e0763647e920d9a92095696cafdd4a96e075ad5bf3372d7d08fd7e5d76be152e9a66d04aa70e3558bdb47fac1883a5f16b2d0500622b08207c54e89a1c6f3e8db42a201745d79ebb1774fa5d25912b4eec03c0d45f9ff2cad0bdfaba5474fcb32c4c03a027c34e1c232b3c27098c9557dbd36bfc31ad25da892ab79d31ea4ec5f10afd2d90b2dc0e8cd003f9c94ddc0ffb53de3ba4e2bc684334f61e903bf100ef93502a13ec79cb613450668662a8b55f9d4a32efc2c187cebf806947e22a01c36a428a77303bbb68087990e7fb26d94b920e9ca310713382edd1a37f977e58988c815bb2c43b2857783ef18a26e1ff1a86684162fbc6e922fc637dd886d92d4ff9c2d5270641ecbfbbf599706da3ca98ee5074978da6f981a7d36f745dccc82144025499ab7424dc4460ded00298684ae10a365cb2128a84d65c6a3e8a9d312517576166e4f6f71b4b9d451e1aa7e73efe70c5bfd3a71ac18b2bccf35c9d9a31979cbc8815ae8fbe661340d752c93bc384a0e0094cf49835e091f28c409b80cdf9b77fd3988e26529ece75c557d175fa41900d2adcd4de8d44c087eb20b377ee3c10312f
#TRUST-RSA-SHA256 9e2089cb2609a70ad4d79dde996bf2bedd4ff2ba324011310818f4d8937d6a63ca100bd14c04ccd187a829199f1674841f44639ca270dc887b37cc06fec1854ac891ccb8286798fe84c609c668235f4a4287759d92d9c02b39910f1c4cf1eed7b0cc82e86f495be1f6dcc66934ab94af35a1b17fbb1f1033f50090bb53d484b602465e71ae4a65ecaca70226e57bdc36674b3d37bb003c3b5a6c71192d4497fdff14a895896da42b781ac1b2c8e0f2cdcc7668d7a319fad809e9baef66321cd8441b9bd5c186bc056b65acf893614d6c44564867e7b9a77e56b7160b696018be4315b597673ac34b388c5737ae3f598201f5a50ea874316fe30f3f6febd2bc4d8ffe9445864fe0ea63ffce7eebec757502007ff56110d25bde6164df70e164939eb2eabd73a794b6e0809388654d0658f9433cfa76263fe6980d43660252de421bb799df7abfc120a2bb7a18937ec07da68355285e2a0d1466a5e9f7a9a551f1e27625d01142670f1a3abd09a2ee52bceef67f75b7e267d218051eb5d2d318fbed1839f6095d09583cb3df4b00e4d9faa510f128c091ceb1404aae2147a006d6ecbbbb4e9644e0e928cbf0723a6cc3db30868036b28e1781a35cb8a73335145166a96540a0f63affaf9276138e20c1d480ff0a1aa5592968d6bfc091e945b65d2b5fca4378d2ebc30a33054b0c01f7a7b3fe03ae4cabbdf0eac198bb590c2d51

##
# check if this is Zyxel USG based on information collected
#
# @return Returns TRUE if Zyxel USG device
##
function zyxel_usg_pre_check_fail()
{
  # have we already checked that the host is not Zyxel USG
  if(host_info_key_val['host_not_zyxel_usg'])
    return TRUE;

  if(!empty_or_null(host_info_key_val['showversion_unrecognized']) &&
     host_info_key_val['showversion_unrecognized'] !~ "Zyxel")
  {
    return TRUE;
  }

  # Not Zyxel USG if one of the following devices
  if (is_panos() ||
      is_huawei() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

##
# callback for systems with "Zyxel USG" in show version (or 1 of 2 possible errors)
#
# @param <session>            A session object for current SSH connection.
# @param <use_shell_handler>  Boolean. Flag to enable shell handler in run_command. (unused)
# @param <channel>            A channel object for the current SSH connection.
# @param <cmd_res>            Command result from ssh_get_info2: "show version"
#
# @return @Returns TRUE if this is Zyxel USG, NULL otherwise
##
function handle_zyxel_usg(session, use_shell_handler, &channel, cmd_res)
{
  #Local checks just means we can run commands on the target host.
  report += '\nLocal checks have been enabled for this host.';

  session.clear_cmd_error();
  cmd_res = run_command(cmd:'show version',
                             session:session,
                             use_shell_handler:use_shell_handler,
                             channel:channel);

  replace_kb_item(name:"Host/showversion", value:cmd_res);

  var matches = pregmatch(string:cmd_res, pattern:"2\s\s+(\w+\s\w+\s\d+)\s+V([\d\.]+)");
  if (!empty_or_null(matches))
  {
    var model = matches[1];
    var firmware = matches[2];
    report += '\nThe remote Zyxel USG device is running firmware version: ' + firmware + '\n\n';

    replace_kb_item(name:"Host/Zyxel/USG", value: TRUE);
    replace_kb_item(name:"Host/Zyxel/USG/version", value:firmware);
    replace_kb_item(name:"Host/Zyxel/USG/model", value:model);
    replace_kb_item(name:"Host/Zyxel/USG/show_ver", value:cmd_res);

    # Used by os_fingerprint.nasl for Host Identification
    replace_kb_item(name:"Host/OS/showver", value: "Zyxel USG " + firmware);
    replace_kb_item(name:"Host/OS/showver/Confidence", value:100);
    replace_kb_item(name:"Host/OS/showver/Type", value:"embedded");

    report += '\n' + 'OS Security Patch Assessment have been enabled for Zyxel USG.\n';

    sshlib::set_support_level(level: sshlib::SSH_LIB_SUPPORTS_COMMANDS);
    sshlib::enable_local_checks();
    replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_zyxel_usg.static', value: 81);

    return TRUE;
  }
  else
    return NULL;
}

##
# callback for systems without "Zyxel" in show version
#
# @param <session>            A session object for current SSH connection.
# @param <use_shell_handler>  Boolean. Flag to enable shell handler in run_command. (unused)
# @param <channel>            A channel object for the current SSH connection.
# @param <cmd_res>            Command result from ssh_get_info2: "show version"
#
# @return @Returns NULL
##
function handle_not_zyxel_usg(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/showversion", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['showversion_unrecognized'] = cmd_res;
    host_info_key_val['host_not_zyxel_usg'] = TRUE;
  }
}
