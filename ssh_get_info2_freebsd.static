#TRUSTED 8f8b525ee143e854367861f53b5d36af67e7032795aa616fd7638f4b27fbc64a3b3b25ec399b81b2cd15f6614b4b4289c6198a90a34a20bb832238fcd7801f4c35cd5474e5f8dae2f1e5f3770989f2d5944bea0799c6cfd64472134444cd67bed8118bbb86f4d90aa93b87e8fe123ce80ef127b7084a77416552b0df94a0803e75a8188c163bf28d93dd9f8436b18212a60062016aae29daa3a006642db4ffd5e4a2fbdae3d6972e4f7acda970491e1fd4e920dfe544fe98580cc4374486e624fdd5889c145cc49346d386380228f5b872dd12bb45afd98527062e3d20c81bf8f3ae0b9d3ad0fdd79ce68732a021759a47f1f796d1b1b447165ce1c95afe34fc1d6c0c4d9cda3c43e817b1ca06f6e8b1a7a055f9939306c4568f7cc22e61b84759d0eeb4111653ca5afc09ebc6c804cefd66c83b0ce010e36c9c9bcc7813ec64ae8a9261f6c875da2c2d6982e1a3d005bdc4400f751390b570222d04d221ef37b2ae153d8ad6df09d4e5a513566281c46fe8969523b3c4b4aa5b2c1394501c9d18d850bb9f64baba2f0b5cfcffcae5f732ed92af77768243d30c86812359cb19531295d1b8620654042db8f7a148c302cc61b7d147cf00bdc04e546abac3d12cda62f3808c9af21d7c0f515c00a3dc6067df65ed11e1bff1d3aa8e5ee1dd6bff04f2d37aecac576b5e9ed66dddb5905e85cb8931aaaab92f98584259a94dde27
#TRUST-RSA-SHA256 54cbda167023cc4f049fb890350164883d7149176d3e47986f69b5273b029f68dd0b6940d6254d49ac399bdeb6e90da2b81e50614fbb9812f3e2367c7d8a1ab31e3674ada0d629b914722ff2ab6c5884423127a9218362dc881a4044e82c81fa28d39e3c17d85dc174b61499c4ef342501319f16d7920ad125614d84a66d4aeeb557caa64238d54c18f8c2d834b3ba183b392570d8c9e9fbb476e7d92252ddbcb1318a4a5275e51d36b8563184768267c401925379bd33cc4ce7548b77e1bea69866bc4d0738a89beb5fd89fdb2adf2774fdccb479b603c3f9005ca29cfa6fe7bba4b81234c844f064059c637d2aecad7d3d65e33a5cfb5e0a345ccada2402ac6efe7b00f06946d8f7bed2f9e453316ca3a8df2fddc7918349d765322d9617eb38b45f049b34aa5a37150ab8f415e82f24a3dfe609bccf5b4497000ac6951553abf7632601feb9b811cad9b5ef6943cf1eb59a97515ab0b88f48d2590a706056c2c9572a4203eb0bc02ab5295f39884a68858da047020af183f123b7062268d4b02d5dc98350c8ae839f1c4b14645978b1ff507c32c9e8ff3829878efa79bb30a73034e55575f4879ab8bce3a8de83a0c676cff8fe46482bdc10cc879cd28aaa5a4ec9bacb4399a2eafd2b9e9faa779689251f73cf718214d7966f4fec694e56c9b5a1e83fe60bb4eb4f2fb04a2d0a8e514ad20f1be6ec30e888cea5ad849162

# (C) Tenable Network Security, Inc.
#
# Revision 1.0

function freebsd_pre_check_fail()
{
  # we've already checked that the host is not FreeBSD previously,
  # so don't recheck
  if(host_info_key_val['host_not_freebsd'])
    return TRUE;

  # General checks that target is not Linux/UNIX
  if (not_nix()) return TRUE;

  # Not FreeBSD if one of the following devices
  if (is_cisco_ucos() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
    return TRUE;

  # Check uname output for errors or mismatch
  if (uname_error_or_mismatch(regex:freebsd_check['test_cmd_regex']))
    return TRUE;

  return FALSE;
}

function cmd_kb_freebsd(&channel)
{
  local_var err_msg;

  var success_item = _FCT_ANON_ARGS[0];
  var cmd = _FCT_ANON_ARGS[1];
  var session = _FCT_ANON_ARGS[2];
  var use_shell_handler = _FCT_ANON_ARGS[3];
  var success_fn = _FCT_ANON_ARGS[5];
  var fail_item = _FCT_ANON_ARGS[6];

  if (session) session.clear_cmd_error();

  var buf = run_command(cmd:cmd,
                        session:session,
                        use_shell_handler:use_shell_handler,
                        channel:channel);

  if(buf) buf = chomp(buf);

  err_msg = session.cmd_error;

  if (!empty_or_null(buf))
  {
    if (!isnull(success_fn))
    {
      if (success_fn(buf:buf))
      {
        replace_kb_item(name:success_item, value:buf);
        return TRUE;
      }
      else err_msg = buf;
    }
    else
    {
      replace_kb_item(name:success_item, value:buf);
      return TRUE;
    }
  }

  if (!err_msg) err_msg = session.cmd_error;
  if (!err_msg) err_msg = 'The command \'' + cmd + '\' failed to produce any results for some reason.';

  if (!empty_or_null(fail_item)) set_kb_item(name:fail_item, value:err_msg);

  return FALSE;
}

function validate_ipfw(buf)
{
  if (
    !isnull(buf) &&
    'command not found' >!< tolower(buf) &&
    'ipfw: getsockopt(ip_fw_get): protocol not available' >!< tolower(buf) &&
    'operation not permitted' >!< tolower(buf)
  ) return TRUE;

  return FALSE;
}

function validate_pfctl(buf)
{
  if (
     !isnull(buf) &&
     'command not found' >!< tolower(buf) &&
     'pfctl: /dev/pf: no such file or directory' >!< tolower(buf) &&
     'operation not permitted' >!< tolower(buf)
   ) return TRUE;

  return FALSE;
}

# handles NAS4Free
function handle_NAS4Free(session, use_shell_handler, &channel)
{
  # Get Version.
  var version = NULL;
  var release = NULL;
  var buf = run_command(cmd: 'cat /etc/prd.version',
                        session:session,
                        use_shell_handler:use_shell_handler,
                        channel:channel);

  if (buf && "prd.version" >!< buf )
  {
    version = chomp(buf);
    # Get Revision.

    buf = run_command(cmd: 'cat /etc/prd.revision',
                      session:session,
                      use_shell_handler:use_shell_handler,
                      channel:channel);

    if (buf && "prd.revision" >!< buf) version += '.' + chomp(buf);
  }

  # Get release name.
  buf = run_command(cmd: 'cat /etc/prd.revision.name',
                    session:session,
                    use_shell_handler:use_shell_handler,
                    channel:channel);

  if (buf && "prd.version" >!< buf ) release = chomp(buf) - '- ';

  if (!isnull(version)) set_kb_item(name:"Host/nas4free/version", value:version);
  if (!isnull(release)) set_kb_item(name:"Host/nas4free/release", value:release);

  report += '\nLocal checks have been enabled for this host.';
  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_freebsd.static', value: 144);
  if (! empty_or_null(host_info_key_val['uname-a_unrecognized'])) {
    delete_element(idx:'uname-a_unrecognized', var:host_info_key_val);
  }

  return found_freebsd(session:session, use_shell_handler:use_shell_handler, channel:channel);
}

# callback for systems with "FreeBSD" in uname
function handle_freebsd(session, use_shell_handler, &channel, cmd_res)
{
  local_var buf, source, release, match, items, line, err_msg, arg;

  if (empty_or_null(host_info_key_val['uname-a_reported'])) {
    report += '\nThe output of "uname -a" is :\n' + cmd_res;
    host_info_key_val['uname-a_reported'] = TRUE;
  }

  replace_kb_item(name:"Host/uname", value:cmd_res);

  sshlib::set_support_level(level: sshlib::SSH_LIB_SUPPORTS_COMMANDS);

  # freebsd-version gives a more accurate version than uname
  if (session) session.clear_cmd_error();
  buf = run_command(cmd: '/bin/freebsd-version',
                    session: session,
                    use_shell_handler: use_shell_handler,
                    channel: channel);

  if(!isnull(buf)) match = pregmatch(pattern:"^([0-9]+\.[^ ]*)", string:chomp(buf));
  else match = NULL;

  if (!isnull(match) && !session.cmd_error)
  {
    release = match[1];
    source = 'freebsd-version';
  }
  else
  {
    release = ereg_replace(pattern:".*FreeBSD ([0-9]+\.[^ ]*).*", replace:"\1", string:cmd_res);
    source = "uname -a";
  }

  items = split(release, sep:"-", keep:0);
  if ( "p" >< items[2] ) items[2] = ereg_replace(pattern:"p", replace:"_", string:items[2]);
  release = "FreeBSD-" + items[0] + items[2];

  set_kb_item(name:"Host/FreeBSD/release", value:release);
  set_kb_item(name:"Host/FreeBSD/source", value:source);

  # Attempt to gather Timezone info 
  linux_timezone_check(session:session,
                      use_shell_handler:use_shell_handler,
                      channel:channel);

  # Determine whether or not we are running as root (uid=0).
  var max_privs = 0;
  var res = run_command(cmd:"id", session:session, use_shell_handler:use_shell_handler, channel:channel);
  if(res && res =~ "(^|\s)uid=0\(")
    max_privs = 1;
  replace_kb_item(name:"Host/Auth/SSH/" + session.get_port() + "/MaxPrivs", value:max_privs);

  var cmd = "/sbin/ipfw list";
  cmd_kb_freebsd(channel:channel,
             "Host/fwrules/output/"+cmd,
             cmd,
             session,
             use_shell_handler,
             @validate_ipfw,
             'Host/fwrules/errmsg'+cmd);

  buf = run_command(cmd: 'cat /etc/prd.name',
                    session: session,
                    use_shell_handler: use_shell_handler,
                    channel: channel);

  if(!isnull(buf) && "NAS4Free" >< buf)
  {
    return handle_NAS4Free(session:session, use_shell_handler:use_shell_handler, channel:channel);
  }

  foreach arg (make_list('rules', 'nat', 'queue'))
  {
    cmd = '/sbin/pfctl -s ' + arg;
    cmd_kb_freebsd(channel:channel,
             'Host/fwrules/output/' + cmd,
             cmd,
             session,
             use_shell_handler,
             @validate_pfctl,
             'Host/fwrules/errmsg' + cmd);
  }

  # Figure out command to use to list packages.
  var pkginfo_cmd = "/usr/sbin/pkg_info";

  if (items[0] =~ "^[1-9][0-9]+") pkginfo_cmd = "/usr/sbin/pkg info";
  else if (items[0] =~ "^(8\.[1-9]+|9\.)")
  {
    buf = run_command(cmd: '/usr/bin/fgrep WITH_PKGNG /etc/make.conf',
                      session: session,
                      use_shell_handler: use_shell_handler,
                      channel: channel);

    foreach line (split(buf, keep:FALSE))
    {
      match = pregmatch(pattern:"^[ \t]*WITH_PKGNG[ \t]*=[ \t]*([^ \t]+)[ \t]*$", string:line);
      if (match)
      {
        pkginfo_cmd = "/usr/sbin/pkg info";
        break;
      }
    }
  }

  if (session) session.clear_cmd_error();
  buf = run_command(cmd: pkginfo_cmd,
                    session: session,
                    use_shell_handler: use_shell_handler,
                    channel: channel);

  if (!buf && "pkg info" >< pkginfo_cmd)
  {
    pkginfo_cmd = str_replace(find:"/usr/sbin", replace:"/usr/local/sbin", string:pkginfo_cmd);
    buf = run_command(cmd: pkginfo_cmd,
                      session: session,
                      use_shell_handler: use_shell_handler,
                      channel: channel);
  }

  if (!buf && "no packages installed" >< session.cmd_error) buf = ' ';

  if (!buf || pregmatch(pattern:"/usr/[^\s]*sbin/pkg", string:buf))
  {
    err_msg = session.cmd_error;
    if (!err_msg) err_msg = buf;
    if (!empty_or_null(err_msg))
    {
      report +=
'OS Security Patch Assessment is not available because of the following
error :

' + err_msg;
    }
    else
    {
      report +=
'OS Security Patch Assessment is not available because the command \''+pkginfo_cmd+'\'
failed to produce any results for some reason.';
    }

    failure_kb_msg = "'" + pkginfo_cmd + "' did not return any result.";
    failure_kb_type = lcx::ISSUES_ERROR;
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    return TRUE;
  }

  buf = str_replace(find:'\t', replace:"  ", string:buf);
  replace_kb_item(name:"Host/FreeBSD/pkg_info", value:buf);

  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_freebsd.static', value: 305);
  if (! empty_or_null(host_info_key_val['uname-a_unrecognized'])) {
    delete_element(idx:'uname-a_unrecognized', var:host_info_key_val);
  }

  report += '\nOS Security Patch Assessment is available for this host.';

  return found_freebsd(session:session, use_shell_handler:use_shell_handler, channel:channel);
}

function found_freebsd(session, use_shell_handler, &channel)
{
  # misc_calls_and_exit() commands
  cmd_kb_freebsd(channel:channel,
             'Host/NSM/guiSvr/version_src',
             '/etc/init.d/guiSvr version',
             session,
             use_shell_handler);

  cmd_kb_freebsd(channel:channel,
             'Host/NSM/devSvr/version_src',
             '/etc/init.d/devSvr version',
             session,
             use_shell_handler);

  if(!cmd_kb_freebsd(channel:channel,
             'Host/ifconfig',
             'LANG=C; /sbin/ifconfig -a',
             session,
             use_shell_handler) && ("not found" >< session.cmd_error ||
                          "No such file" >< session.cmd_error))
  {
    cmd_kb_freebsd(channel:channel,
               'Host/ifconfig',
               'LANG=C; /sbin/ip addr show',
               session,
               use_shell_handler);
  }

  if (agent())
  {
    var ip_addr = agent_get_ip();
    if (!isnull(ip_addr))
      report_xml_tag(tag:"host-ip", value:ip_addr);
  }

  cmd_kb_freebsd(channel:channel,
         'Host/hostname',
         '/bin/hostname',
         session,
         use_shell_handler);

  cmd_kb_freebsd(channel:channel,
         'Host/last_reboot',
         '/usr/bin/last reboot',
         session,
         use_shell_handler);

  cmd_kb_freebsd(channel:channel,
         'Host/uname-r',
         'uname -r',
         session,
         use_shell_handler);

  return NULL;
}

function handle_not_freebsd(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  store_and_report_uname(cmd_res:cmd_res, session:session,
                         use_shell_handler:use_shell_handler);
  host_info_key_val['host_not_freebsd'] = TRUE;
}
