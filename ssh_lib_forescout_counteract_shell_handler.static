#TRUSTED 6ec13845ef9fcc5654627db926a8bedeeb9c9d5b7e0dc9877af54ea5902ff6d819d4cb13e7289c616dff915b746abe8075bf50c76a4747f7ae50a4037f2a11d77f63e866cc6309533629096813accc94dfb71dcafe7890c71db1451178978cad529c05ebf20ae8885ff56a6afbc4ebd0b20e0163096af2fffb565ce30fb59d5b7cf51559103e6ec5f65e8ab3abcca638251e3a240779ef55fc9534053ffc5777c85213fa10d83752bf1e1774c74b0dd7b7fdf5539a44bbac76d75bb59c57f8fca7529eefe39a6005c553c2de30e28c319e7a9a2aed5bffbfe3e1ec6c493dfbdb835b287b0bacf23511e58b0fdb7f2ea5565d4492b06c71c8cce89c799c4baf9e5213d13d821850066971128974b1a1cd0200a7b9df5d9d74e5ee132b7c0b624aac78f52db0b5bf6ae360ebc2de042713854794d47a55c0b185eb841169f9b2ee280d316bc4a0910dd28c51665db774143d113f8a4be38cdf067160aecd37659a8d681c7d9bf8f44c73340fae419e2552c22cdeb38727e57d6c040b788d74eb3ebf44ce226a039488938f7852d3788137e77371042d554aa74e197e6aa1561b04c02f140c93ffaf8f34d1b31e110b3db9b0f8fa14a0f15ee69c04f1604051ab64996bfce9a690a123739900752a0b5e57c1836d82c84a1a066e07b78732b82c64f0502947f59e5c87dbb9bc04896344a04d8ebbe3b1102f145ec62d59ad56d708
#TRUST-RSA-SHA256 91558c20ae7c76ed55cba3be6301246bd734e8cbe44928e9d36794f3815f818b858df44b4df400f90cace9987b09394231b52ff51b0f0689f34208f4b685ecceeb79eb7b044009d43aba22f08bf68fa98eccd1670bdd2d4f5ef0358076f4783958dc8e1392cb68ea3a6830d9e227e58505c3e4448f7001e5c039e0364596c901512363c6bcdd3950f4740629396854e8a23e0ece0f9c098fb7f366967717083c6605f80e5cfe868dc4ee115b0fa85309e7605fc10d39c2e547e131a742c42c43570fcada6769f3821951aa3436ccc140f431551e9fa939b6720801a7a4c6d193534ab3eabb7df1ed9192f389763e1d8bd339302c2dfaf19571b2fde5315ce872aa190329dacd346ffbd15ec06cc5ca8c62eb68b21ddbf1c859faf0da15d37b6fa1d3269b3945d348705ce515f234ffa3a888c0d505a46082565f9d69fc0607e68d6d2643ebfdec26992c838dd5b4d70e8a08d6b0833e47d3c01221e83b8fecdb47f4cf41c506095f5ffd646f198b824c053e0d1d76f75af778f9a2fc30c0ab921c86d5a7349b19f2b513738d0ff795e9732d6e8545a828e72ddc7f8c63860532e77a0c106d8096aaad049bc5a9fb4f212786682c1c2c71d7091936581cf5a06d690f0d8b958e1f75c86c2b09c2531462d5f70c2be482dc86f5bd3e311089512a2c35da4b20be29c842a3e2e7bbe343c72de3be3f440c3f141a3595d29d0feb0f
##
# (C) Tenable, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not be used from within scripts released under another license without
# the authorization from Tenable, Inc.
#
###

##
#  Forescout CounterACT shell handler
##
namespace sshlib
{
  # Qll timeouts are controlled by a timer with 1s resolution, for that reason keep the shell timeout sufficiently beyond
  # the timer resolution (10s = 10x resolution)
  global_var _COUNTERACT_DEFAULT_CMD_TIMEOUT = 60;
  global_var _COUNTERACT_DEFAULT_INACTIVITY_TIMEOUT = 45;
  global_var _COUNTERACT_INITIAL_INACTIVITY_TIMEOUT = 2;

  # cmd_prompt
  global_var _COUNTERACT_CMD_PROMPT = '>';

  # cmd_states
  global_var _COUNTERACT_CMD_STATE_INIT = 0;
  global_var _COUNTERACT_CMD_STATE_SEND_REQ = 1;
  global_var _COUNTERACT_CMD_STATE_RECV_RSP = 2;
  global_var _COUNTERACT_CMD_STATE_AT_PROMPT = 3;

  ##
  # callback function that checks for either a timeout or buffer update
  #
  # @param  session   Session handle for ssh session
  # @param  channel   Channel for ssh session
  #
  # @return TRUE if timeout reached
  # @category SSH
  ##
  function forescout_counteract_shell_handler_incoming_data_timeout_cb(session, &channel)
  {
    var fn = 'forescout_counteract_shell_handler::' + FUNCTION_NAME;
    var sh = channel.shell_handler;
    var obj_ch_id = 'forescout_counteract_shell_handler [channel ' + channel.local_channel + ']: ';

    if (!channel)
    {
      dbg::detailed_log(lvl:1, src:fn, msg:'Channel does not exist');
      return TRUE;
    }
    if (channel.state == sshlib::CHANNEL_STATE_CLOSED)
    {
      dbg::detailed_log(lvl:1, src:fn, msg:obj_ch_id + 'Channel is closed.');
      return TRUE;
    }
    dbg::detailed_log(lvl:3, src:fn, msg:obj_ch_id + '_COUNTERACT_STATE : ' + sh.cmd_state);
    return sh.check_inactivity_timeout(channel:channel);
  }

  ##
  # callback function that checks for buffer update, timeout or shell prompt
  #
  # @param session session handle for ssh session
  # @param channel channel for ssh session
  #
  # @return TRUE if found
  # @category SSH
  ##
  function forescout_counteract_shell_handler_incoming_data_timeout_or_prompt_cb(session, &channel)
  {
    var fn = 'forescout_counteract_shell_handler_incoming_data_timeout_or_prompt_cb';
    var obj_ch_id = 'forescout_counteract_shell_handler [channel ' + channel.local_channel + ']: ';
    # does a channel exist?
    if (isnull(channel))
    {
      dbg::detailed_log(lvl:1, src:fn, msg:'Channel does not exist');
      return TRUE;
    }
    if (channel.state == sshlib::CHANNEL_STATE_CLOSED)
    {
      dbg::detailed_log(lvl:1, src:fn, msg:obj_ch_id + 'Channel is closed.');
      return TRUE;
    }
    # does channel have a valid data buffer?
    if (isnull(channel.data_buf))
    {
      dbg::detailed_log(lvl:1, src:fn, msg:obj_ch_id + 'channel.data_buf does not exist');
      return TRUE;
    }
    if (isnull(channel.shell_handler))
    {
      dbg::detailed_log(lvl:1, src:fn, msg:obj_ch_id + 'Shell handler does not exist');
      return TRUE;
    }
    var sh = channel.shell_handler;
    dbg::detailed_log(lvl:3, src:fn, msg:obj_ch_id + '_COUNTERACT_STATE : ' + sh.cmd_state);

    return sh.at_prompt_or_timeout(channel:channel);
  }

  object forescout_counteract_shell_handler
  {
    var settings;
    var cmd_state;
    var cmd_last;
    var cmd_prompt;
    var cmd_timeout;
    var inactivity_timeout;
    var last_md5;
    var last_buffer_update_ts;
    var last_cmd_error = FALSE;
    var timed_out = FALSE;
    var previous_prompt;

    ##
    # Shell handler constructor
    #
    # @anonparam <first> Shell handler settings array
    # @category SSH
    ##
    function forescout_counteract_shell_handler()
    {
      settings = _FCT_ANON_ARGS[0];
      this.init(settings:settings);
    }

    ##
    # Returns terminal options
    #
    # @no53   If true don't populate flag 53 with any value - flag 53 (PTY_OPT_ECHO)
    #         reputedly breaks Palo Alto's SSH implementation. (optional)
    # @return Returns an array with a terminal carriage return Opcode
    ##
    public function get_pty_opts(no53)
    {
      if (isnull(no53)) no53 = FALSE;
      return make_array(PTY_OPT_OCRNL, 0);
    }

    ##
    # Sets the shell command prompt
    #
    # @anonparam <first> The prompt
    # @return Returns NULL
    # @category SSH
    ##
    public function set_cmd_prompt()
    {
      this.previous_prompt = this.cmd_prompt;
      this.cmd_prompt = _FCT_ANON_ARGS[0];
    }

    ##
    # Gets the shell command prompt
    #
    # @return Returns the command prompt
    # @category SSH
    ##
    public function get_cmd_prompt()
    {
      return this.cmd_prompt;
    }

    ##
    # Gets the command state
    #
    # @return Returns the command state
    ##
    public function get_cmd_state()
    {
      return this.cmd_state;
    }

    ##
    # Dummy function. Required on all shell handlers,
    # unused on forescout_counteract.
    #
    # @param [type:string]  Escalation type (i.e. su, cisco-enable)
    # @param [extra:string] Escalation password
    #
    # @return NULL
    ##
    public function set_priv_escalation(type, extra)
    {
      return NULL;
    }

    ##
    # Dummy function. Required on all shell handlers,
    # unused on forescout_counteract.
    #
    # @param [type:string]  Escalation type (i.e. su, cisco-enable)
    # @param [extra:string] Escalation password
    #
    # @return NULL
    ##
    public function unset_priv_escalation()
    {
      return NULL;
    }

    ##
    # get default PTY size in characters
    #
    # @return default PTY size in characters
    # @category SSH
    ##
    public function get_pty_size_chars()
    {
      # Make the default pty size large to avoid issues with truncation
      return make_list(200, 200);
    }

    ##
    # get default PTY size in pixels
    #
    # @return default PTY size in pixels
    # @category SSH
    ##
    public function get_pty_size_pixels()
    {
      return DEFAULT_PTY_SIZE_PIXELS;
    }

    ##
    # get PTY terminal
    #
    # @return default PTY terminal
    # @category SSH
    ##
    public function get_pty_term()
    {
      return DEFAULT_PTY_TERM;
    }

    ##
    # Should we send / recv data to device without setting up a channel?
    #
    # @return FALSE
    # @category SSH
    ##
    public function is_nosetup()
    {
      return FALSE;
    }

    ##
    # do we want to request a PTY on this device?
    #
    # @return TRUE
    # @category SSH
    ##
    public function send_pty_req()
    {
      return TRUE;
    }

    ##
    # do we want to handle the "shell" channel request?
    #
    # @category SSH
    ##
    public function get_shell_channel_request_cb()
    {
      return NULL;
    }

    ##
    # Sets the last command error.
    #
    # @anonparam <first> The last command error message.
    # @category SSH
    ##
    public function set_last_cmd_error()
    {
      this.last_cmd_error = _FCT_ANON_ARGS[0];
    }

    ##
    # Sets the shell command handling state
    #
    # @anonparam <first> Command state
    # @category SSH
    ##
    public function set_cmd_state(new_cmd_state)
    {
      var channel = _FCT_ANON_ARGS[0];
      if (!isnull(channel))
      {
        var obj_ch_id = 'forescout_counteract_shell_handler [channel ' + channel.local_channel + ']: ';
        dbg::detailed_log(lvl:3, src:'forescout_counteract_shell_handler.set_cmd_state',
          msg:obj_ch_id + ' updating from state ' + this.cmd_state + ' to state ' + new_cmd_state);
      }
      this.cmd_state = new_cmd_state;
    }

    ##
    # Receives data
    #
    # @param  channel   Channel for ssh session
    # @param  timeout   Timeout to use when receiving.
    #
    # @return the received data if succesful, NULL otherwise
    ##
    public function receive_data(&channel, timeout)
    {
      if (isnull(channel)) return NULL;
      var tout = this.cmd_timeout;
      if (!isnull(timeout)) tout = timeout;

      var obj_ch_id = '[channel ' + channel.local_channel + ']: ';
      channel.clear_data_buf();
      channel.session.sshrecv_until(
        end_states     : make_list('SOC_CLOSED'),
        check_callback : @forescout_counteract_shell_handler_incoming_data_timeout_or_prompt_cb,
        channel        : channel,
        timeout        : timeout
      );

      if (empty_or_null(channel.data_buf))
      {
        if (this.timed_out)
          dbg::detailed_log(lvl:1, src:FUNCTION_NAME, msg:obj_ch_id + 'Timed out waiting for data from server after opening shell.');
        else
          dbg::detailed_log(lvl:1, src:FUNCTION_NAME, msg:obj_ch_id + 'No data received from server after opening shell.');
        return NULL;
      }
      if (channel.state == sshlib::CHANNEL_STATE_CLOSED)
      {
        dbg::detailed_log(lvl:1, src:FUNCTION_NAME, msg:obj_ch_id + 'Channel is closed.');
        return NULL;
      }
      dbg::detailed_log(lvl:2, src:FUNCTION_NAME, msg:'Received: ' + obj_rep(channel.data_buf));
      return channel.data_buf;
    }

    ##
    # Shell handler initialization
    #
    # @param settings Shell handler settings array
    # @category SSH
    ##
    public function init(settings)
    {
      this.cmd_last = '';
      this.cmd_prompt = _COUNTERACT_CMD_PROMPT;
      this.cmd_timeout = _COUNTERACT_DEFAULT_CMD_TIMEOUT;
      this.inactivity_timeout = _COUNTERACT_DEFAULT_INACTIVITY_TIMEOUT;
      this.cmd_state = _COUNTERACT_CMD_STATE_INIT;
      this.last_cmd_error = FALSE;
      this.last_buffer_update_ts = unixtime();

      if (!isnull(settings))
      {
        this.settings = settings;
        if ( !isnull(this.settings['cmd_prompt']) )
          this.cmd_prompt = this.settings['cmd_prompt'];
        if ( !isnull(this.settings['cmd_prompt']) )
          this.previous_prompt = this.settings['cmd_prompt'];
        if ( !isnull(this.settings['cmd_timeout']) )
          this.cmd_timeout = this.settings['cmd_timeout'];
      }
      else this.settings = make_array();
    }

    ##
    # Runs a given command.
    # If the ssh session is at a menu prompt it first sends the character 'q' to exit the menu, followed by character 'y'
    # to confirm exiting the menu prior to running the command. Otherwise, it directly attempts to run the command. 
    #
    # @param  channel                 Channel for ssh session
    # @param  command                 Cmd to run
    # @param  force_priv_escl         Force priv escalation flag
    # @param  cmd_timeout_min         The total number of seconds that may elapse waiting for the command response. (optional)
    # @param  inactivity_timeout_min  The number of seconds that may elapse with no data received from the target. (optional)
    #
    # @return command result or NULL on failure
    # @category SSH
    ##
    public function run_command(&channel, command, force_priv_escl, cmd_timeout_min, inactivity_timeout_min)
    {
      var fn = 'forescout_counteract_shell_handler::' + FUNCTION_NAME;
      if (isnull(channel.session)) return NULL;
      var session = channel.session;
      var obj_ch_id = '[channel ' + channel.local_channel + ']: ';
      var cmd_logger = new('sshlib::cmd_logger');
      var kb_id = session.get_kb_connection_id();
      var kb_base = SSH_LIB_KB_PREFIX + kb_id;
      var initial_recv_timeout = _COUNTERACT_INITIAL_INACTIVITY_TIMEOUT;
      if (isnull(force_priv_escl)) force_priv_escl = FALSE;
      if (this.last_cmd_error)
        return session.set_error(obj_ch_id + 'ERROR - shell is in unknown state from last interaction, no additional commands via this shell will be executed.');
      # Reset default timeouts
      this.inactivity_timeout = _COUNTERACT_DEFAULT_INACTIVITY_TIMEOUT;
      this.cmd_timeout = _COUNTERACT_DEFAULT_CMD_TIMEOUT;
      # If custom inactivity_timeout and cmd_timeout values are passed,
      # ensure the values in use meet or exceed passed values
      if (inactivity_timeout_min && this.inactivity_timeout < inactivity_timeout_min) this.inactivity_timeout = inactivity_timeout_min;
      if (cmd_timeout_min && this.cmd_timeout < cmd_timeout_min) this.cmd_timeout = cmd_timeout_min;

      # receive the post login data on init
      if (this.cmd_state == _COUNTERACT_CMD_STATE_INIT) {
        receive_data(channel:channel, timeout:initial_recv_timeout);
        this.cmd_state = _COUNTERACT_CMD_STATE_AT_PROMPT;
      }

      # Sending passed command
      this.last_buffer_update_ts = unixtime();
      channel.clear_data_buf();
      dbg::detailed_log(lvl:2, src:FUNCTION_NAME, msg:'Sending command: ' + command);
      set_cmd_prompt(_COUNTERACT_CMD_PROMPT);
      channel.window_send_data(data:command + '\r\n');
      var recv_data = receive_data(channel:channel, timeout:this.cmd_timeout);
      recv_data = preg_replace(pattern:"^.*?\r\n(.*)\r\n.*", replace:"\1", string:recv_data);

      cmd_logger.add(
        cmd                : this.cmd_last,
        response           : recv_data,
        error              : session.cmd_error,
        priv_escl_failed   : FALSE,
        user               : session.user
      );
      return recv_data;
    }

    ##
    # Determines if the shell is back at the command prompt. 
    #
    # @param      buf     The incoming data buffer
    # @anonparam  First   The channel belonging to the shell handler
    #
    # @return TRUE if at prompt, otherwise NULL
    ##
    function at_cmd_prompt(buf)
    {
      if (isnull(buf)) return FALSE;
      var channel = _FCT_ANON_ARGS[0];
      var lines = split(buf, sep:'\n', keep:FALSE);
      var last_line = lines[max_index(lines)-1];
      if (this.cmd_prompt && last_line =~ this.cmd_prompt + "$")
        return TRUE;
      return FALSE;
    }

    ##
    # Determines if the shell is at the prompt or a timeout has occurred
    #
    # @param channel the channel belonging to the shell handler
    #
    # @return TRUE if at prompt or timed out, otherwise FALSE
    ##
    public function at_prompt_or_timeout(&channel)
    {
      if (!channel) return NULL;
      if (at_cmd_prompt(buf:channel.data_buf, channel)) return TRUE;
      return check_inactivity_timeout(channel:channel);
    }
    ##
    # Determines if there has been a timeout to inactivity
    #
    # @param channel the channel belonging to the shell handler
    #
    # @return TRUE if timeout reached, otherwise FALSE
    ##
    function check_inactivity_timeout(&channel)
    {
      var fn = 'forescout_counteract_shell_handler.check_inactivity_timeout';
      if (channel && channel.data_buf && strlen(channel.data_buf) > 0)
      {
        var new_md5 = MD5(channel.data_buf);
        if (this.last_md5 != new_md5)
        {
          if (!isnull(channel) && !isnull(channel.session)) dbg::detailed_log(lvl:2, src:FUNCTION_NAME, msg:"New data found, updating last_buffer_update_ts");
          this.last_md5 = new_md5;
          this.last_buffer_update_ts = unixtime();
          return FALSE;
        }
      }
      if (channel && (unixtime() - this.last_buffer_update_ts) >= this.inactivity_timeout)
      {
        if (channel.session) dbg::detailed_log(lvl:1, src:FUNCTION_NAME, msg:"Inactivity timeout.");
        this.timed_out = TRUE;
        return TRUE;
      }
      else if (!channel) return TRUE;
      return FALSE;
    }
  }
}
