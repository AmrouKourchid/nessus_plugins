#TRUSTED aae05a5ddc305e7ba5b7198d597a6d6e3626919f3c2cf8e476271ff6eeb02dda7651d34dd18fe64f2eb40782ef740f13946e9405e46e13f96c362463a7413107afb5ede040043cf95610cfa6e75ed13c9b867c7e628ec7a9eb226d119a2ff402fe77f1b5fe05a58a4e3fe6f96c3cfae6749f4dc6dd30d2bf7763090b022a0091c2db5a7512aee39564412f92117752acd9d6d86004782463eca01bf7ec2ac9b86c9cba38365ab38acc0862d74cf90820fa8040a923da4724198f33be8a4bcb8be6b8f829b8c0c8d3c76037c9115fbee92aa6413c92248ae36db122c4ee685bc04e00613632fb7b75f44445b7cdcb79aae476c7da59929bd7e7a0da531b5255faa4570d70369cb8573d905e01070fcd9b8a3ccc3b258e9c152e9cff2b6a8d241204e6e1e79aae37c6166596f11c3683fa1ab915eeeaea8ec519e2036a475dbf129f6121ae7dacd998849bcd749cc85f07079955c0188f3b39aa00a0268c6f1d537f28ea2d33db34cb2908ff741d31b8f043abfdb41f7057447953d2bb7e047631cf3c07e1a363bcf04562be4c1ea1900e40f9f1134dfef7bf893226c6465e5c0ba41673d7e592ccbf7c564a9d3aea8873bbabfeddad927220aaa106d051ab2e8a4dec546e4e7e30ca27b06a3c1ce4cbf31f91d6b2f6f024fb74f37c254734b4b287a98e338e0c9ee094ca416cac45ad0aaf1f6dbd86830cedd59fdbb95f716593
#TRUST-RSA-SHA256 a709ad3f4ceb5d30cfac492e301c69b11e80852c7316ca6aec1749bfec85c125ebdb4de9a2379bd3ef0d86b2c46e3206ec12deb4697b37bb151f616fd4331feebb4755a0a7eff95ca119a7ffee5965eced425b229be57483ead4145b66f524981e6382e548047bb0d79bf3eb4cda481cda5935381a6f38d2b1258bd105d7a015c387437a1040a9654698ee58ebf39ba41dad4f0e68f6a46056e5ac3971d4a45c849a1177dd2029aec957a21e383c3f26a8c2be4460656129cd4e6487d5d97c4abfee3ef1e10857ae3727201ed0c6ebdc2dfa40c276afe052d861de45f0b3e27b4f5b12c62df8b10d098d08c1811fe7ef17aebc62d276db3814d6fb6f69f4f7c82b3c11d7c4ad1ad68e6bdb76baf022fd841e9444bdb39d85ca8be3d7ad7c41ab65f80fda977f5c1b9c8d9a8b6b1dc5839263253ac48be077463d4b3015eded44471d2d8173d457bf98d0bdbd2eb8492bb2e7dcd98f182df37e3471dc52f5f5f99e3f58984ede366600b6ca7448eb89041685ba8abd0c15619fb46552e4917054c232456ea710ba2ccf01954482ef0cb53de7f53ded439a6ae70e38aa000688c91c89b16d187573e6156c6cb2ad514331736a8d0b90dcb66b9b343ea807f3b2b20defb4c3cb1c618743a5d7166a0356e52f645049703f7041b9df826035def630f47f2c0164c026128ded844d0f806f073473d2cf81f37406275f6392e39e3c51

# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.4

##
# Check post login buffer to see if this is a device supported by this file.
#
# @return Returns TRUE if the expected value is in the post login buffer, FALSE otherwise.
##
function is_aruba_cppm()
{
  if("Policy Manager CLI v" >< host_info_key_val['post_login_buffer'] &&
     "Hewlett Packard" >< host_info_key_val['post_login_buffer'])
  {
    dbg::detailed_log(lvl:1, src:FUNCTION_NAME,
                      msg:'Post login buffer contains "Policy Manager CLI v" and "Hewlett Packard".');
    return TRUE;
  }

  return FALSE;

}

#
# aruba_cppm_pre_check_fail
# check if this is a Aruba Clearpass Policy Manager based on information collected
#
function aruba_cppm_pre_check_fail()
{
  # have we already checked that the host is not Aruba CPPM?
  if(host_info_key_val['host_not_aruba_cppm'])
    return TRUE;
  if(!empty_or_null(host_info_key_val['showversion_unrecognized']) &&
     host_info_key_val['showversion_unrecognized'] !~ aruba_cppm_check['test_cmd_regex'])
    return TRUE;

  # Not Aruba Clearpass Policy Manager if one of the following devices
  if (is_cisco_firepower() ||
      is_cisco_ssh() ||
      is_cisco_nxos() ||
      is_timos_userauth() ||
      is_cisco_ucos() ||
      is_huawei() ||
      is_panos() ||
      is_acos() ||
      is_adtran() ||
      is_asyncos() ||
      is_staros() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

#
# callback for systems with "Policy Manager," in show version
#
function handle_aruba_cppm(session, use_shell_handler, &channel, cmd_res)
{
  var aruba_cppm_version_match, version;

  #Local checks just means we can run commands on the target host.
  report += '\nLocal checks have been enabled for this host.';

  replace_kb_item(name:"Host/Aruba_CPPM/show_ver", value:cmd_res);
  replace_kb_item(name:"Host/Aruba/CPPM", value:TRUE);

  aruba_cppm_version_match = pregmatch(pattern:"Policy Manager software version : ([0-9].+)(?:[\r\n]|$)",
                                      string:cmd_res, icase:TRUE);

  if(!isnull(aruba_cppm_version_match))
  {
    if(!isnull(aruba_cppm_version_match[1]))
      version = aruba_cppm_version_match[1];
    else
      version = "UNKNOWN";

    report += '\nThe remote system is a Aruba Clearpass Policy Manager: ' + version;
  }

  sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_UNAVAILABLE);
  if(isnull(aruba_cppm_version_match) || version == 'UNKNOWN')
  {
    failure_kb_msg = 'The remote host appears to be Aruba Clearpass Policy Manager.\n' +
                     'However, we were unable to parse the OS version from the output of running\n' +
                     'the "show version" command.';

    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    return TRUE;
  }

  report += '\nOS Security Patch Assessment is available for this host.';
  sshlib::enable_local_checks();
  replace_kb_item(name:"Host/OS/showver", value:"Aruba Clearpass Policy Manager " + version);
  replace_kb_item(name:"Host/OS/showver/Confidence", value:100);
  replace_kb_item(name:"Host/OS/showver/Type", value:"embedded");
}

#
# callback for systems without "Policy Manager" in show version
#
function handle_not_aruba_cppm(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/showversion", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['showversion_unrecognized'] = cmd_res;
    host_info_key_val['host_not_aruba_cppm'] = TRUE;
  }
}
