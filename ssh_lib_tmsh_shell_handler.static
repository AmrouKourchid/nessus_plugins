#TRUSTED 570a40c1a7c2f625949e3ca098a0a80a3ef47e5199ccbb9173d6115c7f330f12db9c33e0f98318c855f717e6e1ae46bfba5236a31b9eedec1ce89130f26db17ddf097db4a208d265e1ee09683d4b7e4e4208b558066b63187cdb42ad8c219b0e30b18aa5b4ba797d7eaad10445a37efeafd19a126410b9e16c563e75b18e094db5c804366805eff07bfa94d82d34ae5ed710ceeb2ea9a07476845f6e6159f6d6ef92c8b2135915b02e4aebaff9563e803e316c3001fb83bb37391e19548b86453d0a0648e2793bbbf40363aae8e0ac1b22aa87a4387d9c8945d70dd651a75c9c0d7a7df9b5c481ab6502693b3fb4bd515f6057bf03922f122840742f173c69e25a9320b78795a4ba526f197ebd5fc294020a41319ab330620202d5b6704585dd738f451021665ae605cb2e799d76cfdea7af37cfb8ed7c4c426fe2662ecd1432c46c3b4a4e840f84c52071160ecce08dbb2215204cf3982f446ba09220c89bd4338d8b917cb3e852a82a87cdf166f4664e85401881547cd7f88865d22a59522d45de3256bd0b96397034e6b6e3f2568fb76ee5139d623993870f92cf82b54286927776231ac405ab43829cd5af31819b95aa6d5e2cabbb93e6942d07aa54d0c2bf886e697fb4eb0228199719d09f9c7db855a2512e54036521b2b5160e70f8d17af943de954d6a3d1f415cae7c780d4bddd32d2d7970af5ce76386515ed466a7
#TRUST-RSA-SHA256 39600c333e019905add4c96fab7d5614e5068a104ddb7c85a7463cec1130b11638926b4108808b282772192b3a75ebce4dfe097db3c1ee7a713271c316ed079e63c52ad0496f0010e029690777e9e175af961d2ef1965337d8210ca9c90d4be17a5fe6b1637421fd49bf0f38971d4102a91e0ffb6985673f51a9b902682364331c671eb09c23714bcd39033c64a0d400ff0a0140ae16ce2d0f17170ed3c8647a7a53cb5174f29b0b2dbbc3660efaf8d84e47d36c73bbe3852e280e589dfd8da1f0f63e52e921d4a8e56a8d1a3fd678ea79ec0a42115ad071c3eaec6a8fb04646583cb0d7cbc9df7bc46de1ceba4948e4aefa5ad3fce18cbee6b8c09264a5abe641fc9a94a148c7ca46e7f806f021013e6584aafa47ecdc02a354fa6505aa8c3bff3d5662aafc6fbb912c5c820e180bb82a8622c62d6940af977b7311e1857e3a8a452a7f00c8d388445d796256a4c6781562f8fc0409bb75ba5072fd3706e11261163b26696b5fee7aa657f09250ecc0304a4251e45364c57073a57251f5460db11a7959a07a33adf745fec32a571d8cb3b121742ad6158c9d4a52a325274118b0a6b07378ad2b8a928315c60ac372ece0ee09d710ef293d9c03381db3bfcacf3edd7bcae5c0479f512a6773708894d77343abdba8bbf4750bba1174c01ef574501b1f70830f6ed7da523e5fa97b2190736ae99b3dca1404668e7c8ef1bf0e4c

# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.4


namespace sshlib
{
  global_var _TMSH_DEFAULT_PROMPT = ')#';
  global_var _TMSH_DEFAULT_CMD_TIMEOUT = 60;
  global_var _TMSH_DEFAULT_INACTIVITY_TIMEOUT = 45;
  global_var _TMSH_INITIAL_INACTIVITY_TIMEOUT = 2;
  global_var _TMSH_CMD_STATE_SEND_REQ = 0;
  global_var _TMSH_CMD_STATE_AT_PROMPT = 1;
  global_var _LESS_PATTERN = ".\[7m---\(less\s+[0-9]+%\)---.\[m.\[K";

  function tmsh_shell_handler_incoming_data_timeout_cb(session, channel)
  {
    var fn = 'tmsh_shell_handler_incoming_data_timeout_cb';
    var sh = channel.shell_handler;
    # does a channel exist?
    if ( isnull(channel) ) 
    {
      dbg::detailed_log(lvl:1, src:fn, msg:"Channel does not exist");
      return FALSE;
    }
    # does channel have a valid data buffer?
    if ( isnull(channel.data_buf) )
    {
      dbg::detailed_log(lvl:1, src:fn, msg:"Channel.data_buf does not exist");
      return FALSE;
    }
    if ( isnull(channel.shell_handler ) )
    {
      dbg::detailed_log(lvl:1, src:fn, msg:"Shell handler does not exist");
      return FALSE;
    }
    if("This account is currently not available" >< channel.data_buf)
      return FALSE;
    return sh.check_inactivity_timeout(channel:channel);
  }

  function tmsh_shell_handler_incoming_data_timeout_or_prompt_cb( session, channel )
  {
    var fn = 'tmsh_shell_handler_incoming_data_timeout_or_prompt_cb';
    var obj_ch_id = 'tmsh_shell_handler [channel '+channel.local_channel+']: ';
    var lines = split(channel.data_buf, sep:'\n', keep:FALSE);
    var last_line = lines[max_index(lines)-1];
    if("This account is currently not available" >< channel.data_buf)
      return FALSE;
    # does a channel exist?
    if ( isnull(channel) ) 
    {
      dbg::detailed_log(lvl:1, src:fn, msg:"Channel does not exist");
      return FALSE;
    }
    # does channel have a valid data buffer?
    if ( isnull(channel.data_buf) )
    {
      dbg::detailed_log(lvl:1, src:fn, msg:"Channel.data_buf does not exist");
      return FALSE;
    }
    if ( isnull(channel.shell_handler ) )
    {
      dbg::detailed_log(lvl:1, src:fn, msg:"Shell handler does not exist");
      return FALSE;
    }
    var sh = channel.shell_handler;
    if(pgrep(pattern:_LESS_PATTERN, string:last_line))
    {
      sh.set_less(TRUE);
      channel.window_send_data(data:' ');
      return FALSE;
    }
    if("(END)" >< last_line)
    {
      channel.window_send_data(data:'q\n');
      return FALSE;
    }

    return sh.at_prompt_or_timeout(channel:channel);

  }

  object tmsh_shell_handler
  {
    var settings;
    var cmd_state;
    var cmd_last;
    var cmd_prompt;
    var cmd_timeout;
    var inactivity_timeout;
    var last_md5;
    var last_buffer_update_ts;
    var last_cmd_error = FALSE;
    var fresh_shell = TRUE;
    var timed_out = FALSE;
    var previous_prompt;
    var less;
    var new_channel_needs_new_connection = TRUE;

    function tmsh_shell_handler()
    {
      settings = _FCT_ANON_ARGS[0];
      this.init(settings:settings);
    }

    function init(settings)
    {
      this.cmd_last = "";
      this.cmd_prompt = _TMSH_DEFAULT_PROMPT;
      this.cmd_timeout = _TMSH_DEFAULT_CMD_TIMEOUT;
      this.inactivity_timeout = _TMSH_DEFAULT_INACTIVITY_TIMEOUT;
      this.cmd_state = _TMSH_CMD_STATE_SEND_REQ;
      this.last_cmd_error = FALSE;
      this.last_buffer_update_ts = unixtime();
      if (!isnull(settings))
      {
        this.settings = settings;
        if ( !isnull(this.settings['cmd_prompt']) )
          this.cmd_prompt = this.settings['cmd_prompt'];
        if ( !isnull(this.settings['cmd_timeout']) )
          this.cmd_timeout = this.settings['cmd_timeout'];
      }
      else this.settings = make_array();
    }

    public function run_command(channel, command, force_priv_escl,
        cmd_timeout_min, inactivity_timeout_min)
    {
      var fn = 'tmsh_shell_handler.run_command';
      # Local reference to session, channel's reference gets deleted
      # if the channel gets closed
      var session = channel.session;
      var obj_ch_id = 'tmsh_shell_handler [channel '+channel.local_channel+']: ';
      var cmd_logger = new("sshlib::cmd_logger");
      var lines;
      var last_line;
      var kb_base = SSH_LIB_KB_PREFIX + session.get_kb_connection_id();
      if ( isnull(channel) )
      {
        return NULL;
      }
      if ( isnull(command) )
      {
        return NULL;
      }
      dbg::detailed_log(lvl:3, src:fn, msg:obj_ch_id +
        "In run_command");

      if( this.last_cmd_error )
      {
        session.set_error(obj_ch_id +
          'ERROR - shell is in unknown state from last interaction, ' +
          'no additional commands via this shell will be executed.');
        return NULL;
      }

      # Reset default timeouts
      this.inactivity_timeout = _TMSH_DEFAULT_INACTIVITY_TIMEOUT;
      this.cmd_timeout = _TMSH_DEFAULT_CMD_TIMEOUT;

      # If custom inactivity_timeout and cmd_timeout values are passed,
      # ensure the values in use meet or exceed passed values
      if (inactivity_timeout_min &&
          this.inactivity_timeout < inactivity_timeout_min)
        this.inactivity_timeout = inactivity_timeout_min;

      if (cmd_timeout_min &&
          this.cmd_timeout < cmd_timeout_min)
        this.cmd_timeout = cmd_timeout_min;

      if (this.fresh_shell)
      {
        var check_prompt;
        if(this.cmd_prompt != _TMSH_DEFAULT_PROMPT)
        {
          check_prompt = TRUE;
        }
        else
        {
          var post_login_buffer = get_kb_blob(kb_base + "/post_login_buffer");
          var tmp_prompt = get_kb_blob(kb_base + "/cmd_prompt");
          dbg::detailed_log(lvl:2, src:fn, msg:obj_ch_id +
            "Getting prompt on fresh shell.");

          check_prompt = FALSE;
        }

        var initial_recv_timeout = _TMSH_INITIAL_INACTIVITY_TIMEOUT;

        if(check_prompt)
        {
          dbg::detailed_log(lvl:2, src:fn, msg:obj_ch_id +
            "Using command prompt from previous login to find cmd prompt.");
          session.sshrecv_until(
            end_states     : make_list("SOC_CLOSED"),
            check_callback : @tmsh_shell_handler_incoming_data_timeout_or_prompt_cb,
            channel        : channel,
            cmd_timeout    : initial_recv_timeout
          );
        }
        else
        {
          dbg::detailed_log(lvl:3, src:fn, msg:obj_ch_id +
            "Waiting for inactivity period to find command prompt.");
          session.sshrecv_until(
            end_states     : make_list("SOC_CLOSED"),
            check_callback : @tmsh_shell_handler_incoming_data_timeout_cb,
            channel        : channel,
            cmd_timeout    : initial_recv_timeout
          );
        }

        if(empty_or_null(channel.data_buf))
        {
          if(this.timed_out)
            return session.set_cmd_error(obj_ch_id +
              "Timed out waiting for data from server after opening shell.");

          last_cmd_error = TRUE;
          return session.set_cmd_error(obj_ch_id +
            "No data received from server after opening shell.");
        }

        post_login_buffer = channel.data_buf;
        if(isnull(get_kb_item(kb_base + "/post_login_buffer")))
          set_kb_blob(name:kb_base + "/post_login_buffer", value:post_login_buffer);
        channel.clear_data_buf();
        this.fresh_shell = FALSE;

        lines = split(post_login_buffer, sep:'\n', keep:FALSE);
        this.cmd_prompt = lines[max_index(lines)-1];

        if(isnull(get_kb_item(kb_base + "/cmd_prompt")))
          set_kb_blob(name:kb_base + "/cmd_prompt", value:cmd_prompt);

        dbg::detailed_log(lvl:2, src:fn, msg:obj_ch_id +
          'Detected command prompt  "' + this.cmd_prompt + '".');

        if(strlen(this.cmd_prompt) == 0)
        {
          session.set_cmd_error(obj_ch_id +
            "Unable to detect command prompt on shell.");
          last_cmd_error = TRUE;
          return NULL;
        }

        this.settings['cmd_prompt'] = this.cmd_prompt;

      }

      if(channel.state == CHANNEL_STATE_CLOSED)
      {
        session.set_cmd_error(obj_ch_id + "Channel is closed.");
        last_cmd_error = TRUE;
        return NULL;
      }

      this.cmd_last = command + '\n';

      var ret = NULL;
      session.reset_cmd_interrupted();

      dbg::detailed_log(lvl:1, src:fn, msg:"sending command: " + cmd_last);
      channel.clear_data_buf();
      this.last_buffer_update_ts = unixtime();
      this.cmd_state = _TMSH_CMD_STATE_SEND_REQ;
      dbg::detailed_log(lvl:3, src:fn, msg:
        "cmd_state:_TMSH_CMD_STATE_SEND_REQ(" + this.cmd_state + ")");
      channel.window_send_data(data:cmd_last);
      session.sshrecv_until(
        end_states     : make_list("SOC_CLOSED"),
        check_callback : @tmsh_shell_handler_incoming_data_timeout_or_prompt_cb,
        channel        : channel,
        cmd_timeout    : this.cmd_timeout
      );

      if(channel && channel.data_buf )
      {

        ret = channel.data_buf;


        if ( this.cmd_state != _TMSH_CMD_STATE_AT_PROMPT )
        {
          if(strlen(this.cmd_prompt) >= 10)
          {
            lines = split(channel.data_buf, sep:'\n', keep:FALSE);
            last_line = lines[max_index(lines)-1];
            var prompt_start = substr(this.cmd_prompt, 0, 9);
            if(prompt_start >< last_line)
            {
              var context = "unknown";
              var pattern = "\(([a-z.]+)\)#";
              var matches = pregmatch(pattern:pattern, string:last_line);
              if(!isnull(matches) && !isnull(matches[1]))
                context = matches[1];
              session.set_cmd_error(obj_ch_id + 
                  "There was an attempt to switch to context " +context+
                  ". Context switching is not currently supported."+
                  " Either operate from the root context or add the support" +
                  " to the tmsh shell handler.");
              this.last_cmd_error = TRUE;
              cmd_logger.add(
                cmd                : this.cmd_last,
                response           : ret,
                error              : channel.session.cmd_error,
                ran_with_priv_escl : FALSE,
                forced_escl        : FALSE,
                priv_escl_failed   : FALSE,
                user               : channel.session.user
              );
              return NULL;
            }
          }

          session.set_cmd_error(obj_ch_id +
            "Unable to return to command prompt after last command.");
        cmd_logger.add(
          cmd                : this.cmd_last,
          response           : ret,
          error              : channel.session.cmd_error,
          ran_with_priv_escl : FALSE,
          forced_escl        : FALSE,
          priv_escl_failed   : FALSE,
          user               : channel.session.user
        );
          this.last_cmd_error = TRUE;
          return NULL;
        }

        ret = chomp(string_reverse(chomp(string_reverse(remove_cmd_prompt(cmd_res:ret)))));


      }
      cmd_logger.add(
        cmd                : this.cmd_last,
        response           : ret,
        error              : channel.session.cmd_error,
        ran_with_priv_escl : FALSE,
        forced_escl        : FALSE,
        priv_escl_failed   : FALSE,
        user               : channel.session.user
      );
      set_less(FALSE);
      return ret;
    }

    public function set_less()
    {
      this.less = _FCT_ANON_ARGS[0];
    }

    public function remove_cmd_prompt(cmd_res)
    {
      var idx = stridx(cmd_res, this.cmd_prompt);
      var ret = cmd_res;

      if(idx >= 1)
        ret = substr(cmd_res, 0, idx-1);

      ret = str_replace(string:ret, find:'\r', replace:'');
      # first line will be the command echoed. Remove
      idx = stridx(ret, '\n');
      ret = substr(ret, idx+1);
      # if output was paged with less, remove formatting. Don't remove by default
      # in case the more generic regexes take actual data.
      if(this.less)
      {
        ret = ereg_replace(pattern:_LESS_PATTERN, string:ret, replace:'\n');
        ret = ereg_replace(pattern:"\(END\)", string:ret, replace:"");
        ret = ereg_replace(pattern:".\[\??[0-9]?[Kmlh]", string:ret, replace:"");
        ret = ereg_replace(pattern:".[>=]$", string:ret, replace:"");
      }

      return ret;

    }

    public function set_cmd_prompt()
    {
      this.cmd_prompt = _FCT_ANON_ARGS[0];
    }

    ##
    # Returns terminal options
    #
    # @no53   If true don't populate flag 53 with any value - flag 53 (PTY_OPT_ECHO)
    #         reputedly breaks Palo Alto's SSH implementation. (optional)
    # @return Returns an array with a terminal carriage return Opcode
    ##
    public function get_pty_opts(no53)
    {
      if(isnull(no53))
        no53 = FALSE;

      return make_array(PTY_OPT_OCRNL, 0);
    }

    public function get_pty_size_chars()
    {
      return make_list(80, 500);
    }

    public function get_pty_size_pixels()
    {
      return DEFAULT_PTY_SIZE_PIXELS;
    }

    public function get_pty_term()
    {
      return DEFAULT_PTY_TERM;
    }

    public function send_pty_req()
    {
      return TRUE;
    }

    ##
    # do we want to handle the "shell" channel request?
    #
    # @category SSH
    ##
    public function get_shell_channel_request_cb()
    {
      return NULL;
    }

    public function is_nosetup()
    {
      return FALSE;
    }

    public function set_cmd_state(new_cmd_state)
    {
      this.cmd_state = new_cmd_state;
    }

    function at_cmd_prompt(buf)
    {
      var lines = split(buf, sep:'\n', keep:FALSE);
      var last_line = lines[max_index(lines)-1];
      if(this.cmd_prompt >< last_line)
      {
        this.set_cmd_state( new_cmd_state: _TMSH_CMD_STATE_AT_PROMPT);
        return TRUE;
      }
    }

    public function check_inactivity_timeout(channel)
    {
      var fn = 'tmsh_shell_handler.check_inactivity_timeout';
      var obj_ch_id = 'tmsh_shell_handler [channel ]: ';
      if ( channel && channel.data_buf && strlen(channel.data_buf) > 0 )
      {
        var new_md5 = MD5( channel.data_buf );
        if ( this.last_md5 != new_md5 )
        {
          this.last_md5 = new_md5;
          this.last_buffer_update_ts = unixtime();
          return FALSE;
        }
      } 
      if ((unixtime() - this.last_buffer_update_ts) >= this.inactivity_timeout)
      {
        this.timed_out = TRUE;
        return TRUE;
      }
      return FALSE;
    }

    public function at_prompt_or_timeout(channel)
    {
      if(at_cmd_prompt(buf:channel.data_buf)) return TRUE;
      return check_inactivity_timeout(channel:channel);
    }

    public function set_priv_escalation(type, extra)
    {
      return NULL;
    }

    public function unset_priv_escalation()
    {
      return NULL;
    }
  }
}
