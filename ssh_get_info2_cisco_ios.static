#TRUSTED 008067e23e4ae6d7638dbab45cc44d013d16ccc56d0c672163d61137b5d31bed9d5c6ec95da51516664a4215dc553b7fd8119f82a005337a18ddad87101daac22b56ae0a21c12683bfa015c9ec44a5eeb612799c82d13a3993ce6908b517d6acaf81cb6362fb2a9c32563cd5882e97e12990c25416bd9bdc70aaad92d5118badb16e85db76ad37b520c3e0dece2ab8a5c113e19ae06a4c03b57095423a6c9864d8000efb465aa9c1445357298a22a5830905c1f567cdafbfeaa48b29ce3002839069e41be0633c4d7c62b0f4827b9a060a2202440f0bb2eb26432410d0041f690265c793c363765b7ca9cd3cfe209fb0be5e159f78288b2269b460859368be530ccaaa2b29b9faa6cf11fe8c9ce9b637e190ec29c53a811b20bc8719d3401b9b953ffe6ee3b4c69bee7cf4131f486619396f5ce079599e3196abf7bccf35c55753d2047dd4b860bb6ec253911b9b00b2a2f36a0c7dc2904fc65e517e5ae9e6903bc051b0aed7144beb004ce2d9b59c1b126c806f6f8bfaf36eb136f23aac2416b3c860e6a21138f98f2a2b2f463778421d52c4a445eddf48440cce98c7307fc2a920f2f8de2612d51d52f329046366598c5aa8d9f08c2aa768e4b159cb51e1aa014e90d45c748f3a2799bab660c3ad4876839a62e7e4071671a2426727cce7a619e4c27369f17c195509b078745dadd1542d64776d6eb4421e040fbe846393c5
#TRUST-RSA-SHA256 1060051e3d6d3f068b7ecd53b4d19970295543f7286bb5733b88705c5f1f79e6db085b0d6187e579f88714bda4238e68359048d35eaf74cc3ec8cd258d5478f75ac3d45403f5c5f509db1b4dbc2573ced8881474b150082e66cbcceed10396a4cb98c50be752e0a981e9f0438944a4f9e4e7bdefac4a34f185cb2bebf7c5f1b58911c224bf769810aa917b2aa34027768b7fa149acb44b574e6c1bcdfa07db6ac83670e9970b4d0b7d3e87b64d02937795a3cacc03427bb5e828d36b2d8662697313dec2e700417a6d7c7dd95b8b3d04324ebf484b90b9abca05ac1f95c90a41f9d2ad7621abb90aa55da2c89a11d84f2ece3c4b11725164355880d344675237e2d9dfb204cf3c97a4e8127d56743d4d740efe2f3313296df9553831bd881eb756dec6fd51e4f53cd232d7ea52544bc36c17405c60510e9448bfb3d42dbe9c4092f8d6c82b53826ee78a226faad4175e875498329a277e3e596fbdc0c73fdcedd0e3a72cf238ea6d78b1a90bc9c03c46e8cac5cc7c499bdf60127cbd27e8c21f8069b3cfe1bf541e368671cd0e25b75077c4568cf1b00e0710af19d13fab77df50b37eedc7c21fe68a59a2aa98e397eaf524cbb8e7dc1781f0a3e44b48d15f07b7eb9f6de50a11f673360975b94a97f287fc37be51c98405d5616fee8505edb0d33a650860f5bf5519d94a31add5e7145934d6ce8c30afa33eb2d770c9e481e5


# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.24

#
# Check host information for triggers that the device is most likely supported
# by this file.
#
function is_cisco_ssh()
{
  if("-Cisco-" >< host_info_key_val['remote_ssh_banner'])
  {
    dbg::log(src:'is_cisco_ssh', msg:'"-Cisco-" found in SSH banner.');
    return TRUE;
  }

  return FALSE;
}

#
# ios_pre_check_fail
# check if this is a ios device based on information collected
#
function ios_pre_check_fail()
{
  # have we already checked that the host is not ios?
  if(host_info_key_val['host_not_ios'])
  {
    # already checked that host is not ios, no need to check again
    return TRUE;
  }

  if(!empty_or_null(host_info_key_val['showversion_unrecognized']) &&
     host_info_key_val['showversion_unrecognized'] !~ ios_check['test_cmd_regex'])
    return TRUE;

  if('-Cisco-2' >< host_info_key_val['remote_ssh_banner'])
  {
    # Device is IOS-XR, which is not supported yet.
    return TRUE;
  }

  # Not IOS if one of the following devices
  if (is_cisco_firepower() ||
      is_cisco_nxos() ||
      is_timos_userauth() ||
      is_cisco_ucos() ||
      is_huawei() ||
      is_panos() ||
      is_acos() ||
      is_adtran() ||
      is_asyncos() ||
      is_staros() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

function handle_ios_xe(session, use_shell_handler, &channel, show_ver)
{
  var ver_string;
  if ('IOS XE Software' >< show_ver)
  {
    ver_string = pregmatch(string:show_ver, pattern:"Cisco IOS XE Software.*");
    if(!empty_or_null(ver_string))
      replace_kb_item(name:'Host/Cisco/IOS-XE', value:ver_string[0]);
  }
  # Denali, Fuji and Everest are IOS XE, but sometimes the 'XE' string is not in their names.
  else if ('Version 16' >< show_ver)
  {
    ver_string = pregmatch(string:show_ver, pattern:"IOS Software.*Version [0-9.]+");
    if(!empty_or_null(ver_string))
    {
      replace_kb_item(name:'Host/Cisco/IOS-XE', value:ver_string[0]);
    }
  }
  var show_idprom_backplane = run_command(cmd:'show idprom backplane',
                          session:session,
                          use_shell_handler:use_shell_handler,
                          channel:channel,
                          force_priv_escl:TRUE);
  if(!empty_or_null(show_idprom_backplane) && 'Invalid input' >!< show_idprom_backplane && 'Incomplete command' >!< show_idprom_backplane)
  {
    replace_kb_item(name:'Host/Cisco/show_idprom_backplane', value:show_idprom_backplane);
  }
  var show_idprom_chassis = run_command(cmd:'show idprom chassis',
                          session:session,
                          use_shell_handler:use_shell_handler,
                          channel:channel,
                          force_priv_escl:TRUE);
  if(!empty_or_null(show_idprom_chassis) && 'Invalid input' >!< show_idprom_chassis && 'Incomplete command' >!< show_idprom_chassis)
  {
    replace_kb_item(name:'Host/Cisco/show_idprom_chassis', value:show_idprom_chassis);
  }
  var show_hardware = run_command(cmd:'show hardware',
                          session:session,
                          use_shell_handler:use_shell_handler,
                          channel:channel,
                          force_priv_escl:TRUE);
  if(!empty_or_null(show_hardware) && 'Invalid input' >!< show_hardware && 'Incomplete command' >!< show_hardware)
  {
    replace_kb_item(name:'Host/Cisco/show_hardware', value:show_hardware);
  }
  # check if IOS-XE is prior to 17.2
  var major_version = pregmatch(string:show_ver, pattern:"Version ([0-9.]{5})");
  if (!empty_or_null(major_version))
  {
    # remove trailing '.'
    var major_version_parsed = ereg_replace(pattern:"\.$", replace:"", string:major_version[1]);
    # if prior to 17.2 then we should first check what image the target is running.
    if(ver_compare(ver:major_version_parsed, fix:'17.2') < 0)
    {
      var show_image = run_command(cmd:'show software authenticity running',
                              session:session,
                              use_shell_handler:use_shell_handler,
                              channel:channel,
                              force_priv_escl:TRUE);

      if (!empty_or_null(show_image))
      {
        replace_kb_item(name:'Host/Cisco/show_software_authenticity_running', value:show_image);
        var show_image_parsed = pregmatch(string:show_image,pattern:"^PACKAGE .*(ucmk9|universalk9)");
        if (!empty_or_null(show_image_parsed)) var image = show_image_parsed[1];
        # if IOS XE SDWAN image then we gather relevant SDWAN info
        if (tolower(image) == 'ucmk9')
        {
          replace_kb_item(name:'Host/Cisco/SDWAN', value:1);
          var show_sdwan_system = run_command(cmd:'show sdwan system',
                                          session:session,
                                          use_shell_handler:use_shell_handler,
                                          channel:channel,
                                          force_priv_escl:TRUE);

          if(!isnull(show_sdwan_system))
          {
            replace_kb_item(name:'Host/Cisco/show_sdwan_system', value:show_sdwan_system);
            # grab model
            var show_sdwan_system_model = pregmatch(string:show_sdwan_system,pattern:"[Mm]odel name:\s+(.*)\r\n");
            if (!empty_or_null(show_sdwan_system_model))
            {
              replace_kb_item(name:'Host/Cisco/SDWAN/Model', value: show_sdwan_system_model[1]);
            }
            # grab version
            var show_sdwan_system_version = pregmatch(string:show_sdwan_system,pattern:"[Vv]ersion: ([0-9.]+)");
            if (!empty_or_null(show_sdwan_system_version))
            {
              replace_kb_item(name:'Host/Cisco/SDWAN/Version', value: show_sdwan_system_version[1]);
            }
          }
        }
      }
    }
    # otherwise we should check if target is in autonomous mode (default) or controller mode.
    else
    {
      var operating_mode = pregmatch(string:show_ver, pattern:"Router operating mode:\s+(Autonomous|Controller-Managed)");
      if (!empty_or_null(operating_mode))
      {
        replace_kb_item(name:'Host/Cisco/IOS-XE/operating_mode', value:operating_mode[1]);
        if (operating_mode[1] >< 'Controller-Managed') replace_kb_item(name:'Host/Cisco/SDWAN', value:1);
      }
    }
  }
}

#
# callback for systems with "ios..." in show version
#
function handle_ios(session, use_shell_handler, &channel, cmd_res)
{
  var out, cmd_no_spaces, cmd, commands, cmd_output, cmd_prompt, os, i, priv, model;
  replace_kb_item(name:"Host/Cisco/show_ver", value:cmd_res);
  replace_kb_item(name:"Host/Cisco/show_version", value:cmd_res);

  if('IOS XE Software' >< cmd_res || 'Version 16' >< cmd_res)
  {
    os = 'Cisco IOS XE';
    handle_ios_xe(session:session, use_shell_handler:use_shell_handler, channel:channel, show_ver:cmd_res);
  }
  else if ('IOS Software' >< cmd_res || cmd_res =~ "IOS\s\(tm\).+Software")
  {
    # Otherwise, Cisco IOS
    replace_kb_item(name:"Host/Cisco/IOS", value:1);
    os = 'Cisco IOS';
  }
  else
  {
    failure_kb_msg =
      'The remote operating system appears to be a type of Cisco IOS\n' +
      'software, however it was not possible to determine the specific OS.';
    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    return NULL;
  }

  report += '\nLocal checks have been enabled for ' + os + '.';

  model = pregmatch(string:cmd_res, pattern:"Cisco IOS.*\((.*)\),?  *Version");

  if(model)
  {
    model = model[1];
    set_kb_item(name:'Host/Cisco/device_model', value:model);

    # In the case of ISR/IOS-XE and possibly other devices, more detailed model information can be found by looking for
    # cisco...processor as in the cisco_ios_version.nasl detection
    var m = pregmatch(string:cmd_res, pattern: "[Cc]isco ([^\(\\r]+) \([^\)]+\) processor");

    if (!empty_or_null(m))
      model = m[1];

    if (!empty_or_null(model))
      replace_kb_item(name:"Host/Cisco/device_model", value: model);
    if(!empty_or_null(CISCO_DEVICES[model]))
      set_kb_item(name:'Host/Cisco/device_type', value:CISCO_DEVICES[model]);
    else if(preg(string:model, pattern:"^WS-"))
      set_kb_item(name:'Host/Cisco/device_type', value:'switch');
    else
      set_kb_item(name:'Host/Cisco/device_type', value:'router');
  }


  if (strlen(get_preference("Cisco IOS Compliance Checks[file]:Policy file #1 :")) > 0)
  {
    commands = make_list(
      'show config',
      'show running all',
      'show startup',
      'show snmp user'
    );

   foreach cmd (commands)
   {
     cmd_no_spaces = str_replace(find:" ", replace:"_", string:cmd);

     cmd_output = run_command(cmd:cmd,
                    session:session,
                    use_shell_handler:use_shell_handler,
                    channel:channel,
                    force_priv_escl:TRUE);
     if (isnull(cmd_output))
     {
       set_kb_item(name:"Host/Cisco/"+cmd_no_spaces+"/errmsg", value:"The command failed to produce any output.");
     }
     else
     {
       if ('^\r\n% ' >< cmd_output || '^\r\nERROR: % ' >< cmd_output)
       {
         i = stridx(cmd_output, '^\r\n% ');
         if (i == -1) i = stridx(cmd_output, '^\r\nERROR: % ');

         # nb: make sure the error marker appears either at the start or
         #     after a series of spaces.
         if (i == 0 || (i > 0 && preg(pattern:"^ +$", string:substr(cmd_output, 0, i-1))))
         {
           if (session.shell_handler)
             cmd_prompt = session.shell_handler.get_cmd_prompt();
           set_kb_item(name:"Host/Cisco/"+cmd_no_spaces+"/errmsg", value:cmd_prompt+cmd+'\r\n'+cmd_output);
         }
         else set_kb_item(name:"Host/Cisco/"+cmd_no_spaces+"/errmsg", value:"An unknown error occurred :"+'\r\n'+cmd_output);
       }
       else set_kb_item(name:"Secret/Host/Cisco/"+cmd_no_spaces, value:cmd_output);
     }
   }
  }
  cmd_output = run_command(
                cmd:'show running-config',
                session:session,
                use_shell_handler:use_shell_handler,
                channel:channel,
                force_priv_escl:TRUE);
  if(cmd_output)
    set_kb_item(name:"Secret/Host/Cisco/Config/show_running-config", value:cmd_output);
  cmd_output = run_command(
                cmd:'show running-config all',
                session:session,
                use_shell_handler:use_shell_handler,
                channel:channel,
                force_priv_escl:TRUE);
  if(cmd_output)
    set_kb_item(name:"Secret/Host/Cisco/Config/show_running-config_all", value:cmd_output);
    
    # Check for IKEv1 Fragmentation
    var ike_v1_enabled_flag = FALSE;
    var ike_v1_enabled = NULL;
    if('crypto isakmp fragmentation' >< get_kb_item("Secret/Host/Cisco/Config/show_running-config_all"))
    {
      ike_v1_enabled_flag = TRUE;
      ike_v1_enabled = pgrep(string:get_kb_item("Secret/Host/Cisco/Config/show_running-config_all"),pattern:'crypto isakmp fragmentation');
      
      # Set the only value, we need, to prove that crypto isakmp fragmentation is enabled
      replace_kb_item(name:"Host/Cisco/Config/show_running-config_all | include crypto isakmp fragmentation-1", value:ike_v1_enabled);
      replace_kb_item(name:"Host/Cisco/Config/ike_v1_enabled_flag", value:ike_v1_enabled_flag);
    }

    # If the first check: Check for IKEv1 Fragmentation was not successful, we'll go through these checks for include crypto isakmp fragmentation
    # If the command 'show running-config | include crypto isakmp fragmentation' outputs anything, the device is flagged as vulnerable
    if(empty_or_null(ike_v1_enabled))
    {
      if (!empty_or_null(get_kb_item("Secret/Host/Cisco/Config/show_running-config_all")))
      {  
        ike_v1_enabled = pgrep(string:get_kb_item("Secret/Host/Cisco/Config/show_running-config_all"),pattern:'crypto isakmp fragmentation');
        if (!empty_or_null(ike_v1_enabled))
        {
          ike_v1_enabled_flag = TRUE;
          replace_kb_item(name:"Host/Cisco/Config/show_running-config_all | include crypto isakmp fragmentation-2", value:ike_v1_enabled);
          replace_kb_item(name:"Host/Cisco/Config/ike_v1_enabled_flag", value:ike_v1_enabled_flag);
        }
      }
      
      if (!empty_or_null(get_kb_item("Secret/Host/Cisco/Config/show_running-config")))
      {
        ike_v1_enabled = pgrep(string:get_kb_item("Secret/Host/Cisco/Config/show_running-config"),pattern:'crypto isakmp fragmentation');
        if (!empty_or_null(ike_v1_enabled))
        {
          ike_v1_enabled_flag = TRUE;
          replace_kb_item(name:"Host/Cisco/Config/show running-config | include crypto isakmp fragmentation-3", value:ike_v1_enabled);
          replace_kb_item(name:"Host/Cisco/Config/ike_v1_enabled_flag", value:ike_v1_enabled_flag);
        }
      }

      if (empty_or_null(get_kb_item(("Secret/Host/Cisco/Config/show_running-config_all"))) && empty_or_null(get_kb_item("Secret/Host/Cisco/Config/show_running-config")))
      {
        var ike_v1_check = run_command(cmd:'show running-config all | include crypto isakmp fragmentation',session:session,use_shell_handler:use_shell_handler,channel:channel,force_priv_escl:TRUE);
        if (!empty_or_null(ike_v1_check))
        {
          ike_v1_enabled_flag = TRUE;
          replace_kb_item(name:"Host/Cisco/Config/show running-config_all | include crypto isakmp fragmentation-4", value:ike_v1_check);
          replace_kb_item(name:"Host/Cisco/Config/ike_v1_enabled_flag", value:ike_v1_enabled_flag);
        }
      }
    }
    
    # Check open ports: 500|848|4500|4848 + ike_v1_enabled_flag = Vulnerable device 
    # Note: both conditions has to be true, in order to be vulnerable
    var udp_ports = run_command(cmd:'show udp | include 500|848|4500|4848', session:session, use_shell_handler:use_shell_handler, channel:channel, force_priv_escl:TRUE);
    if (!empty_or_null(udp_ports))
    {
      set_kb_item(name:"Host/Cisco/Config/show running-config | show udp", value:udp_ports); 
    }

  cmd_output = run_command(cmd:'show software version', session:session, use_shell_handler:use_shell_handler, channel:channel);
  if(!isnull(cmd_output))
  {
    replace_kb_item(name:"Host/Cisco/show_software_version", value:cmd_output);
  }

  get_cisco_mac_addrs(systype:"IOS", session:session, use_shell_handler:use_shell_handler, channel:channel);

  var max_privs = 0;

  cmd_output = run_command(
                cmd:'show privilege',
                session:session,
                use_shell_handler:use_shell_handler,
                channel:channel,
                force_priv_escl:TRUE);
  if(cmd_output && "Current privilege level is" >< cmd_output)
  {
    priv = pregmatch(pattern:'Current privilege level is ([0-9]*)', string:cmd_output);
    if(priv && priv[1])
    {
      priv = int(priv[1]);

      if(priv == 15)
        max_privs = 1;

      set_kb_item(name:'Host/Cisco/show_privilege', value:priv);
    }
  }

  if(!isnull(session))
    replace_kb_item(name:"Host/Auth/SSH/" + session.get_port() + "/MaxPrivs", value:max_privs);

  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_cisco_ios.static', value: 336);
  report += '\nOS Security Patch Assessment is available for ' + os + '.';
}

#
# callback for systems without "IOS..." in show version
#
function handle_not_ios(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/showversion", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['showversion_unrecognized'] = cmd_res;
    host_info_key_val['host_not_ios'] = TRUE;
  }
}
