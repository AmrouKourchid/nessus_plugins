#TRUSTED 9789b28323d62ea433a55f53eecf3ed51c5d971898e859ffecb0d638da9ad1a6d11ccb6405d59f54da931bedcaaecfcba8909b29281f240d0728ab7595729e8692b2ea402f477921dea4b7bc2b6f15c998b21711206dc4b2999a19ef87548cda1a809137090be3d7c11030ba10ad84f7beb8bb2967d22a87fa6d0db3a477284ac25a1ed92dec444ca21f9efc68f0a582bb5e753c91590e6f1387af97ccb3306069ed900a29ce2ce12670ac3eb7d36cd30ac84901947911b2f1af20e9fbe67ac1959210e74534ac1fcb1c09865ba0bb34e3baa3cd5133496945efa190836d45ff8672a025b52d534018ecfb69e69eaf0343fdbcee2819ac3ddd76574d914b4583501463e930401677d578dab8c4df3cb7d5c9a669542ab457aa72c9e63c00acd2c2f99100c0b133aea4e25dc2fc9b78cbed15085a919ef66e2e7a6e3fb5659a077762db54d630b4065892de5ee610a7acbe4d52d56cc4903fa594610e7f2bb4c8774bb70c436e1db58e4c2287f6b833fd833371b548f45e79586825c3f5890c1b613f384adf3edd45b1c0282683bb5b4a24aa88b97b8376573f75355e128752f89bef07d3efbc64e2ba76956070df3931721413d2f29add06fbd517a159df898834ab62bdab712d8387eb5c9cac1096a649d2ff3666936e4ec5a096f833d6829b53a7d9d4390338601e9a39a445a25e4794e04dc0278ae8b0563e8fc88837e976
#TRUST-RSA-SHA256 a78128311bbf118c84634af138a91018e5b744fca031677df92ab1bd3e4061e87b10898cc992b414947f834b94f1ec17bdbc2581b6db19e42cb9ce2f0d948b257286fc3ffbca4a272d1e9552684cb1d840b9ab785852a6e801f0112dfac20147ffe3232afd7cde92b2964deb0cf8cfdd5bc4c301c4d775e3552e0e48715e46d465a6aa407e77c9080d6cf2ea8c44a6b2ac4e2cbe04731b4e0bfb6aae23603f8380fa991d4a98c5f802509d22c8a62a06f6ba712c3ed1deee877c6add013afe691f1e310ace2fc157c00b87a5dad4348d3bb2dba6ac2b5269579b77966955d46064c9f9f9834ce95fee58e11adb9d6ea32e5b23fd50213c26e08a233b6885ca4b89621dace439ab7210c95b15f1431ae2919886f04756b6f15302fdccec145f252dacabac8161c061121c917f48152f55fbf8040d4a6af71555f949b398f2d519724601a1febddcdf23359c6c1fe9952a1e261bd045a833c216a2c301087c53676b0d54f6d79c6c847f2d2aab39efb44e4e0475010ff16a1cbd020e30c87aca980940d04d81fd27702c26b89a4c903a25c10ebc4d1998540603c5dee9c5dd0ba472f3bcaba1ab0a9818ce8190891f928330f3ab2fbd447e106b2ff3320eccac2992ca878a3e1ae06cc8b0c1e57564349bbbdafe5d2629f01f608c0bed36fcba1faec8fa984501e875b55d63cb4b0a77a5ad09c99837593a7fe398e8d83e7aca59

# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security Inc.
#
# Revision: 1.18

#
# arista_eos_ios_pre_check_fail
# check if this is a Arista EOS device based on information collected
#
function arista_eos_ios_pre_check_fail()
{
  # have we already checked that the host is not Arista?
  if(host_info_key_val['host_not_arista_eos_ios'])
  {
    # already checked that host is not Arista, no need to check again
    return TRUE;
  }
  if(!empty_or_null(host_info_key_val['showversion_unrecognized']) &&
     host_info_key_val['showversion_unrecognized'] !~ arista_eos_ios_check['test_cmd_regex'])
    return TRUE;

  # Not Arista EOS if one of the following devices
  if (is_cisco_firepower() ||
      is_cisco_nxos() ||
      is_timos_userauth() ||
      is_cisco_ucos() ||
      is_huawei() ||
      is_panos() ||
      is_acos() ||
      is_adtran() ||
      is_staros() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}

#
# callback for systems with "Software image version:" in show version
#
function handle_arista_eos_ios(session, use_shell_handler, &channel, cmd_res)
{
  var cmd_no_spaces, cmd_set, cmd, commands, cmd_output, secret_prefix;
  var cmd_prompt, os, i, priv, os_level, os_pattern, err_kbs;
  var arista_eos_ios = 'Host/Arista/EOS/';
  replace_kb_item(name:arista_eos_ios + 'show_version', value:cmd_res);
  os_pattern = "Software image version:\s+(\d+(?:\.\d+)+(?:\(\d+(?:\.\d+)*\))?[A-Za-z]*)";
  os_level = pregmatch(string:cmd_res, pattern:os_pattern);
  if(!empty_or_null(os_level) && !empty_or_null(os_level[1]))
  {
    os_level = os_level[1];
    set_kb_item(name:arista_eos_ios + 'os_level', value:os_level);

  }
  else
  {
    failure_kb_msg =
      'The remote operating system appears to be a type of Arista EOS\n' +
      'software, however it was not possible to determine the specific OS.';
    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    return NULL;
  }
  report += '\nCommand execution for Arista EOS device successful.';

  commands = [
    {'cmd': 'show running-config all', 
     'secret': TRUE,
     'mandatory': FALSE
    },
    {'cmd': 'show hostname',
     'secret': FALSE,
     'mandatory': FALSE
    },
    {'cmd': 'show interfaces',
     'secret': FALSE,
     'mandatory': FALSE
    },
  ];

  foreach cmd_set (commands)
  {
    cmd = NULL;
    secret_prefix = '';
    if (!empty_or_null(cmd_set['cmd']))
    {
      cmd = cmd_set['cmd'];
    }
    else
    {
      continue;
    }
    if (!empty_or_null(cmd_set['secret']) && cmd_set['secret'])
    {
      secret_prefix = 'Secret/';
    }
    cmd_no_spaces = str_replace(find:" ", replace:"_", string:cmd);

    cmd_output = run_command(cmd:cmd,
                   session:session,
                   use_shell_handler:use_shell_handler,
                   channel:channel,
                   force_priv_escl:TRUE,
                   cmd_timeout_min: 120);

    if (isnull(cmd_output) && cmd_set.mandatory)
    {
      set_kb_item(name:arista_eos_ios + cmd_no_spaces + '/errmsg', value:'The command failed to produce any output.');
    }
    else if (!isnull(cmd_output))
    {
      if (preg(pattern:"\n% Invalid input ", string:cmd_output, multiline:TRUE))
      {
        i = stridx(cmd_output, '\n% Invalid input ');
        # make sure the ^ error marker appears followed by a series of spaces.
        if (i > 0 && preg(pattern:"\^ +$", string:substr(cmd_output, 0, i-1), multiline:TRUE))
        {
          set_kb_item(name:arista_eos_ios + cmd_no_spaces + '/errmsg', value:cmd_output);
        }
        else
        {
          set_kb_item(name:arista_eos_ios + cmd_no_spaces +'/errmsg', value:'An unknown error occurred :' + '\r\n' + cmd_output);
        }
      }
      else
      {
        set_kb_item(name:secret_prefix + arista_eos_ios + cmd_no_spaces, value:cmd_output);
      }
    }
    else
    {
      dbg::detailed_log(lvl:1, src:SCRIPT_NAME, msg:'Non-mandatory command failed to produce any output : ' + cmd + '\n');
    }
  }

  # If cmd_output doesn't exist here, the errmsg KB is already written.

  err_kbs = get_kb_list('*' + arista_eos_ios + '*' + '/errmsg');
  if (!empty_or_null(err_kbs))
  {
    failure_kb_msg =
      'The remote operating system appears to be a type of Arista EOS device,\n' +
      'version ' + os_level + '.\n' +
      'However, at least one command has run into unexpected errors and local checks\n' +
      'will not be enabled at this time.\n';
    failure_kb_type = lcx::ISSUES_INFO;
    report += '\n' + failure_kb_msg + '\n';
    sshlib::set_support_level(level:sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    return NULL;

  }
  else
  {
    replace_kb_item(name:'Host/OS/showver', value: 'Arista EOS ' + os_level);
    replace_kb_item(name:'Host/OS/showver/Confidence', value: 100);
    replace_kb_item(name:'Host/OS/showver/Type', value: 'embedded');

    report += '\nOS Security Patch Assessment is available for Arista EOS device, version ' + os_level + '.';
    sshlib::enable_local_checks();
    replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_arista_eos_ios.static', value: 158);
  }
}

#
# callback for systems without "Arista" in show version
#
function handle_not_arista_eos_ios(session, use_shell_handler, &channel, cmd_res)
{
  if (use_shell_handler) store_shell_info();
  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/show_version", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['showversion_unrecognized'] = cmd_res;
    host_info_key_val['host_not_arista_eos_ios'] = TRUE;
  }
}
