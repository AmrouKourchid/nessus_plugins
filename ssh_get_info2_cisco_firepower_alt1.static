#TRUSTED 75617df0115e011e2c00913edb45c0ee1242edb21feb207922b1568e1978726326f7d7cc2ab5ec51d45babef1de9564903f3cb4f28341c5757489de6eb00cb4265212b06e6517c651aef37f395e3a4ddc791ae6e485dfb5fe941d4b436c6698a6ab129d54bae08c114055290be6a5d53ced9a8f444de6444da388f8f0bda3f6c45e041d7565241f4eaefe4603ff465f31e3c8f4b928088dc36fe8a34b6bc6fec596192e137e42174f88199c1971d7df92f1c9ed2dea8a5d8abf2722e45f042b2891fa418b2aa19b8d512c9559f5b3da120df9078b7508396a1035da3409d431295381c1f991e2c977585f4975c9405f7ec061737f9a7e39b0c042dc9888abea9066ae1c89524248eec572a7815cc2649c64951501a545f6bf0f9a3c4765d49e10c96594dbde5894b1f32b9551f3171443cf43991059ea6ecce3ccedd712ac7da8934bbf8ed4ad97926c3713d42991407958f7c358ad6071f303f1a619d034a3c55f1058ff21740e81fba98abf6fc427e839980558b9cc16bdca52b7a4c6b3af032cc4a4cb0db0b80136bd12ab6e4ec47d1d27d2d9241128aa25dc2211e83a060946821b9866362be8732858f36ff8baeadcb996bfd86c0d7ce45b5573087c929f2758a20a21dd30262943c2294ab51348689ca885a09af237e361846b689bee4fecda62c8354d2877c6fce630b7233c1dbf0f53a53cff786cf13ea02077673da
#TRUST-RSA-SHA256 6d9ecfd7982bc5bc3d8ed034d08730f1eea8a0b8385b70bfdc4c80077da1a94fbed0b975cc47bdd92346e6bcf3d88123c8139357218263d8b189c964ebe062d338abd0efbf260c9ca7bbcca70e0acffd2cdabfa9c510ab1c5a09dfdfddc071242fd334aad27f9a2cdf3b6f37552fdd21cd98ea7c59c3f4b81697f6ea15685186bd0b2bd6c2b686c9c34a87a8b0db36d2089525d1fb3bc32362d54cbd92fdd3e4151d57b2884bab7f7c54333d91d772ab7790598e8c3d84c0cdbd7d5925a5e995b20a8a4da35dc44ab79dd8ed02c1c2101e77535f72b15c3d7fbc4d046d137b07fe29bbc5b5d28e0e21a4c007112eae4a8f2474696aa26c92438e25b19779604ef784784d6b1cadaea54c5940dd8aa60f0e227b466ea336aa333fa94cf52789da4e0ed8cd8e9f051f24f27dfb76e88cee7c36aba97aa3c4f9c1bbe3a84955a01562f751ac974f2468bf7a87304ed936742b70c9b6bf16515a22ff50efb3a5e87b39425b40769f180306f393a0cf93d6bc6f730fd6f977ce2c8391c273140b67e8667c01cbd6f1b7e3ca529444a1d642426fc9480f87d80e4fd2da2daa15e07d8c19af9b5c7a2b086d54b7adb8a382d4df311349d63e3fd225c6ef5740cc15a508eefaa9a0452ed7ba73394651d7b280c28ad35db32c4e217b8afdfc4dc8e4f5ba6d545440c13c62181c25ead6ccd8de3b8335ab08291071adad4de86075bb9353

# (C) Tenable Network Security, Inc.
#
# Revision 1.0
#
# Check host information for triggers that the device is most likely supported
# by this file.
#

function is_cisco_firepower_alt1()
{
  if("Cisco Fire Linux OS" >< host_info_key_val['post_login_buffer'])
  {
    dbg::detailed_log(lvl:1, src:'is_cisco_firepower_alt1()', msg:'Post login buffer contains "Cisco Fire Linux OS".');
    return TRUE;
  }

  return FALSE;
}


#
# cisco_firepower_alt1_pre_check_fail
# check if this is a cisco_firepower (FTD shell) device based on information collected
#
function cisco_firepower_alt1_pre_check_fail()
{
  # have we already checked that the host is not cisco_firepower?
  if(host_info_key_val['host_not_cisco_firepower_alt1'])
    return TRUE;

  if(!empty_or_null(host_info_key_val['showversion_unrecognized']) &&
     host_info_key_val['showversion_unrecognized'] !~ firepower_alt1_check['test_cmd_regex'])
    return TRUE;

  # Not Firepower if one of the following devices
  if (is_cisco_ssh() ||
      is_cisco_nxos() ||
      is_timos_userauth() ||
      is_cisco_ucos() ||
      is_huawei() ||
      is_panos() ||
      is_acos() ||
      is_adtran() ||
      is_asyncos() ||
      is_staros() ||
      is_ivanti_sentry() ||
      is_screenos() ||
      is_exos() ||
      is_qnap_standard() ||
      is_dell_idrac() ||
      is_infoblox_nios() ||
      is_aruba_cppm() ||
      is_arrayos())
  {
    return TRUE;
  }

  return FALSE;
}


#
# callback for systems with output like the following for 'show version':
# Boot Loader version: 1.0.12
# System version: 2.6(1.133)
# Service Manager version: 2.6(1.133)
#
#  and the data provided indicates FTD CLI shell
#
function handle_cisco_firepower_alt1(session, use_shell_handler, &channel, cmd_res)
{
  var buf, match, vendor, os_name = "Cisco Firepower ASA";

  dbg::detailed_log(lvl:3, src:'handle_cisco_firepower_alt1()', msg:'cmd_res is ',
    msg_details:{"Data":{"lvl":3, "value":cmd_res}});

  report +=
    '\nLocal checks have been enabled for Cisco Firepower.\n';

  replace_kb_item(name:"Host/Cisco/show_ver", value:cmd_res);
  replace_kb_item(name:"Host/Cisco/show_version", value:cmd_res);
  replace_kb_item(name:'Host/Cisco/Firepower', value:os_name);
  replace_kb_item(name:'Host/Cisco/Firepower/is_ftd_cli', value:1);
  replace_kb_item(name:'Host/Cisco/device_type', value:'firewall');

  replace_kb_item(name:"Host/OS/showver", value:os_name);
  replace_kb_item(name:"Host/OS/showver/Confidence", value:100);
  replace_kb_item(name:"Host/OS/showver/Type", value:'firewall');

  replace_kb_item(name:"Host/showversion", value:cmd_res);

  replace_kb_item(
    name: sshlib::SSH_LIB_KB_PREFIX + session.get_kb_connection_id() + '/default_shell',
    value: sshlib::FP_SH_FTD);

  report += '\nThe output of "show version" is :\n' + os_name + '\n';

  # For UNIT TESTS
  if (get_kb_item("Host/Cisco/UNIT_TEST/standard"))
    return TRUE;

  local_var err_msg;
  if (!channel) channel = new("sshlib::Channel");
  local_var sh = new("sshlib::firepower_shell_manager");
  local_var cmd, modeldata;
  cmd = "show model";
  modeldata = sh.run_command(session:session,
                            command:cmd,
                            channel:channel,
                            cmd_shell:sshlib::FP_SH_FTD);

  if (session.cmd_error)
  {
    # set support level ERROR, report error to lcx, add error to report, return
    sshlib::set_support_level(level: sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    err_msg = '\nOS Security Patch Assessment is not available because of the following error :

    ';
    failure_kb_msg = "Unable to successfully execute command : ";
    failure_kb_msg += session.cmd_error;
    failure_kb_type = lcx::ISSUES_ERROR;
    err_msg += failure_kb_msg;
    report += err_msg;
    return NULL;
  }

  if (empty_or_null(modeldata))
  {
    session.close_connection();

    sshlib::set_support_level(level: sshlib::SSH_LIB_LOCAL_CHECKS_ERROR);
    lcx::log_issue(type:lcx::ISSUES_INFO, msg:'OS Security Patch Assessment is not available.\n' +
                                              'Nessus failed to determine number of hardware modules.\n');
    report +=
      '\nOS Security Patch Assessment is not available for the target host because\n' +
      'Nessus failed to determine number of hardware modules.\n';

    return NULL;
  }

  report += '\nThe output of "show model" is :\n' + modeldata + '\n';    
  replace_kb_item(name:"Host/Cisco/show_model", value:modeldata);
  replace_kb_item(name:"Host/Cisco/Chassis_CLI/Chassis_module_count", value: 1);

  if (!sh.get_sh_expert(channel:channel, module:1))
  {
    dbg::detailed_log(lvl:1, src:FUNCTION_NAME, msg:'Failed to connect to expert mode');
  }
  else
    report += firepower::gather_expert_data(id:1, channel:channel, session:session, sh:sh);

  report += '\nOS Security Patch Assessment is available for Cisco Firepower.';    
  sshlib::enable_local_checks();
  replace_kb_item(name:'debug/Host/local_checks_enabled_source/includes/ssh_get_info2_cisco_firepower_alt1.static', value: 155);
  replace_kb_item(name:"Host/Cisco/FTD_CLI", value:1);

  return TRUE;
}


#
# callback for systems without "cisco_firepower..." in show version
#
function handle_not_cisco_firepower_alt1(session, use_shell_handler, &channel, cmd_res)
{
  dbg::detailed_log(lvl:2, src:'handle_not_cisco_firepower_alt1()', msg:'handle not firepower alt1');
  if (use_shell_handler) store_shell_info();
  if(!empty_or_null(cmd_res))
  {
    replace_kb_item(name:"Host/showversion", value:cmd_res);
    # store more details for other handlers to use
    host_info_key_val['showversion_unrecognized'] = cmd_res;
    host_info_key_val['host_not_cisco_firepower_alt1'] = TRUE;
  }
}
