#-*- Fundamental -*-
#
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security, Inc.
#
# @NOGPL@
#
# oracle_rdbms_cpu_func.inc
# Revision: 1.37
#

include('compat_shared.inc');
include('debug.inc');

global_var UNKNOWN_TNSLSNR =
  'The remote host operating system could not be identified based on the\n'+
  'TNSLSNR string.  If you know what operating system is installed on the\n' +
  'remote host, please send this signature and the name of the remote\n' +
  'operating system to os-signature@nessus.org :\n\n';

# Function to extract the OS that oracle is running on by checking the
# oracle_tnslsnr/port/version KB item.
# Several retrieved from http://blogs.conus.info/node/42
function get_oracle_os(tnslsnr, tns_os)
{
  local_var os;

  os = NULL;

  # Sometimes the string will contain TNSLSNR, other times it will
  # contain TNS.  To simplify things, replace TNSLSNR with TNS
  if ('TNSLSNR' >< tnslsnr) tnslsnr = str_replace(string:tnslsnr, find:'TNSLSNR', replace:'TNS');

  if ('TNS for 32-bit Windows' >< tnslsnr)
    os = 'win32';
  else if ('TNS for 64-bit Windows' >< tnslsnr)
    os = 'win64';
  else if ('TNS for Linux' >< tnslsnr)
    os = 'nix';
  else if ('TNS for HPUX' >< tnslsnr)
    os = 'hpux';
  else if ('TNS for IBM/AIX' >< tnslsnr)
    os = 'aix';
  else if ('TNS for MacOS X Server' >< tnslsnr)
    os = 'macosx';
  else if ('TNS for Solaris' >< tnslsnr)
    os = 'solaris';
  else if (!isnull(tns_os))
  {
    os = get_kb_item('Host/OS');
    if ('Linux' >< tns_os || 'Linux' >< os)
      os = 'nix';
    else if ('Windows' >< tns_os || 'Windows' >< os)
      os = 'win';
    dbg::log(msg:'[get_oracle_os][tnslsnr][' + tnslsnr + '][tns_os][' + tns_os + '][os]['  + os+ ']' );
  }

  if (isnull(os))
  { 
    set_kb_item(name:"Oracle/Host/OS/unknown", value:"TRUE");
    os = 'unknown';
  }

  return os;
}

function get_oracledb_host_os_and_port()
{
  local_var os, port, arch;
  os = get_kb_item('Host/OS');
  dbg::log(msg:'[get_oracledb_host_os_and_port][Host/OS][' + os + ']' );
  if ('windows' >< tolower(os))
  {
    arch = get_kb_item("SMB/ARCH");
    port = get_kb_item("SMB/transport");
    if (!port) port = 445;
    if (!arch)
    {
      os = 'win';
    }
    else
    {
      if ("x64" >< arch)
        os = 'win64';
      else
        os = 'win32';
    }
  }
  else
  {
    port = 0;
    if ('linux' >< tolower(os))
      os = 'linux';
    else if ('AIX' >< os)
      os = 'aix';
    else if ('Solaris' >< os)
      os = 'solaris';
    else if ('HP-UX' >< os)
      os = 'hpux';
    else if('Mac OS X' >< os)
      os = 'macosx';
    else os = 'nix';
  }
  dbg::log(msg:'[get_oracledb_host_os_and_port][Host/OS][' + os + '][port][' + port +']' );
  return (make_array('port', port, 'os', os));
}

# Function to extract the Oracle version by checking the
# oracle_tnslsnr/port/version KB item.
function get_oracle_version(tnslsnr)
{
  local_var ret, version;

  version = NULL;
  version = ereg_replace(string:tnslsnr, pattern:"^TNS(LSNR)? for .*: Version ([0-9\.]+).*", replace:"\2");

  return version;
}

##
# Finds Oracle databases
#
# @param compid The component to look for
# @param patchset If specified, look for the patchset
# @return ret [Array] An array of oracle products
#             NULL if no products were found
##
function find_oracle_databases()
{
  local_var ret, res, path, ohome, arch;
  local_var oracle_homes, components, version, highversion;
  local_var patchsets, patch, component;
  local_var sid, sids, temp;
  ret = make_array();

  oracle_homes = query_scratchpad("SELECT path, name, arch FROM oracle_homes");
  if (!max_index(oracle_homes)) exit(1, 'Failed to get any Oracle homes from the scratchpad.');
  foreach res (oracle_homes)
  {
    path = res['path'];
    ohome = res['name'];
    arch = res['arch'];
    # It is only possible to have one Oracle database in a given home, so we should only get one result
    components = query_scratchpad("SELECT version, comp_name FROM oracle_components WHERE ohome=? AND comp_id=?;", path, 'oracle.server');
    if (components)
    {
      version = components[0]['version'];
      highversion = version;
      patchsets = query_scratchpad("SELECT version FROM oracle_components WHERE ohome=? AND comp_id=?;", path, 'oracle.patchset.db');
      foreach patch (patchsets)
      {
        version = patch['version'];
        # I've only seen this once, but in cases where the version ends in non-numeric
        # characters, strip them out of the version number
        if (version =~ '^[0-9\\.]+[a-zA-Z]+$')
          version = ereg_replace(pattern:'^([0-9\\.]+).*$', string:version, replace:"\1");
        if (ver_compare(ver:version, fix:highversion) > 0)
          highversion = version;

      }
      ret[ohome]['version'] = highversion;
      ret[ohome]['compname'] = components[0]['comp_name'];
      ret[ohome]['path'] = path;
      ret[ohome]['arch'] = arch;

      # Grab the SIDs
      sids = query_scratchpad("SELECT sid FROM oracle_db_sids WHERE ohome=?;", path);
      if (sids)
      {
        temp = make_list();
        foreach sid (sids)
          temp = make_list(temp, sid['sid']);
        ret[ohome]['sids'] = join(temp, sep:',');
      }
    }
  }
  if (max_index(keys(ret)) > 0) return ret;
  return NULL;
}

# Function to check if the patch has been applied.
# Returns :
#  PatchID if patch is installed
#  NULL if patch is not installed
#  -1 if Patches are not available for the OS
function check_oracle_database(patches, low_risk, high_risk, test_run)
{
  local_var os, source, port, tnslsnr, lsnrversion, res, install, s;
  local_var sids, sid, ohome, installs, ver, vuln, missing, dbversion, report;
  local_var rdbms_patchlevel, ojvm_patchlevel, ojvm, fixpatchlevel;
  local_var osandport;
  local_var ohome_names, service_names, names, ohome_name, sid_vals, service_name, sid_val;
  local_var ojvm_installed;
  local_var matches, tns_os;
  os = NULL;

  # First check the local info
  if (get_kb_item("Oracle/Patches/local"))
  {
    source = "  Ohome                : ";
    osandport = get_oracledb_host_os_and_port();
    os = osandport['os'];
    port = osandport['port'];

    res = get_kb_list("Oracle/*/RDBMS Patch Level");
    foreach ohome (keys(res))
    {
      # Skip Remote port based entries in case Local and Remote both wrote KBs
      if (preg(string:ohome, pattern:'^Oracle/[0-9]+')) continue;
      rdbms_patchlevel = res[ohome];
      ohome = ohome - "Oracle/";
      ohome = ohome - "/RDBMS Patch Level";
      installs[ohome]["rdbms_patchlevel"] = rdbms_patchlevel;

      ver = split(rdbms_patchlevel, sep:'.', keep:FALSE);
      installs[ohome]["version"] = ver[0] + "." + ver[1] + "." + ver[2] + "." + ver[3];

      ojvm_patchlevel = get_kb_item("Oracle/"+ohome+"/OJVM Patch Level");
      ojvm_installed = NULL;
      # If remote detection happened then we probably know if OJVM is installed or not
      if (!empty_or_null(ojvm_patchlevel))
        ojvm_installed = ojvm_remotely_detected(ohome: ohome);
      # If ojvm_installed is NULL then it means we couldn't find OJVM Installed in the KB
      # so to avoid FNs we report the patch level
      if (!empty_or_null(ojvm_patchlevel) && (ojvm_installed || isnull(ojvm_installed)))
        installs[ohome]["ojvm_patchlevel"] = ojvm_patchlevel;
    }
  }
  # If local fails, try to get the patches by querying the DB
  else if (get_kb_item("Oracle/RDBMS/Patches/Remote"))
  {
    source = "  SID                  : ";
    port = get_service(svc:"oracle_tnslsnr", default:1521, exit_on_fail:TRUE);
    tnslsnr = get_kb_item_or_exit("oracle_tnslsnr/"+port+"/version");
    tns_os = get_kb_item("oracle_tnslsnr/"+port+"/tns_os");
    os = get_oracle_os(tnslsnr:tnslsnr, tns_os:tns_os);
    if (os == 'unknown')
    {
      osandport = get_oracledb_host_os_and_port();
      os = osandport['os'];
    }

    sids = get_kb_list("Oracle/"+port+"/*/RDBMS Patch Level");
    foreach sid (keys(sids))
    {
      rdbms_patchlevel = sids[sid];
      sid = sid - ("Oracle/" + port + "/");
      sid = sid - "/RDBMS Patch Level";
      ver = split(rdbms_patchlevel, sep:'.', keep:FALSE);
      installs[sid]["version"] = ver[0] + '.' + ver[1] + '.' + ver[2] + '.' + ver[3];
      installs[sid]["rdbms_patchlevel"] = rdbms_patchlevel;

      ojvm_installed = get_kb_item("Oracle/" + port + "/" + sid + "/OJVM Installed");
      ojvm_patchlevel = get_kb_item("Oracle/"+port+"/"+sid+"/OJVM Patch Level");

      if (ojvm_installed && !empty_or_null(ojvm_patchlevel))
        installs[sid]["ojvm_patchlevel"] = ojvm_patchlevel;
    }
  }
  else if (get_kb_item("Settings/PCI_DSS") || (get_kb_item("Services/oracle_tnslsnr") && report_paranoia > 1))
  {
    source = "  Remote TNS Version   : ";
    port = get_service(svc:"oracle_tnslsnr", default:1521, exit_on_fail:TRUE);
    tnslsnr = get_kb_item_or_exit("oracle_tnslsnr/"+port+"/version");
    tns_os = get_kb_item("oracle_tnslsnr/"+port+"/tns_os");
    os = get_oracle_os(tnslsnr:tnslsnr, tns_os:tns_os);
    if (os == 'unknown')
    {
      osandport = get_oracledb_host_os_and_port();
      os = osandport['os'];
    }
    lsnrversion = get_oracle_version(tnslsnr:tnslsnr);
    ver = split(lsnrversion, sep:'.', keep:FALSE);
    installs[lsnrversion]["version"] = ver[0] + '.' + ver[1] + '.' + ver[2] + '.' + ver[3];
    installs[lsnrversion]["rdbms_patchlevel"] = lsnrversion;
    installs[lsnrversion]["ojvm_patchlevel"] = lsnrversion;
  }
  else
  {
    exit(1, "No Databases detected on the remote host.");
  }
  if (empty_or_null(os)) exit(1, "Failed to determine the host OS.");
  if (empty_or_null(installs)) audit(AUDIT_NOT_INST, "Oracle Database");

  vuln = 0;
  foreach install (keys(installs))
  {
    vuln++;
    missing = '';
    dbversion = installs[install]['version'];
    # 18.x / 19.x versions increment second and third segments each CPU. (E.g. 18.1.0.0 or 18.2.1.0)
    # Here we update 'dbversion' to the first two segments as patches array keys consist of only these.
    if (dbversion =~ '^(18|19)\\.')
    {
      matches = pregmatch(string:dbversion, pattern:'^([0-9]+\\.[0-9]+)\\.');
      if (!isnull(matches) && !isnull(matches[1])) 
        dbversion = matches[1];
    }
    # First check for the DB Patch
    if (!empty_or_null(patches[dbversion]['db']))
    {
      if (empty_or_null(patches[dbversion]['db'][os]) && os =~ "(aix|hpux|linux|solaris)$")
        os = 'nix';
      if (empty_or_null(patches[dbversion]['db'][os]) && os =~ "win(32|64)")
        os = 'win';
      if (!empty_or_null(patches[dbversion]['db'][os]))
      {
        fixpatchlevel = patches[dbversion]['db'][os]['patch_level'];
        if (ver_compare(ver:installs[install]['rdbms_patchlevel'], fix:fixpatchlevel, strict:FALSE) < 0)
        {
          missing += '\n  Missing DB Patches   : ' + patches[dbversion]['db'][os]['CPU'];
        }
      }
    }
    # Now check the OJVM
    if ('win' >!< os) 
      os = 'nix';
    else 
      os = 'win';
    
    if (!empty_or_null(patches[dbversion]['ojvm'][os]))
    {
      fixpatchlevel = patches[dbversion]['ojvm'][os]['patch_level'];
      if (ver_compare(ver:installs[install]['ojvm_patchlevel'], fix:fixpatchlevel, strict:FALSE) < 0)
        missing += '\n  Missing OJVM Patches : ' +  patches[dbversion]['ojvm'][os]['CPU'];
    }

    if(!isnull(ohome))
    {
      sids = query_scratchpad("SELECT sid FROM oracle_db_sids WHERE ohome=?;", ohome);
      ohome_names = query_scratchpad("SELECT name FROM oracle_homes WHERE path = ?;", ohome);
    }
    service_names = "";
    names = "";
    foreach ohome_name (ohome_names)
      if(!empty_or_null(ohome_name['name']))
        names += ohome_name['name'] + ',';
    sid_vals = "";
    if(!isnull(sid))
    {
      service_name = get_kb_item("Oracle/"+sid+"/service_name");
     if(!empty_or_null(service_name))
       service_names += service_name+",";
    }
    else
    {
      foreach sid_val (sids)
      {
         if(!empty_or_null(sid_val['sid']))
         {
           sid_vals += sid_val['sid']+',';
           service_name = get_kb_item("Oracle/"+sid_val['sid']+"/service_name");
           if(!empty_or_null(service_name))
             service_names += service_name+",";
         }
      }
    }
    if(sid_vals == "" || sid_vals == ",")
      sid_vals = "unknown";
    else
      sid_vals = substr(sid_vals, 0, strlen(sid_vals)-2);
    if(names == "" || names == ",")
      names = "unknown";
    else
      names = substr(names, 0, strlen(names)-2);
    if(service_names == "" || service_names == ",")
      service_names = "unknown";
    else
      service_names = substr(service_names, 0, strlen(service_names)-2);
    if (missing)
    {
      if(sid_vals != "unknown")
        report += '\n  SID(s)               : '+sid_vals;
      if(names != "unknown")
        report += '\n  Ohome Name(s)        : '+names;
      if(service_names != "unknown")
        report += '\n  Service Name(s)      : '+service_names;
      report += '\n' + source + install + missing + '\n';
    }
  }

  if (!empty_or_null(report))
  {
    if (vuln > 1) s = 's of Oracle Database are';
    else s = ' of Oracle Database is';

    if (report_verbosity > 0)
    {
      report =
        '\n' +
        'The following vulnerable instance'+s+' installed on the\n' +
        'remote host :\n' +
        report +
        '\n';

      if("Remote TNS Version" >< source)
      {
        report +=
          'Note that missing patch information is based on the remotely detected\n' +
          'TNS listener version.\n';
      }

      if (!low_risk && !high_risk)
      {
        if(!test_run)
          security_warning(port:port, extra:report);
        else
          return report;
      }
      else
      {
        if (low_risk)
        {
          if(!test_run)
            security_note(port:port, extra:report);
          else
            return report;
        }
        else
        {
          if(!test_run)
            security_hole(port:port, extra:report);
          else
            return report;
        }
      }
    }
    else
    {
      if (!low_risk && !high_risk)
      {
        if(!test_run)
          security_warning(port:port);
        else
          return report;
      }
      else
      {
        if (low_risk)
        {
          if(!test_run)
            security_note(port:port);
          else
            return report;
        }
        else
        {
          if(!test_run)
            security_hole(port:port);
          else
            return report;
        }
      }
    }
  }
}

##
# Checks if remote detection detected OJVM as installed on the ohome
#
# @param [ohome:String] The ohome path on which to check for the OJVM installation
#
# @return [boolean|NULL] TRUE if OJVM is installed, FALSE if it's not,
#         and NULL if it couldn't be found or the function's criteria were not met
#
# @remark This function is meant to be used by local detection when remote detection also ran
##
function ojvm_remotely_detected(ohome)
{
  if (!get_kb_item('Oracle/RDBMS/Patches/Remote') || !get_kb_item('Oracle/Patches/local'))
  {
    dbg::detailed_log(lvl: 3, src: FUNCTION_NAME, msg:'Oracle remote and/or local detection did not run, returning NULL.');
    return NULL;
  }

  if (empty_or_null(ohome))
  {
    dbg::detailed_log(lvl: 3, src: FUNCTION_NAME, msg:'Empty or NULL ohome given, returning NULL.');
    return NULL;
  }

  var sid, sids, ojvm_installed, ojvm_keys, service_name, ojvm_flags, ojvm_key;
  ojvm_installed = NULL;

  sids = query_scratchpad("SELECT sid FROM oracle_db_sids WHERE ohome=?;", ohome);
  if (empty_or_null(sids))
    dbg::detailed_log(lvl: 3, src: FUNCTION_NAME, msg:'No SIDs where found for ' + ohome + '.');
  else
    dbg::detailed_log(
      lvl: 3,
      src: FUNCTION_NAME,
      msg: 'Local detection retrieved SIDs for ohome ' + ohome,
      msg_details: {'SIDs': {'lvl': 3, 'value': sids}});

  foreach sid (sids)
  {
    sid = sid['sid'];
    ojvm_installed = get_kb_list('Oracle/*/' + sid + '/OJVM Installed');
    # If the SID didn't work then get the service name and try again with it
    if (empty_or_null(ojvm_installed))
    {
      service_name = get_kb_item('Oracle/' + sid + '/service_name');
      if (!empty_or_null(service_name))
        ojvm_installed = get_kb_list('Oracle/*/' + service_name + '/OJVM Installed');
      dbg::detailed_log(
        lvl:3,
        src:FUNCTION_NAME,
        msg: 'Fallback to using the service name',
        msg_details:{
          'SID':{'lvl': 3, 'value': sid},
          'Service name': {'lvl': 3, 'value': service_name}});
    }

    if (!empty_or_null(ojvm_installed))
    {
      # May have gotten OJVM Installed for multiple listener ports but they should all point to the same database/ohome
      ojvm_keys = keys(ojvm_installed);
      ojvm_installed = ojvm_installed[ojvm_keys[0]];
      dbg::detailed_log(
        lvl:3,
        src:FUNCTION_NAME,
        msg: 'OJVM Installed key found',
        msg_details:{
          'SID':{'lvl': 4, 'value': sid},
          'Ohome': {'lvl': 4, 'value': ohome},
          'Key value': {'lvl': 4, 'value': ojvm_installed}});
      break;
    }

    ojvm_installed = NULL;
  }

  # If unsuccessful, check if we have only one OJVM installed flag set or more than one, but all set to the same value. 
  if (isnull(ojvm_installed))
  {
    ojvm_flags = get_kb_list('Oracle/*/OJVM Installed');
    foreach ojvm_key (keys(ojvm_flags))
    {
      if (isnull(ojvm_installed))
        ojvm_installed = ojvm_flags[ojvm_key];
      else if (ojvm_installed != ojvm_flags[ojvm_key])
      {
        ojvm_installed = NULL;
        break;
      }
    }
  }

  return ojvm_installed;
}

###
# Function to check if the patch has been applied.
# @param product The product name
# @param installs [Array] of product installs
# @param patches [Array] of patches for product versions
# @param kbprefix [String] the prefix for the KB for trimming
##
function oracle_product_check_vuln(product, installs, patches, kbprefix, low_risk, high_risk)
{
  local_var vuln, path, patched, version;
  local_var patch, patchesinstalled;
  local_var res, report, item, s1, s2;
  local_var notvuln;
  if (isnull(installs) || isnull(patches)) return NULL;

  vuln = 0;
  report = "";
  notvuln = make_array();
  foreach path (keys(installs))
  {
    version = installs[path];
    version = ereg_replace(pattern:'^([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+).*', string:version, replace:"\1");
    
    # Trim the KB data
    if (kbprefix)
    {
      path = path - kbprefix;
      path = path - '/Version';
    }

    if (!patches[version])
    {
      notvuln[path] = version;
      continue;
    }

    patched = FALSE;
    foreach patch (patches[version])
    {
      # First grab the patch IDs installed in the Oracle home
      patchesinstalled = query_scratchpad("SELECT patchid FROM oracle_patches WHERE ohome=?;", path);
      if (patchesinstalled)
      {
        foreach item (patchesinstalled)
        {
          if (item['patchid'] == patch)
          {
            patched = TRUE;
            break;
          }
          res = query_scratchpad("SELECT bugid FROM oracle_bugsfixed WHERE patchid=? AND bugid=?;", item['patchid'], patch);
          if (res)
          {
            patched = TRUE;
            break;
          }
        }
        if (patched) break;
      }
    }
    if (!patched)
    {
      vuln++;
      report +=
        '\n  Path           : ' + path +
        '\n  Version        : ' + version + 
        '\n  Required patch : ' + join(sep:' or ', patches[version]) + '\n';
    }
    else
      notvuln[path] = version;
  }
  if (report)
  {
    if (vuln > 1)
    {
      s1 = 's ';
      s2 = ' were found';
    }
    else
    {
      s1 = ' ';
      s2 = ' was found';
    }

    report =
      '\nThe following vulnerable version' + s1 + 'of ' + product + s2 +
      '\non the remote host : ' +
      report +
      '\n';
    
    if (report_verbosity > 0)
    {
      if (!low_risk && !high_risk)
        security_warning(port:0, extra:report);
      else
      {
        if (low_risk)
          security_note(port:0, extra:report);
        else 
          security_hole(port:0, extra:report);
      }
    }
    else
    {
      if (!low_risk && !high_risk)
        security_warning(0);
      else
      {
        if (low_risk)
          security_note(0);
        else
          security_note(0);
      }
    }
    exit(0);
  }
  if (max_index(keys(notvuln)) > 0)
  {
    # Provide a useful audit trail
    if (max_index(keys(notvuln)) > 1)
    {
      s1 = 's ';
      s2 = 'are';
    }
    else
    {
      s1 = ' ';
      s2 = 'is';
    }
    report = 
      '\nThe following instance' + s1 + 'of ' + product +
      '\n' + s2 + ' not affected : \n';
    foreach path (keys(notvuln))
    {
      report +=
        '\n  ' + path + ' : ' + notvuln[path];
    }
    report += '\n';
    exit(0, report);
  }
  # We should never get here
  exit(1, 'Unexpected error.\n');
}

# This function is only meant for finding subcomponents.  Top-level
# components should have a detection plugin
#
# @param ohome The oracle home to check
# @param compid The component to look for 
# @return ret The detected version 
#         NULL if the component is not found
##
function find_oracle_component_in_ohome(ohome, compid)
{
  local_var ret, res;
  local_var components, component, version;

  components = query_scratchpad("SELECT version, comp_name FROM oracle_products WHERE ohome=? AND comp_id=?;", ohome, compid);
  if (components)
  {
    foreach component (components)
    {   
      version = component['version'];
      return version;
    }   
  }
  return NULL;
}

##
# Finds patches for a particular Oracle Home
#
# @param ohomes A list of Oracle homes
# @return ret [Array] An array of applied patches
##
function find_patches_in_ohomes(ohomes)
{
  local_var ohome, bugids, bug, bugsfixed;
  local_var patch, patches, patchid, patched;
  local_var ret;

  patched = FALSE;
  ret = make_array();
  if (isnull(ohomes)) return -1;

  foreach ohome (ohomes)
  {
    ret[ohome] = make_array();
    bugids = make_list();
    patches = query_scratchpad("SELECT patchid, uniqid, patchdesc FROM oracle_patches WHERE ohome=?;", ohome);
    if (patches)
    {
      patched = TRUE;
      foreach patch (patches)
      {
        patchid = patch['patchid'];
        bugsfixed = query_scratchpad("SELECT bugid FROM oracle_bugsfixed WHERE patchid=?;", patchid);
        if (bugsfixed)
        {
          foreach bug (bugsfixed)
            bugids = make_list(bugids, bug['bugid']);
        }
        ret[ohome][patchid]['uniqid'] = patch['uniqid'];
        ret[ohome][patchid]['patchdesc'] = patch['patchdesc'];
        ret[ohome][patchid]['bugs'] = bugids;
      }
    }
  }
  if (!patched)
    return NULL;
  return ret;
}
