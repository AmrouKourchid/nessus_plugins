#TRUSTED 5e89b081d0c00e45c9a3df67977afcb65703947307c674a10a358b4ee529d1b0d5d51d2ff09f09d4e4ed58c9249f92ff3994491833ac8b1c0deb5c22bb748fa926ddd746bc633b7876c725af1ce47fe2f329e3cc8220a2678194b1e908254c69a89c34f8698da47ce5d1fa22222b3ffac78efad1419a741e3ed1421d09a6f465acc08b259870eba7cdccb5679eb545ba8e27bca1872f8deff7ae28f1091dbf249745a657247edefd2bf78abe9e68945d509f9142eb2ac3c14ec7f9b9895e050cf4faa718495aa5544e537dd7c0cc896e226f914a2bab3d3ca1ce4f653a0aab6ad2656fbc4440a44d2590e0a8664a428a5d6fdbf2f46f040bc9ef5408ccb0cf0c423707d5d3023cc20c2247d4c81a98aabeff5e4000bcc023306ed20ab935043045f73ef575e74bf515a82268de60152616c47b4d7198ed5383f207958acdbf917638649f00b568301733f97ac107cfe1704ca5db7964fd666de68974741fbacd8701869aeef5b3f8fb2741a21cae478d5e12fdf03a91ef0d578ccb161f4df326f7aa24f58ff1c3cdd9f2387b95a5dbfb985eba03a63aac4e9d4f31c61787f747299b6ce3c5df96c9c13aa74640d0b2b1617b04f6c60caba0bb528f4a57f5a4a47f1420c9c906480c985b0357c61deebdbe6050d88c4eb2e62d779784fb6d995b37955ec028563e0b2d2dc6fffdf79fc59c5a978e4b792e946d349ef942297cc2
#TRUST-RSA-SHA256 6de2a1be016aae18419d642d80d7bd33551663e0ba4264e0e78c7076e0b634d87adc4a7b5d10c92eade73fab775fc5dc14ce26feec9e9c283b0d4964b39371e3ad35afa808a96054d644c25c38ece1b1c387ddcc3643a11c2254d6073a61b5b629a20ec4a975a67d5a041848f200dc20f11ba362647b037665dffcbae8980dd64eb77e1f962df242853b523f10f6ace8a50b315c33e5495a10b0aebf4eb1c5ef08f273db13e5b1e0457c36d31effaf8560942dba2825565ed3c815e398af0d5780c3ae0b92787d40c2464c97648c5049800cbd8f65d1f485ced31f54a81e286c11488379c8ce91d2f117b62abfa5aa2036e27570bfd985f866c92e435a8bd662e6789a8cb8a31eea744c529026fc03f40c656ff3d2bad682aa0efc4730def9e84dd4b1b7e453622179e4a8059dfe0b2a7347972c1d5e2c100aff1ffb3f0f25d1d1dfaac03f9f89a21180777a1c865d01c5f9e4a687d6bfb7a35b9fe0786e9548dbcd3ff3a3e0187829c0df87871e7f296233a2814a491f5004f70d2654802c11584a5cde5d11008fecb39560af2e4231a5f9c59b9e38eb47e2ae8784e17c6d9ba54201cec9deaa94716fb8a15fa439c4ae8bb9436edb10ea5d8fb2453afec56f59ba75c7aef5d6f6988a412a9353e8a0425acc3fc65e2938864928c2d4c135e0b1a5f59a6f32b2f13aebbc5fbc149ca1c6bdde39d2c84729b0f80fa7f85162b2
#
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security, Inc.
#
# @NOGPL@
#
# hostlevel_funcs.inc
#
# Revision: 1.28
#
#

global_var info_t, port_g, login, pass;
global_var sock_g, sep, c;

# Error codes
global_var HLF_OK       =  0;  # No error
global_var HLF_MISMATCH = -1;  # Argument no./template mismatch.
global_var HLF_INVALID  = -2;  # Invalid characters in argument(s)
global_var HLF_NO_ARG   = -3;  # An argument is missing.

##
# Open a telnet connection
#
# @param port telnet port
# @param login user to login with
# @param pass password to login with
#
# @return Returns socket if successful, otherwise returns NULL
##
function telnet_open_cnx(port, login, pass)
{
 local_var	s, res;
 local_var	ps;

 if ( ! get_port_state(port) ) return NULL;
 s = open_sock_tcp(port);
 if (! s) return NULL;

 res = telnet_negotiate(socket: s);
 if (strlen(res) == 0)
 {
  close(s);
  return NULL;
 }
 send(socket: s, data: login + '\r\n');
 res = recv_until(socket: s, pattern: "[pP]assword:");
 if (strlen(res) == 0)
 {
  close(s);
  return NULL;
 }
 send(socket: s, data: pass + '\r\n');

 ps = '([$#%>] )|([a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+ +(/|(/[^/]+)+/*) *[$#%>])';

 res = recv_until(socket: s, pattern: ps);
 if (strlen(res) == 0)
 {
  close(s);
  return NULL;
 }
 send(socket: s, data: 'thisisnotaknowncommand'+rand()+'\r\n');
 res = recv_until(socket: s, pattern: ps);
#debug_print('Bad command => ', res);
 if ('thisisnotaknowncommand' >!< res)
 {
  close(s);
  return NULL;
 }
 return s;
}

##
# Runs command via rexec
#
# @param port rexec port
# @param login user to login with
# @param pass password to login with 
# @param cmd command to run
#
# @returns NULL if error, or string containing command result
##
function send_rexec(port, login, pass, cmd)
{
  local_var	s, buf;

  if ( ! get_port_state(port) ) return NULL;
  s = open_priv_sock_tcp(dport: port);
  if (! s) return NULL;
  send(socket: s, data: '\0');    # No separate channel for error :-(
  send(socket: s, data: login + '\0' + pass + '\0' + cmd + '\0');
  buf = recv(socket: s, length: 1);  # 0 if OK?
  if ( isnull(buf) || ord(buf[0]) > 0)
  {
   close(s);
   return NULL;
  }
  buf = recv(socket: s, length: 1024*1024);
  close(s);
#debug_print('send_rexec: cmd = ', cmd, '\nbuf = \n', buf, '\n\n');
  return buf;
}

##
# Performs rlogin
#
# @param port rlogin port
# @param login username to login with
# @param pass password to login with
# @param from from user (optional, defaults to 'root')
#
# @return socket if successful, NULL if failure
##
function rlogin(port, login, pass, from)
{
 local_var	s, r;

 if ( ! get_port_state(port) ) return NULL;
 s = open_priv_sock_tcp(dport: port);
 if (!s) return NULL;
 if (! from) from = 'root';
 send(socket: s, data: '\0');
 send(socket: s, data: from + '\0' + login + '\0raw/38400\0');
 r = recv(socket: s, length: 1);
 if (r != '\0') { close(s); return NULL; }
 r = recv(socket: s, length: 1024*1024);
 if (r =~ 'Password *: *$')
 {
  send(socket: s, data: pass + '\r');
  r = recv(socket: s, length: 1024*1024);
  # display("'", ord(r[0]), "' (r)\n");
  if (r =~ 'Password *: *$')
  {
   close(s);
   return NULL;
  }
 }
 return s;
}

##
# Runs command via rsh
# 
# @param port rsh port
# @param login User to login as 
# @param from From user (optional, default is 'root')
# @param cmd Command to run
#
# @return NULL if error or string containing command output
##
function send_rsh(port, login, from, cmd)
{
 local_var	s, buf;

 if (! from) from = 'root';
 s = open_priv_sock_tcp(dport: port);
 if (! s) return NULL;
 send(socket: s, data: '0\0');	# No separate channel for error :-(
 send(socket: s, data: from + '\0' + login + '\0' + cmd + '\0');
 buf = recv(socket: s, length: 1);  # 0 if OK?
 if (ord(buf[0]) > 0)
 {
  close(s);
  return NULL;
 }
 buf = recv(socket: s, length: 1024*1024);
 close(s);
 return buf;
}

##
# Run ssh/telnet/rsh/rexec/local command
#
# @param cmd Command to run
# @param timeout A caller provided timeout (currently SSH only)
# @param nosudo Disables sudo in ssh_cmd
# @param force_priv_escl Passes through to ssh_cmd() to be passed to
#                        sshlib if wrapper functions are enabled
# @param pread_options Options to pass to pread_ex() for agents
#
# @return NULL if error or result of command as string
##

function info_send_cmd(cmd, timeout, nosudo, force_priv_escl, pread_options)
{
  return info_send_cmd_impl(cmd:cmd, timeout:timeout, nosudo:nosudo, force_priv_escl:force_priv_escl, pread_options:pread_options);
}

##
# determines and sets best connection option
# returns TRUE of FALSE (or exits if 'exit_on_fail' == TRUE)
##
function info_connect(exit_on_fail)
{
  if(isnull(exit_on_fail)) exit_on_fail = FALSE;

  if (islocalhost())
  {
    if (!defined_func("pread")) exit(1, "'pread()' is not defined.");
    info_t = INFO_LOCAL;
  }
  else
  {
    info_t = INFO_SSH;
    local_var ret = ssh_open_connection();
    if (!ret)
    {
      if(exit_on_fail) exit(1, "Failed to open an SSH connection.");
      return FALSE;
    }
  }
  return TRUE;
}

##
# run a command from a template
# all variables are checked to prevent command injection
#
# @param template : arguments are presented as $<argument_number>$ in template
# @param args : list of arguments (optional)
# @param timeout : timeout in seconds (optional)
# @param nosudo Disables sudo in ssh_cmd
# @param force_priv_escl Passes through to ssh_cmd() to be passed to
#                        sshlib if wrapper functions are enabled
#
# @return array s.t. 'data' contains the return value of the command
#               'error' contains the relevant error code.
function run_cmd_template(template, args, timeout, exit_on_fail, nosudo, force_priv_escl)
{
  local_var i, arg, buf, err;
  i = 1;

  if(isnull(exit_on_fail)) exit_on_fail = FALSE;

  if (isnull(template))
  {
    err = 'run_cmd_template(): missing required arg "template"';
    if(exit_on_fail)
    {
      ssh_close_connection();
      exit(1, err);
    }

    return make_array('error', HLF_NO_ARG);
  }

  # we shouldn't have variable in template if no arguments are present
  # coding error, so exit
  if (isnull(args) && preg(pattern:"\$[0-9]+\$", string:template))
  {
    err = 'run_cmd_template(): Template variables present with no arguments.';
    if(exit_on_fail)
    {
      ssh_close_connection();
      exit(1, err);
    }
    return make_array('error', HLF_MISMATCH);
  }

  # sanitize arguments to prevent command injection attacks
  foreach arg (args)
  {
    # Don't allow denylisted chars
    if (arg =~ INJECTION_PATTERN)
    {
      err = strcat('Invalid characters in argument "args": ', obj_rep(arg));
      dbg::detailed_log(lvl:1, src:FUNCTION_NAME, msg:err);
      lcx::store_dangerous_nix_filepath(item:arg);
      if(exit_on_fail)
      {
        ssh_close_connection();
        exit(1, err);
      }
      return make_array('error', HLF_INVALID);
    }

    template = ereg_replace(string:template, pattern:"\$" + i + "\$", replace:arg);
    i++;
  }
  # template variable number / argument number mismatch
  # coding error, so exit
  if (preg(pattern:"\$[0-9]+\$", string:template))
  {
    err = "run_cmd_template(): The number of template variables mismatch the number of arguments provided.";
    if(exit_on_fail)
    {
      ssh_close_connection();
      exit(1, err);
    }
    return make_array('error', HLF_MISMATCH);
  }

  buf = info_send_cmd(cmd:template, timeout:timeout, nosudo:nosudo, force_priv_escl:force_priv_escl);

  return make_array('data', buf, 'error', HLF_OK);
}

##
# Logs results of a command within scratchpad
#
# @param command text version of command being issued locally
# @param response text version of response received by command
# @remark Calls logger for JSON version as well, 
#
# @return No return
##
function local_log_command_and_response(command, response)
{
  if(!get_kb_item("global_settings/enable_plugin_debugging")) {
    return NULL;
  }

  if (isnull(response) || strlen(response) < 1) response = "info_send_cmd: Response empty or null";

  local_var hostname = get_host_name();
  if(!hostname) hostname = get_host_ip();

  local_var message = '{' +
    '"plugin": ' + serialize(SCRIPT_NAME) + ', ' +
    '"command": ' + serialize(command) + ', ' +
    '"response": ' + serialize(response) + ', ' +
    '"hostname": ' + serialize(hostname) +
    '}';
  spad_log(message: message, name: 'local_commands.log');
}

##
# Sets global variables
##
function set_globals()
{
 local_var opt;
 opt = get_kb_item("global_settings/report_verbosity");

 if (opt )
        {
        if ("Verbose" >< opt ) report_verbosity = 2;
        else if ("Normal" >< opt ) report_verbosity = 1;
        else if ("Quiet" >< opt ) report_verbosity = 0;
        }
}

set_globals();

